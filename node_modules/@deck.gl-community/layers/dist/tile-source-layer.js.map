{"version":3,"file":"tile-source-layer.js","names":["CompositeLayer","TileLayer","BitmapLayer","GeoJsonLayer","PathLayer","devicePixelRatio","window","TileSourceLayer","constructor","arguments","state","initializeState","setState","tileSource","updateState","_ref","props","changeFlags","renderLayers","showTileBorders","metadata","onTilesLoad","minZoom","maxZoom","id","String","url","getTileData","maxRequests","pickable","onViewportLoad","autoHighlight","highlightColor","tileSize","zoomOffset","renderSubLayers","layerName","defaultProps","tile","index","z","zoom","bbox","west","south","east","north","layers","borderColor","mimeType","push","data","getFillColor","lineWidthScale","lineWidthMinPixels","image","bounds","console","error","getPath","d","getColor","widthMinPixels"],"sources":["../src/tile-source-layer.ts"],"sourcesContent":["// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {CompositeLayer, Layer} from '@deck.gl/core';\nimport {TileLayer, TileLayerProps} from '@deck.gl/geo-layers';\nimport {BitmapLayer, GeoJsonLayer, PathLayer} from '@deck.gl/layers';\nimport type {TileSource} from '@loaders.gl/loader-utils';\n\n/* global window */\nconst devicePixelRatio = (typeof window !== 'undefined' && window.devicePixelRatio) || 1;\n\nexport type TileSourceLayerProps = TileLayerProps & {\n  tileSource: TileSource;\n  showTileBorders?: boolean;\n};\n\n/**\n * A Deck.gl layer that renders a tile source\n * Autodiscovers type of content (vector tile, bitmap, ...)\n * Can render debug borders around tiles\n * TODO - Change debug border color based on zoom level\n */\nexport class TileSourceLayer extends CompositeLayer<TileSourceLayerProps> {\n  static layerName = 'TileSourceLayer';\n  static defaultProps = {\n    ...TileLayer.defaultProps,\n    showTileBorders: true\n  };\n\n  state: {\n    tileSource: TileSource | null;\n  };\n\n  initializeState() {\n    this.setState({\n      tileSource: null\n    });\n  }\n\n  updateState({props, changeFlags}) {\n    this.setState({\n      tileSource: props.tileSource\n    });\n  }\n\n  renderLayers() {\n    const {tileSource, showTileBorders, metadata, onTilesLoad} = this.props;\n    const minZoom = metadata?.minZoom || 0;\n    const maxZoom = metadata?.maxZoom || 30;\n\n    return [\n      new TileLayer({\n        // HACK: Trigger new layer via id prop to force clear tile cache\n        id: String(tileSource.url),\n        getTileData: tileSource.getTileData,\n        // Assume the pmtiles file support HTTP/2, so we aren't limited by the browser to a certain number per domain.\n        maxRequests: 20,\n    \n        pickable: true,\n        onViewportLoad: onTilesLoad,\n        autoHighlight: showTileBorders,\n        highlightColor: [60, 60, 60, 40],\n        minZoom,\n        maxZoom,\n        tileSize: 256,\n        // TOOD - why is this needed?\n        zoomOffset: devicePixelRatio === 1 ? -1 : 0,\n        renderSubLayers,\n    \n        // Custom prop\n        tileSource,\n        showTileBorders\n      })\n    ];\n  }  \n}\n\nfunction renderSubLayers(props: TileSourceLayerProps & {tile: {index, bbox: {west, south, east, north}}}) {\n  const {\n    tileSource, \n    showTileBorders, \n    minZoom,\n    maxZoom,\n    tile: {index: {z: zoom}, \n    bbox: {west, south, east, north}}\n  } = props;\n\n  const layers: Layer[] = [];\n\n  const borderColor = zoom <= minZoom || zoom >= maxZoom ? [255, 0, 0, 255] : [0, 0, 255, 255];\n\n  switch (tileSource.mimeType) {\n    case 'application/vnd.mapbox-vector-tile':\n      layers.push(\n        new GeoJsonLayer({\n          id: `${props.id}-geojson`,\n          data: props.data,\n          pickable: true,\n          getFillColor: [0, 190, 80, 255],\n          lineWidthScale: 500,\n          lineWidthMinPixels: 0.5\n        })\n      );\n      break;\n\n    case 'image/png':\n    case 'image/jpeg':\n    case 'image/webp':\n    case 'image/avif':\n      layers.push(\n        new BitmapLayer(props, {\n          data: null,\n          image: props.data,\n          bounds: [west, south, east, north],\n          pickable: true\n        })\n      );\n      break;\n\n    default:\n      console.error('Unknown tile mimeType', tileSource?.mimeType);\n  }\n\n  // Debug tile borders\n  if (showTileBorders) {\n    layers.push(\n      new PathLayer({\n        id: `${props.id}-border`,\n        data: [\n          [\n            [west, north],\n            [west, south],\n            [east, south],\n            [east, north],\n            [west, north]\n          ]\n        ],\n        getPath: (d) => d,\n        getColor: borderColor,\n        widthMinPixels: 4\n      })\n    );\n  }\n\n  return layers;\n}\n"],"mappings":"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"}