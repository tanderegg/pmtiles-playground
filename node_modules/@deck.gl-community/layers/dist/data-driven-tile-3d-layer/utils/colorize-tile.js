import { customizeColors } from '@loaders.gl/i3s';
export const colorizeTile = async (tile, colorsByAttribute) => {
  const result = {
    isColored: false,
    id: tile.id
  };
  if (tile.content.customColors !== colorsByAttribute) {
    if (tile.content && colorsByAttribute) {
      if (!tile.content.originalColorsAttributes) {
        tile.content.originalColorsAttributes = {
          ...tile.content.attributes.colors,
          value: new Uint8Array(tile.content.attributes.colors.value)
        };
      } else if (colorsByAttribute.mode === 'multiply') {
        tile.content.attributes.colors.value.set(tile.content.originalColorsAttributes.value);
      }
      tile.content.customColors = colorsByAttribute;
      const newColors = await customizeColors(tile.content.attributes.colors, tile.content.featureIds, tile.header.attributeUrls, tile.tileset.tileset.fields, tile.tileset.tileset.attributeStorageInfo, colorsByAttribute, tile.tileset.loadOptions.i3s.token);
      if (tile.content.customColors === colorsByAttribute) {
        tile.content.attributes.colors = newColors;
        result.isColored = true;
      }
    } else if (tile.content && tile.content.originalColorsAttributes) {
      tile.content.attributes.colors.value = tile.content.originalColorsAttributes.value;
      tile.content.customColors = null;
      result.isColored = true;
    }
  }
  return result;
};
//# sourceMappingURL=colorize-tile.js.map