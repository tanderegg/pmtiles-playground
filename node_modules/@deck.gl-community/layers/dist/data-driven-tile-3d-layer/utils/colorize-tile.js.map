{"version":3,"file":"colorize-tile.js","names":["customizeColors","colorizeTile","tile","colorsByAttribute","result","isColored","id","content","customColors","originalColorsAttributes","attributes","colors","value","Uint8Array","mode","set","newColors","featureIds","header","attributeUrls","tileset","fields","attributeStorageInfo","loadOptions","i3s","token"],"sources":["../../../src/data-driven-tile-3d-layer/utils/colorize-tile.ts"],"sourcesContent":["// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {customizeColors} from '@loaders.gl/i3s';\nimport {Tile3D} from '@loaders.gl/tiles';\nimport {ColorsByAttribute} from '../data-driven-tile-3d-layer';\n\n/**\n * Update tile colors with the custom colors assigned to the I3S Loader\n * @returns {Promise<{isColored: boolean; id: string}>} Result of the tile colorization - isColored: true/false and tile id\n */\nexport const colorizeTile = async (\n  tile: Tile3D,\n  colorsByAttribute: ColorsByAttribute | null\n): Promise<{isColored: boolean; id: string}> => {\n  const result = {isColored: false, id: tile.id};\n\n  if (tile.content.customColors !== colorsByAttribute) {\n    if (tile.content && colorsByAttribute) {\n      if (!tile.content.originalColorsAttributes) {\n        tile.content.originalColorsAttributes = {\n          ...tile.content.attributes.colors,\n          value: new Uint8Array(tile.content.attributes.colors.value)\n        };\n      } else if (colorsByAttribute.mode === 'multiply') {\n        tile.content.attributes.colors.value.set(tile.content.originalColorsAttributes.value);\n      }\n\n      tile.content.customColors = colorsByAttribute;\n\n      const newColors = await customizeColors(\n        tile.content.attributes.colors,\n        tile.content.featureIds,\n        tile.header.attributeUrls,\n        tile.tileset.tileset.fields,\n        tile.tileset.tileset.attributeStorageInfo,\n        colorsByAttribute,\n        (tile.tileset.loadOptions as any).i3s.token\n      );\n      // Make sure custom colors is not changed during async customizeColors execution\n      if (tile.content.customColors === colorsByAttribute) {\n        tile.content.attributes.colors = newColors;\n        result.isColored = true;\n      }\n    } else if (tile.content && tile.content.originalColorsAttributes) {\n      tile.content.attributes.colors.value = tile.content.originalColorsAttributes.value;\n      tile.content.customColors = null;\n      result.isColored = true;\n    }\n  }\n  return result;\n};\n"],"mappings":"AAIA,SAAQA,eAAe,QAAO,iBAAiB;AAQ/C,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAC1BC,IAAY,EACZC,iBAA2C,KACG;EAC9C,MAAMC,MAAM,GAAG;IAACC,SAAS,EAAE,KAAK;IAAEC,EAAE,EAAEJ,IAAI,CAACI;EAAE,CAAC;EAE9C,IAAIJ,IAAI,CAACK,OAAO,CAACC,YAAY,KAAKL,iBAAiB,EAAE;IACnD,IAAID,IAAI,CAACK,OAAO,IAAIJ,iBAAiB,EAAE;MACrC,IAAI,CAACD,IAAI,CAACK,OAAO,CAACE,wBAAwB,EAAE;QAC1CP,IAAI,CAACK,OAAO,CAACE,wBAAwB,GAAG;UACtC,GAAGP,IAAI,CAACK,OAAO,CAACG,UAAU,CAACC,MAAM;UACjCC,KAAK,EAAE,IAAIC,UAAU,CAACX,IAAI,CAACK,OAAO,CAACG,UAAU,CAACC,MAAM,CAACC,KAAK;QAC5D,CAAC;MACH,CAAC,MAAM,IAAIT,iBAAiB,CAACW,IAAI,KAAK,UAAU,EAAE;QAChDZ,IAAI,CAACK,OAAO,CAACG,UAAU,CAACC,MAAM,CAACC,KAAK,CAACG,GAAG,CAACb,IAAI,CAACK,OAAO,CAACE,wBAAwB,CAACG,KAAK,CAAC;MACvF;MAEAV,IAAI,CAACK,OAAO,CAACC,YAAY,GAAGL,iBAAiB;MAE7C,MAAMa,SAAS,GAAG,MAAMhB,eAAe,CACrCE,IAAI,CAACK,OAAO,CAACG,UAAU,CAACC,MAAM,EAC9BT,IAAI,CAACK,OAAO,CAACU,UAAU,EACvBf,IAAI,CAACgB,MAAM,CAACC,aAAa,EACzBjB,IAAI,CAACkB,OAAO,CAACA,OAAO,CAACC,MAAM,EAC3BnB,IAAI,CAACkB,OAAO,CAACA,OAAO,CAACE,oBAAoB,EACzCnB,iBAAiB,EAChBD,IAAI,CAACkB,OAAO,CAACG,WAAW,CAASC,GAAG,CAACC,KACxC,CAAC;MAED,IAAIvB,IAAI,CAACK,OAAO,CAACC,YAAY,KAAKL,iBAAiB,EAAE;QACnDD,IAAI,CAACK,OAAO,CAACG,UAAU,CAACC,MAAM,GAAGK,SAAS;QAC1CZ,MAAM,CAACC,SAAS,GAAG,IAAI;MACzB;IACF,CAAC,MAAM,IAAIH,IAAI,CAACK,OAAO,IAAIL,IAAI,CAACK,OAAO,CAACE,wBAAwB,EAAE;MAChEP,IAAI,CAACK,OAAO,CAACG,UAAU,CAACC,MAAM,CAACC,KAAK,GAAGV,IAAI,CAACK,OAAO,CAACE,wBAAwB,CAACG,KAAK;MAClFV,IAAI,CAACK,OAAO,CAACC,YAAY,GAAG,IAAI;MAChCJ,MAAM,CAACC,SAAS,GAAG,IAAI;IACzB;EACF;EACA,OAAOD,MAAM;AACf,CAAC"}