{"version":3,"file":"data-driven-tile-3d-layer.js","names":["Tile3DLayer","TILE_TYPE","Tileset3D","load","defaultProps","colorsByAttribute","filtersByAttribute","DataDrivenTile3DLayer","constructor","arguments","state","initializeState","setState","props","loadingCounter","updateState","params","oldProps","changeFlags","data","_loadTileset","_colorizeTileset","_filterTileset","viewportChanged","activeViewports","viewportsNumber","Object","keys","length","_updateTileset","lastUpdatedViewports","tilesetUrl","loadOptions","loader","loaders","Array","isArray","options","preload","preloadOptions","headers","fetch","assign","tilesetJson","tileset3d","onTileLoad","_onTileLoad","bind","onTileUnload","_onTileUnload","onTileError","onTraversalComplete","_onTraversalComplete","layerMap","onTilesetLoad","tileHeader","_colorizeTiles","_filterTiles","setNeedsUpdate","selectedTiles","tiles","_tiles$","customizeColors","type","MESH","promises","tile","push","Promise","allSettled","then","result","isTileChanged","item","status","value","isColored","id","_tiles$2","filterTile","isFiltered","layerName"],"sources":["../../src/data-driven-tile-3d-layer/data-driven-tile-3d-layer.ts"],"sourcesContent":["// deck.gl-community\n// SPDX-License-Identifier: MIT\n// Copyright (c) vis.gl contributors\n\nimport {Tile3DLayer, Tile3DLayerProps} from '@deck.gl/geo-layers';\nimport {UpdateParameters, Viewport, DefaultProps} from '@deck.gl/core';\nimport {TILE_TYPE, Tile3D, Tileset3D} from '@loaders.gl/tiles';\nimport {load} from '@loaders.gl/core';\n\nconst defaultProps: DefaultProps<DataDrivenTile3DLayerProps> = {\n  colorsByAttribute: null,\n  filtersByAttribute: null\n};\n\ntype DataDrivenTile3DLayerProps<DataT = any> = _DataDrivenTile3DLayerProps &\n  Tile3DLayerProps<DataT>;\n\ntype _DataDrivenTile3DLayerProps = {\n  onTraversalComplete?: (selectedTiles: Tile3D[]) => Tile3D[];\n  colorsByAttribute?: ColorsByAttribute | null;\n  customizeColors?: (\n    tile: Tile3D,\n    colorsByAttribute: ColorsByAttribute | null\n  ) => Promise<{isColored: boolean; id: string}>;\n  filtersByAttribute?: FiltersByAttribute | null;\n  filterTile?: (\n    tile: Tile3D,\n    filtersByAttribute: FiltersByAttribute | null\n  ) => Promise<{isFiltered: boolean; id: string}>;\n};\n\nexport type ColorsByAttribute = {\n  /** Feature attribute name */\n  attributeName: string;\n  /** Minimum attribute value */\n  minValue: number;\n  /** Maximum attribute value */\n  maxValue: number;\n  /** Minimum color. 3DObject will be colorized with gradient from `minColor to `maxColor` */\n  minColor: [number, number, number, number];\n  /** Maximum color. 3DObject will be colorized with gradient from `minColor to `maxColor` */\n  maxColor: [number, number, number, number];\n  /** Colorization mode. `replace` - replace vertex colors with a new colors, `multiply` - multiply vertex colors with new colors */\n  mode: string;\n};\n\nexport type FiltersByAttribute = {\n  /** Feature attribute name */\n  attributeName: string;\n  /** Filter value */\n  value: number;\n};\n\n//@ts-expect-error call of private method of the base class\nexport class DataDrivenTile3DLayer<DataT = any, ExtraProps extends {} = {}> extends Tile3DLayer<\n  DataT,\n  Required<_DataDrivenTile3DLayerProps> & ExtraProps\n> {\n  static layerName = 'DataDrivenTile3DLayer';\n  static defaultProps = defaultProps as any;\n\n  state!: {\n    activeViewports: any;\n    frameNumber?: number;\n    lastUpdatedViewports: {[viewportId: string]: Viewport} | null;\n    layerMap: {[layerId: string]: any};\n    tileset3d: Tileset3D | null;\n\n    colorsByAttribute: ColorsByAttribute | null;\n    filtersByAttribute: FiltersByAttribute | null;\n    loadingCounter: number;\n  };\n\n  initializeState() {\n    super.initializeState();\n\n    this.setState({\n      colorsByAttribute: this.props.colorsByAttribute,\n      filtersByAttribute: this.props.filtersByAttribute,\n      loadingCounter: 0\n    });\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    const {props, oldProps, changeFlags} = params;\n\n    if (props.data && props.data !== oldProps.data) {\n      this._loadTileset(props.data);\n    } else if (props.colorsByAttribute !== oldProps.colorsByAttribute) {\n      this.setState({\n        colorsByAttribute: props.colorsByAttribute\n      });\n      this._colorizeTileset();\n    } else if (props.filtersByAttribute !== oldProps.filtersByAttribute) {\n      this.setState({\n        filtersByAttribute: props.filtersByAttribute\n      });\n      this._filterTileset();\n    } else if (changeFlags.viewportChanged) {\n      const {activeViewports} = this.state;\n      const viewportsNumber = Object.keys(activeViewports).length;\n      if (viewportsNumber) {\n        if (!this.state.loadingCounter) {\n          //@ts-expect-error call of private method of the base class\n          super._updateTileset(activeViewports);\n        }\n        this.state.lastUpdatedViewports = activeViewports;\n        this.state.activeViewports = {};\n      }\n    } else {\n      super.updateState(params);\n    }\n  }\n\n  private override async _loadTileset(tilesetUrl) {\n    const {loadOptions = {}} = this.props;\n\n    // TODO: deprecate `loader` in v9.0\n    let loader = this.props.loader || this.props.loaders;\n    if (Array.isArray(loader)) {\n      loader = loader[0];\n    }\n\n    const options = {loadOptions: {...loadOptions}};\n    if (loader.preload) {\n      const preloadOptions = await loader.preload(tilesetUrl, loadOptions);\n\n      if (preloadOptions.headers) {\n        options.loadOptions.fetch = {\n          ...options.loadOptions.fetch,\n          headers: preloadOptions.headers\n        };\n      }\n      Object.assign(options, preloadOptions);\n    }\n    //@ts-expect-error loader\n    const tilesetJson = await load(tilesetUrl, loader, options.loadOptions);\n\n    const tileset3d = new Tileset3D(tilesetJson, {\n      onTileLoad: this._onTileLoad.bind(this),\n      //@ts-expect-error call of private method of the base class\n      onTileUnload: super._onTileUnload.bind(this),\n      onTileError: this.props.onTileError,\n      // New code ------------------\n      onTraversalComplete: this._onTraversalComplete.bind(this),\n      // ---------------------------\n      ...options\n    });\n\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    //@ts-expect-error call of private method of the base class\n    super._updateTileset(this.state.activeViewports);\n    this.props.onTilesetLoad(tileset3d);\n  }\n\n  private override _onTileLoad(tileHeader: Tile3D): void {\n    const {lastUpdatedViewports} = this.state;\n    // New code ------------------\n    this._colorizeTiles([tileHeader]);\n    this._filterTiles([tileHeader]);\n    // ---------------------------\n    this.props.onTileLoad(tileHeader);\n    // New code ------------------ condition is added\n    if (!this.state.colorsByAttribute && !this.state.filtersByAttribute) {\n      // ---------------------------\n      //@ts-expect-error call of private method of the base class\n      super._updateTileset(lastUpdatedViewports);\n      this.setNeedsUpdate();\n      // New code ------------------\n    }\n    // ------------------\n  }\n\n  private _onTraversalComplete(selectedTiles: Tile3D[]): Tile3D[] {\n    this._colorizeTiles(selectedTiles);\n    this._filterTiles(selectedTiles);\n    return this.props.onTraversalComplete\n      ? this.props.onTraversalComplete(selectedTiles)\n      : selectedTiles;\n  }\n\n  private _colorizeTiles(tiles: Tile3D[]): void {\n    if (this.props.customizeColors && tiles[0]?.type === TILE_TYPE.MESH) {\n      const {layerMap, colorsByAttribute} = this.state;\n      const promises: Promise<{isColored: boolean; id: string}>[] = [];\n      for (const tile of tiles) {\n        promises.push(this.props.customizeColors(tile, colorsByAttribute));\n      }\n      this.setState({\n        loadingCounter: this.state.loadingCounter + 1\n      });\n      Promise.allSettled(promises).then((result) => {\n        this.setState({\n          loadingCounter: this.state.loadingCounter - 1\n        });\n        let isTileChanged = false;\n        for (const item of result) {\n          if (item.status === 'fulfilled' && item.value.isColored) {\n            isTileChanged = true;\n            delete layerMap[item.value.id];\n          }\n        }\n        if (isTileChanged && !this.state.loadingCounter) {\n          //@ts-expect-error call of private method of the base class\n          super._updateTileset(this.state.activeViewports);\n          this.setNeedsUpdate();\n        }\n      });\n    }\n  }\n\n  private _colorizeTileset(): void {\n    const {tileset3d} = this.state;\n\n    if (tileset3d) {\n      this._colorizeTiles(tileset3d.selectedTiles);\n    }\n  }\n\n  private _filterTiles(tiles: Tile3D[]): void {\n    if (this.props.filterTile && tiles[0]?.type === TILE_TYPE.MESH) {\n      const {layerMap, filtersByAttribute} = this.state;\n      const promises: Promise<{isFiltered: boolean; id: string}>[] = [];\n      for (const tile of tiles) {\n        promises.push(this.props.filterTile(tile, filtersByAttribute));\n      }\n      this.setState({\n        loadingCounter: this.state.loadingCounter + 1\n      });\n      Promise.allSettled(promises).then((result) => {\n        this.setState({\n          loadingCounter: this.state.loadingCounter - 1\n        });\n        let isTileChanged = false;\n        for (const item of result) {\n          if (item.status === 'fulfilled' && item.value.isFiltered) {\n            isTileChanged = true;\n            delete layerMap[item.value.id];\n          }\n        }\n        if (isTileChanged && !this.state.loadingCounter) {\n          //@ts-expect-error call of private method of the base class\n          super._updateTileset(this.state.activeViewports);\n          this.setNeedsUpdate();\n        }\n      });\n    }\n  }\n\n  private _filterTileset(): void {\n    const {tileset3d} = this.state;\n\n    if (tileset3d) {\n      this._filterTiles(tileset3d.selectedTiles);\n    }\n  }\n}\n"],"mappings":"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"}