{"version":3,"file":"project.js","names":["Matrix4","glsl","IDENTITY_MATRIX","DEFAULT_MODULE_OPTIONS","viewMatrix","projectionMatrix","viewProjectionMatrix","cameraPositionWorld","getUniforms","opts","arguments","length","undefined","prevUniforms","uniforms","multiplyRight","vs","fs","projection","name","uniformTypes"],"sources":["../../../../src/modules/engine/project/project.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {NumericArray as NumberArray, Matrix4, Vector3} from '@math.gl/core';\nimport {ShaderModule} from '../../../lib/shader-module/shader-module';\nimport {glsl} from '../../../lib/glsl-utils/highlight';\n\nconst IDENTITY_MATRIX: Readonly<NumberArray> = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n/**\n * @note Projection uniforms are normally constant across draw calls,\n * at least for each view.\n */\nexport type ProjectionProps = {\n  viewMatrix?: Readonly<Matrix4 | NumberArray>;\n  projectionMatrix?: Readonly<Matrix4 | NumberArray>;\n  cameraPositionWorld?: Readonly<Vector3 | NumberArray>;\n};\n\n/**\n * @note Projection uniforms are normally constant across draw calls,\n * at least for each view.\n */\nexport type ProjectionUniforms = {\n  viewMatrix?: Readonly<Matrix4 | NumberArray>;\n  projectionMatrix?: Readonly<Matrix4 | NumberArray>;\n  viewProjectionMatrix?: Readonly<Matrix4 | NumberArray>;\n  cameraPositionWorld?: Readonly<Vector3 | NumberArray>;\n};\n\nconst DEFAULT_MODULE_OPTIONS: Required<ProjectionUniforms> = {\n  viewMatrix: IDENTITY_MATRIX,\n  projectionMatrix: IDENTITY_MATRIX,\n  viewProjectionMatrix: IDENTITY_MATRIX,\n  cameraPositionWorld: [0, 0, 0]\n};\n\nfunction getUniforms(opts: ProjectionProps = DEFAULT_MODULE_OPTIONS, prevUniforms: ProjectionUniforms = {}): ProjectionUniforms {\n  // const viewProjectionInverse = viewProjection.invert();\n  // viewInverseMatrix: view.invert(),\n  // viewProjectionInverseMatrix: viewProjectionInverse\n\n  const uniforms: Record<string, any> = {};\n  if (opts.viewMatrix !== undefined) {\n    uniforms.viewMatrix = opts.viewMatrix;\n  }\n  if (opts.projectionMatrix !== undefined) {\n    uniforms.projectionMatrix = opts.projectionMatrix;\n  }\n  if (opts.cameraPositionWorld !== undefined) {\n    uniforms.cameraPositionWorld = opts.cameraPositionWorld;\n  }\n  // COMPOSITE UNIFORMS\n  if (opts.projectionMatrix !== undefined || opts.viewMatrix !== undefined) {\n    uniforms.viewProjectionMatrix = new Matrix4(uniforms.projectionMatrix).multiplyRight(\n      uniforms.viewMatrix\n    );\n  }\n\n  return uniforms;\n}\n\n/**\n * Projection uniforms are normally constant across draw calls,\n * at least for each view.\n * @note varyings must match vertex shader\n * @note project module uses unprefixed uniforms to match conventions\n */\nconst vs = glsl`\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\n// Project uniform block\nuniform Project {\n  mat4 viewMatrix;\n  mat4 projectionMatrix;\n  mat4 viewProjectionMatrix;\n  vec3 cameraPositionWorld;\n} project;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal, mat4 modelMatrix) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return project.viewProjectionMatrix * position;\n}\n\nvec4 project_model_to_clipspace_Model(vec3 position, mat4 modelMatrix) {\n  return project.viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return project.viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return project.projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return project.viewProjectionMatrix * vec4(position, 1.);\n}\n`;\n\n/**\n * Functions to get the position and normal from the vertex shader\n * @note varyings must match vertex shader\n */\nconst fs = glsl`\\\nvarying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n`;\n\n/**\n * Projects coordinates\n */\nexport const projection: ShaderModule<ProjectionProps, ProjectionUniforms> = {\n  name: 'projection',\n  // Note: order and types MUST match declarations in shader\n  uniformTypes: {\n    viewMatrix: 'mat4x4<f32>',\n    projectionMatrix: 'mat4x4<f32>',\n    viewProjectionMatrix: 'mat4x4<f32>',\n    cameraPositionWorld: 'vec3<f32>'\n  },\n  getUniforms,\n  vs,\n  fs\n};\n"],"mappings":"AAGA,SAAqCA,OAAO,QAAgB,eAAe;AAAC,SAEpEC,IAAI;AAEZ,MAAMC,eAAsC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAuB/F,MAAMC,sBAAoD,GAAG;EAC3DC,UAAU,EAAEF,eAAe;EAC3BG,gBAAgB,EAAEH,eAAe;EACjCI,oBAAoB,EAAEJ,eAAe;EACrCK,mBAAmB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;AAC/B,CAAC;AAED,SAASC,WAAWA,CAAA,EAA4G;EAAA,IAA3GC,IAAqB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,sBAAsB;EAAA,IAAEU,YAAgC,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAKxG,MAAMI,QAA6B,GAAG,CAAC,CAAC;EACxC,IAAIL,IAAI,CAACL,UAAU,KAAKQ,SAAS,EAAE;IACjCE,QAAQ,CAACV,UAAU,GAAGK,IAAI,CAACL,UAAU;EACvC;EACA,IAAIK,IAAI,CAACJ,gBAAgB,KAAKO,SAAS,EAAE;IACvCE,QAAQ,CAACT,gBAAgB,GAAGI,IAAI,CAACJ,gBAAgB;EACnD;EACA,IAAII,IAAI,CAACF,mBAAmB,KAAKK,SAAS,EAAE;IAC1CE,QAAQ,CAACP,mBAAmB,GAAGE,IAAI,CAACF,mBAAmB;EACzD;EAEA,IAAIE,IAAI,CAACJ,gBAAgB,KAAKO,SAAS,IAAIH,IAAI,CAACL,UAAU,KAAKQ,SAAS,EAAE;IACxEE,QAAQ,CAACR,oBAAoB,GAAG,IAAIN,OAAO,CAACc,QAAQ,CAACT,gBAAgB,CAAC,CAACU,aAAa,CAClFD,QAAQ,CAACV,UACX,CAAC;EACH;EAEA,OAAOU,QAAQ;AACjB;AAQA,MAAME,EAAE,GAAGf,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAMD,MAAMgB,EAAE,GAAGhB,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAKD,OAAO,MAAMiB,UAA6D,GAAG;EAC3EC,IAAI,EAAE,YAAY;EAElBC,YAAY,EAAE;IACZhB,UAAU,EAAE,aAAa;IACzBC,gBAAgB,EAAE,aAAa;IAC/BC,oBAAoB,EAAE,aAAa;IACnCC,mBAAmB,EAAE;EACvB,CAAC;EACDC,WAAW;EACXQ,EAAE;EACFC;AACF,CAAC"}