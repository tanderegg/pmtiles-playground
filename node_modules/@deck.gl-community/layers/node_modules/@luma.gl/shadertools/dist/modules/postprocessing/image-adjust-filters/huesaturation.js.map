{"version":3,"file":"huesaturation.js","names":["glsl","fs","hueSaturation","name","uniformTypes","hue","saturation","uniformPropTypes","value","min","max","passes","filter"],"sources":["../../../../src/modules/postprocessing/image-adjust-filters/huesaturation.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {ShaderPass} from '../../../lib/shader-module/shader-pass';\nimport {glsl} from '../../../lib/glsl-utils/highlight';\n\nconst fs = glsl`\\\nuniform hueSaturationUniforms {\n  float hue;\n  float saturation;\n} hueSaturation;\n\nvec4 hueSaturation_filterColor(vec4 color) {\n  // hue adjustment, wolfram alpha: RotationTransform[angle, {1, 1, 1}][{x, y, z}]\n  float angle = hueSaturation.hue * 3.14159265;\n  float s = sin(angle), c = cos(angle);\n  vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\n  float len = length(color.rgb);\n  color.rgb = vec3(\n    dot(color.rgb, weights.xyz),\n    dot(color.rgb, weights.zxy),\n    dot(color.rgb, weights.yzx)\n  );\n\n  // saturation adjustment\n  float average = (color.r + color.g + color.b) / 3.0;\n  if (hueSaturation.saturation > 0.0) {\n    color.rgb += (average - color.rgb) * (1.0 - 1.0 / (1.001 - hueSaturation.saturation));\n  } else {\n    color.rgb += (average - color.rgb) * (-hueSaturation.saturation);\n  }\n\n  return color;\n}\n\nvec4 hueSaturation_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {\n  return hueSaturation_filterColor(color);\n}\n`;\n\n/**\n * Hue / Saturation\n */\nexport type HueSaturationProps = {\n  /** -1 to 1 (-1 is 180 degree rotation in the negative direction, 0 is no change,\n   * and 1 is 180 degree rotation in the positive direction) */\n   hue?: number;\n   /** @param saturation -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast) */\n   saturation?: number;\n};\n\n/**\n * Hue / Saturation\n * Provides rotational hue and multiplicative saturation control. RGB color space\n * can be imagined as a cube where the axes are the red, green, and blue color\n * values. Hue changing works by rotating the color vector around the grayscale\n * line, which is the straight line from black (0, 0, 0) to white (1, 1, 1).\n * Saturation is implemented by scaling all color channel values either toward\n * or away from the average color channel value.\n */\nexport const hueSaturation: ShaderPass<HueSaturationProps> = {\n  name: 'hueSaturation',\n  uniformTypes: {\n    hue: 'f32',\n    saturation: 'f32'\n  },\n  uniformPropTypes: {\n    hue: {value: 0, min: -1, max: 1},\n    saturation: {value: 0, min: -1, max: 1}\n  },\n  fs,\n  passes: [{filter: true}]\n};\n"],"mappings":"SAIQA,IAAI;AAEZ,MAAMC,EAAE,GAAGD,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAsBD,OAAO,MAAME,aAA6C,GAAG;EAC3DC,IAAI,EAAE,eAAe;EACrBC,YAAY,EAAE;IACZC,GAAG,EAAE,KAAK;IACVC,UAAU,EAAE;EACd,CAAC;EACDC,gBAAgB,EAAE;IAChBF,GAAG,EAAE;MAACG,KAAK,EAAE,CAAC;MAAEC,GAAG,EAAE,CAAC,CAAC;MAAEC,GAAG,EAAE;IAAC,CAAC;IAChCJ,UAAU,EAAE;MAACE,KAAK,EAAE,CAAC;MAAEC,GAAG,EAAE,CAAC,CAAC;MAAEC,GAAG,EAAE;IAAC;EACxC,CAAC;EACDT,EAAE;EACFU,MAAM,EAAE,CAAC;IAACC,MAAM,EAAE;EAAI,CAAC;AACzB,CAAC"}