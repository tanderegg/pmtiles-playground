{"version":3,"file":"colorhalftone.js","names":["glsl","fs","colorHalftone","name","uniformTypes","center","angle","size","uniformPropTypes","value","softMin","softMax","Math","PI","min","passes","filter"],"sources":["../../../../src/modules/postprocessing/image-fun-filters/colorhalftone.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {ShaderPass} from '../../../lib/shader-module/shader-pass';\nimport {glsl} from '../../../lib/glsl-utils/highlight';\n\n// TODO pass texCoord to angle\nconst fs = glsl`\\\nuniform colorHalftoneUniforms {\n  vec2 center;\n  float angle;\n  float size;\n} colorHalftone;\n\nfloat pattern(float angle, float scale, vec2 texSize, vec2 texCoord) {\n  float s = sin(angle), c = cos(angle);\n  vec2 tex = texCoord * texSize - colorHalftone.center * texSize;\n  vec2 point = vec2(\n\tc * tex.x - s * tex.y,\n\ts * tex.x + c * tex.y\n  ) * scale;\n  return (sin(point.x) * sin(point.y)) * 4.0;\n}\n\nvec4 colorHalftone_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {\n  float scale = 3.1514 / colorHalftone.size;\n  vec3 cmy = 1.0 - color.rgb;\n  float k = min(cmy.x, min(cmy.y, cmy.z));\n\n  cmy = (cmy - k) / (1.0 - k);\n  cmy = clamp(\n\t  cmy * 10.0 - 3.0 + vec3(\n      pattern(colorHalftone.angle + 0.26179, scale, texSize, texCoord),\n\t    pattern(colorHalftone.angle + 1.30899, scale, texSize, texCoord),\n      pattern(colorHalftone.angle, scale, texSize, texCoord)\n    ),\n\t  0.0,\n\t  1.0\n  );\n  k = clamp(k * 10.0 - 5.0 + pattern(colorHalftone.angle + 0.78539, scale, texSize, texCoord), 0.0, 1.0);\n  return vec4(1.0 - cmy - k, color.a);\n}\n`;\n\n/**\n * Color Halftone -\n * Simulates a CMYK halftone rendering of the image by multiplying pixel values\n * with a four rotated 2D sine wave patterns, one each for cyan, magenta, yellow,\n * and black.\n */\nexport type ColorHalftoneProps = {\n  /** The x,y coordinate of the pattern origin. */\n  center?: number[];\n  /** The rotation of the pattern in radians. */\n  angle?: number;\n  /** The diameter of a dot in pixels. */\n  size?: number;\n};\n\n/**\n * Color Halftone -\n * Simulates a CMYK halftone rendering of the image by multiplying pixel values\n * with a four rotated 2D sine wave patterns, one each for cyan, magenta, yellow,\n * and black.\n */\nexport const colorHalftone: ShaderPass<ColorHalftoneProps, ColorHalftoneProps> = {\n  name: 'colorHalftone',\n  uniformTypes: {\n    center: 'vec2<f32>',\n    angle: 'f32',\n    size: 'f32'\n  },\n  uniformPropTypes: {\n    center: {value: [0.5, 0.5]},\n    angle: {value: 1.1, softMin: 0, softMax: Math.PI / 2},\n    size: {value: 4, min: 1, softMin: 3, softMax: 20}\n  },\n  fs,\n  passes: [{filter: true}]\n};\n"],"mappings":"SAIQA,IAAI;AAGZ,MAAMC,EAAE,GAAGD,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAuBD,OAAO,MAAME,aAAiE,GAAG;EAC/EC,IAAI,EAAE,eAAe;EACrBC,YAAY,EAAE;IACZC,MAAM,EAAE,WAAW;IACnBC,KAAK,EAAE,KAAK;IACZC,IAAI,EAAE;EACR,CAAC;EACDC,gBAAgB,EAAE;IAChBH,MAAM,EAAE;MAACI,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG;IAAC,CAAC;IAC3BH,KAAK,EAAE;MAACG,KAAK,EAAE,GAAG;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAEC,IAAI,CAACC,EAAE,GAAG;IAAC,CAAC;IACrDN,IAAI,EAAE;MAACE,KAAK,EAAE,CAAC;MAAEK,GAAG,EAAE,CAAC;MAAEJ,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAE;EAClD,CAAC;EACDV,EAAE;EACFc,MAAM,EAAE,CAAC;IAACC,MAAM,EAAE;EAAI,CAAC;AACzB,CAAC"}