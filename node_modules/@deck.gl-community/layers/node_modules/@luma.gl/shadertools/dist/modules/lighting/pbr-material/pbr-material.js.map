{"version":3,"file":"pbr-material.js","names":["lighting","vs","fs","pbrMaterial","name","defines","LIGHTING_FRAGMENT","HAS_NORMALMAP","HAS_EMISSIVEMAP","HAS_OCCLUSIONMAP","HAS_BASECOLORMAP","HAS_METALROUGHNESSMAP","ALPHA_CUTOFF","USE_IBL","PBR_DEBUG","uniformTypes","unlit","baseColorMapEnabled","baseColorFactor","normalMapEnabled","normalScale","emissiveMapEnabled","emissiveFactor","metallicRoughnessValues","metallicRoughnessMapEnabled","occlusionMapEnabled","occlusionStrength","alphaCutoffEnabled","alphaCutoff","IBLenabled","scaleIBLAmbient","scaleDiffBaseMR","scaleFGDSpec","bindings","baseColorSampler","type","location","normalSampler","emissiveSampler","metallicRoughnessSampler","occlusionSampler","diffuseEnvSampler","specularEnvSampler","brdfLUT","dependencies"],"sources":["../../../../src/modules/lighting/pbr-material/pbr-material.ts"],"sourcesContent":["// luma.gl, MIT license\n/* eslint-disable camelcase */\n\nimport type {NumberArray, Texture} from '@luma.gl/core';\nimport type {Vector2, Vector3, Vector4} from '@math.gl/core';\n\nimport {ShaderModule} from '../../../lib/shader-module/shader-module';\nimport {lighting} from '../lights/lighting-uniforms';\n\nimport {vs} from './pbr-vertex.glsl';\nimport {fs} from './pbr-fragment.glsl';\n\n\nexport type PBRMaterialProps = PBRMaterialBindings & {\n  unlit: boolean;\n\n  // Base color map\n  baseColorMapEnabled: boolean;\n  baseColorFactor: Readonly<Vector4 | NumberArray>;\n\n  normalMapEnabled: boolean;  \n  normalScale: number; // #ifdef HAS_NORMALMAP\n\n  emissiveMapEnabled: boolean;\n  emissiveFactor: Readonly<Vector3 | NumberArray>; // #ifdef HAS_EMISSIVEMAP\n\n  metallicRoughnessValues: Readonly<Vector2 | NumberArray>;\n  metallicRoughnessMapEnabled: boolean;\n\n  occlusionMapEnabled: boolean;\n  occlusionStrength: number; // #ifdef HAS_OCCLUSIONMAP\n\n  alphaCutoffEnabled: boolean;\n  alphaCutoff: number; // #ifdef ALPHA_CUTOFF\n\n  // IBL\n  IBLenabled: boolean;\n  scaleIBLAmbient: Readonly<Vector2 | NumberArray>; // #ifdef USE_IBL\n\n  // debugging flags used for shader output of intermediate PBR variables\n  // #ifdef PBR_DEBUG\n  scaleDiffBaseMR: Readonly<Vector4 | NumberArray>;\n  scaleFGDSpec: Readonly<Vector4 | NumberArray>;\n};\n\n/** Non-uniform block bindings for pbr module */\ntype PBRMaterialBindings = {\n  // Samplers\n  baseColorSampler?: Texture | null; // #ifdef HAS_BASECOLORMAP\n  normalSampler?: Texture | null; // #ifdef HAS_NORMALMAP\n  emissiveSampler?: Texture | null; // #ifdef HAS_EMISSIVEMAP\n  metallicRoughnessSampler?: Texture | null; // #ifdef HAS_METALROUGHNESSMAP\n  occlusionSampler?: Texture | null; // #ifdef HAS_OCCLUSIONMAP\n\n  // IBL Samplers\n  diffuseEnvSampler: Texture | null; // #ifdef USE_IBL (samplerCube)\n  specularEnvSampler: Texture | null; // #ifdef USE_IBL (samplerCube)\n  brdfLUT?: Texture | null; // #ifdef USE_IBL\n}\n\nexport type PBRMaterialUniforms = {\n  unlit: boolean;\n\n  // Base color map\n  baseColorMapEnabled: boolean;\n  baseColorFactor: Readonly<Vector4 | NumberArray>;\n\n  normalMapEnabled: boolean;  \n  normalScale: number; // #ifdef HAS_NORMALMAP\n\n  emissiveMapEnabled: boolean;\n  emissiveFactor: Readonly<Vector3 | NumberArray>; // #ifdef HAS_EMISSIVEMAP\n\n  metallicRoughnessValues: Readonly<Vector2 | NumberArray>;\n  metallicRoughnessMapEnabled: boolean;\n\n  occlusionMapEnabled: boolean;\n  occlusionStrength: number; // #ifdef HAS_OCCLUSIONMAP\n\n  alphaCutoffEnabled: boolean;\n  alphaCutoff: number; // #ifdef ALPHA_CUTOFF\n\n  // IBL\n  IBLenabled: boolean;\n  scaleIBLAmbient: Readonly<Vector2 | NumberArray>; // #ifdef USE_IBL\n\n  // debugging flags used for shader output of intermediate PBR variables\n  // #ifdef PBR_DEBUG\n  scaleDiffBaseMR: Readonly<Vector4 | NumberArray>;\n  scaleFGDSpec: Readonly<Vector4 | NumberArray>;\n}\n\n/**\n * An implementation of PBR (Physically-Based Rendering).\n * Physically Based Shading of a microfacet surface defined by a glTF material.\n */\nexport const pbrMaterial: ShaderModule<PBRMaterialProps, PBRMaterialUniforms> = {\n  name: 'pbr',\n  vs,\n  fs,\n  defines: {\n    LIGHTING_FRAGMENT: 1,\n    HAS_NORMALMAP: 0,\n    HAS_EMISSIVEMAP: 0,\n    HAS_OCCLUSIONMAP: 0,\n    HAS_BASECOLORMAP: 0,\n    HAS_METALROUGHNESSMAP: 0,\n    ALPHA_CUTOFF: 0,\n    USE_IBL: 0,\n    PBR_DEBUG: 0\n  },\n  uniformTypes: {\n    // Material is unlit\n    unlit: 'i32',\n\n    // Base color map\n    baseColorMapEnabled: 'i32',\n    baseColorFactor: 'vec4<f32>',\n\n    normalMapEnabled: 'i32',  \n    normalScale: 'f32', // #ifdef HAS_NORMALMAP\n\n    emissiveMapEnabled: 'i32',\n    emissiveFactor: 'vec3<f32>', // #ifdef HAS_EMISSIVEMAP\n\n    metallicRoughnessValues: 'vec2<f32>',\n    metallicRoughnessMapEnabled: 'i32',\n\n    occlusionMapEnabled: 'i32',\n    occlusionStrength: 'f32', // #ifdef HAS_OCCLUSIONMAP\n    \n    alphaCutoffEnabled: 'i32',\n    alphaCutoff: 'f32', // #ifdef ALPHA_CUTOFF\n    \n    // IBL\n    IBLenabled: 'i32',\n    scaleIBLAmbient: 'vec2<f32>', // #ifdef USE_IBL\n    \n    // debugging flags used for shader output of intermediate PBR variables\n    // #ifdef PBR_DEBUG\n    scaleDiffBaseMR: 'vec4<f32>',\n    scaleFGDSpec: 'vec4<f32>',\n  },\n  bindings: {\n    baseColorSampler: {type: 'texture', location: 8}, // #ifdef HAS_BASECOLORMAP\n    normalSampler: {type: 'texture', location: 9}, // #ifdef HAS_NORMALMAP\n    emissiveSampler: {type: 'texture', location: 10}, // #ifdef HAS_EMISSIVEMAP\n    metallicRoughnessSampler: {type: 'texture', location: 11}, // #ifdef HAS_METALROUGHNESSMAP\n    occlusionSampler: {type: 'texture', location: 12}, // #ifdef HAS_OCCLUSIONMAP  \n    // IBL Samplers\n    diffuseEnvSampler: {type: 'texture', location: 13}, // #ifdef USE_IBL (samplerCube)\n    specularEnvSampler: {type: 'texture', location: 14 }, // #ifdef USE_IBL (samplerCube)\n    brdfLUT: {type: 'texture', location: 15}, // #ifdef USE_IBL\n  },\n  dependencies: [lighting]\n};\n"],"mappings":"SAOQA,QAAQ;AAAA,SAERC,EAAE;AAAA,SACFC,EAAE;AAsFV,OAAO,MAAMC,WAAgE,GAAG;EAC9EC,IAAI,EAAE,KAAK;EACXH,EAAE;EACFC,EAAE;EACFG,OAAO,EAAE;IACPC,iBAAiB,EAAE,CAAC;IACpBC,aAAa,EAAE,CAAC;IAChBC,eAAe,EAAE,CAAC;IAClBC,gBAAgB,EAAE,CAAC;IACnBC,gBAAgB,EAAE,CAAC;IACnBC,qBAAqB,EAAE,CAAC;IACxBC,YAAY,EAAE,CAAC;IACfC,OAAO,EAAE,CAAC;IACVC,SAAS,EAAE;EACb,CAAC;EACDC,YAAY,EAAE;IAEZC,KAAK,EAAE,KAAK;IAGZC,mBAAmB,EAAE,KAAK;IAC1BC,eAAe,EAAE,WAAW;IAE5BC,gBAAgB,EAAE,KAAK;IACvBC,WAAW,EAAE,KAAK;IAElBC,kBAAkB,EAAE,KAAK;IACzBC,cAAc,EAAE,WAAW;IAE3BC,uBAAuB,EAAE,WAAW;IACpCC,2BAA2B,EAAE,KAAK;IAElCC,mBAAmB,EAAE,KAAK;IAC1BC,iBAAiB,EAAE,KAAK;IAExBC,kBAAkB,EAAE,KAAK;IACzBC,WAAW,EAAE,KAAK;IAGlBC,UAAU,EAAE,KAAK;IACjBC,eAAe,EAAE,WAAW;IAI5BC,eAAe,EAAE,WAAW;IAC5BC,YAAY,EAAE;EAChB,CAAC;EACDC,QAAQ,EAAE;IACRC,gBAAgB,EAAE;MAACC,IAAI,EAAE,SAAS;MAAEC,QAAQ,EAAE;IAAC,CAAC;IAChDC,aAAa,EAAE;MAACF,IAAI,EAAE,SAAS;MAAEC,QAAQ,EAAE;IAAC,CAAC;IAC7CE,eAAe,EAAE;MAACH,IAAI,EAAE,SAAS;MAAEC,QAAQ,EAAE;IAAE,CAAC;IAChDG,wBAAwB,EAAE;MAACJ,IAAI,EAAE,SAAS;MAAEC,QAAQ,EAAE;IAAE,CAAC;IACzDI,gBAAgB,EAAE;MAACL,IAAI,EAAE,SAAS;MAAEC,QAAQ,EAAE;IAAE,CAAC;IAEjDK,iBAAiB,EAAE;MAACN,IAAI,EAAE,SAAS;MAAEC,QAAQ,EAAE;IAAE,CAAC;IAClDM,kBAAkB,EAAE;MAACP,IAAI,EAAE,SAAS;MAAEC,QAAQ,EAAE;IAAG,CAAC;IACpDO,OAAO,EAAE;MAACR,IAAI,EAAE,SAAS;MAAEC,QAAQ,EAAE;IAAE;EACzC,CAAC;EACDQ,YAAY,EAAE,CAAC5C,QAAQ;AACzB,CAAC"}