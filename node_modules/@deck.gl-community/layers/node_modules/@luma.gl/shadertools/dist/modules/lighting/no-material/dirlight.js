import { glsl } from "../../../lib/glsl-utils/highlight.js";
export const VS_WGSL = `\  
void dirlight_setNormal(normal: vec3<f32>) {
  dirlight_vNormal = normalize(normal);
}
`;
export const FS_WGSL = `\
uniform dirlightUniforms {
  vec3 lightDirection;
} dirlight;

// Returns color attenuated by angle from light source
fn dirlight_filterColor(color: vec4<f32>, dirlightInputs): vec4<f32> {
  const d: float = abs(dot(dirlight_vNormal, normalize(dirlight.lightDirection)));
  return vec4<f32>(color.rgb * d, color.a);
}
`;
const VS_GLSL = glsl`\
out vec3 dirlight_vNormal;

void dirlight_setNormal(vec3 normal) {
  dirlight_vNormal = normalize(normal);
}
`;
const FS_GLSL = glsl`\
uniform dirlightUniforms {
  vec3 lightDirection;
} dirlight;

in vec3 dirlight_vNormal;

// Returns color attenuated by angle from light source
vec4 dirlight_filterColor(vec4 color) {
  float d = abs(dot(dirlight_vNormal, normalize(dirlight.lightDirection)));
  return vec4(color.rgb * d, color.a);
}
`;
export const dirlight = {
  name: 'dirlight',
  dependencies: [],
  vs: VS_GLSL,
  fs: FS_GLSL,
  uniformTypes: {
    lightDirection: 'vec3<f32>'
  },
  defaultUniforms: {
    lightDirection: new Float32Array([1, 1, 2])
  },
  getUniforms
};
function getUniforms() {
  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : dirlight.defaultUniforms;
  const uniforms = {};
  if (opts.lightDirection) {
    uniforms.dirlight_uLightDirection = opts.lightDirection;
  }
  return uniforms;
}
//# sourceMappingURL=dirlight.js.map