import { glsl } from "../../../lib/glsl-utils/highlight.js";
import { random } from "../..//math/random/random.js";
const fs = glsl`\
uniform tiltShiftUniforms {
  float blurRadius;
  float gradientRadius;
  vec2 start;
  vec2 end;
  bool invert;
} tiltShift;

vec2 tiltShift_getDelta(vec2 texSize) {
  vec2 vector = normalize((tiltShift.end - tiltShift.start) * texSize);
  return tiltShift.invert ? vec2(-vector.y, vector.x) : vector;
}

vec4 tiltShift_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec4 color = vec4(0.0);
  float total = 0.0;

  /* randomize the lookup values to hide the fixed number of samples */
  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);

  vec2 normal = normalize(vec2((tiltShift.start.y - tiltShift.end.y) * texSize.y, (tiltShift.end.x - tiltShift.start.x) * texSize.x));
  float radius = smoothstep(0.0, 1.0,
    abs(dot(texCoord * texSize - tiltShift.start * texSize, normal)) / tiltShift.gradientRadius) * tiltShift.blurRadius;

  for (float t = -30.0; t <= 30.0; t++) {
    float percent = (t + offset - 0.5) / 30.0;
    float weight = 1.0 - abs(percent);
    vec4 offsetColor = texture(source, texCoord + tiltShift_getDelta(texSize) / texSize * percent * radius);

    /* switch to pre-multiplied alpha to correctly blur transparent images */
    offsetColor.rgb *= offsetColor.a;

    color += offsetColor * weight;
    total += weight;
  }

  color = color / total;

  /* switch back from pre-multiplied alpha */
  color.rgb /= color.a + 0.00001;

  return color;
}
`;
export const tiltShift = {
  name: 'tiltShift',
  uniformTypes: {
    blurRadius: 'f32',
    gradientRadius: 'f32',
    start: 'vec2<f32>',
    end: 'vec2<f32>',
    invert: 'i32'
  },
  uniformPropTypes: {
    blurRadius: {
      value: 15,
      min: 0,
      max: 50
    },
    gradientRadius: {
      value: 200,
      min: 0,
      max: 400
    },
    start: {
      value: [0, 0]
    },
    end: {
      value: [1, 1]
    },
    invert: {
      value: false,
      private: true
    }
  },
  passes: [{
    sampler: true,
    uniforms: {
      invert: false
    }
  }, {
    sampler: true,
    uniforms: {
      invert: true
    }
  }],
  dependencies: [random],
  fs
};
//# sourceMappingURL=tiltshift.js.map