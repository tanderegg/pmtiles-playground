{"version":3,"file":"zoomblur.js","names":["random","fs","zoomBlur","name","uniformTypes","center","strength","uniformPropTypes","value","min","softMax","dependencies","passes","sampler"],"sources":["../../../../src/modules/postprocessing/image-blur-filters/zoomblur.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {ShaderPass} from '../../../lib/shader-module/shader-pass';\nimport {random} from '../../math/random/random';\n\nconst fs = `\nuniform zoomBlurUniforms {\n  vec2 center;\n  float strength;\n} zoomBlur;\n\nvec4 zoomBlur_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {\n  vec4 color = vec4(0.0);\n  float total = 0.0;\n  vec2 toCenter = zoomBlur.center * texSize - texCoord * texSize;\n\n  /* randomize the lookup values to hide the fixed number of samples */\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  for (float t = 0.0; t <= 40.0; t++) {\n    float percent = (t + offset) / 40.0;\n    float weight = 4.0 * (percent - percent * percent);\n    vec4 offsetColor = texture(source, texCoord + toCenter * percent * zoomBlur.strength / texSize);\n\n    /* switch to pre-multiplied alpha to correctly blur transparent images */\n    offsetColor.rgb *= offsetColor.a;\n\n    color += offsetColor * weight;\n    total += weight;\n  }\n\n  color = color / total;\n\n  /* switch back from pre-multiplied alpha */\n  color.rgb /= color.a + 0.00001;\n\n  return color;\n}\n`;\n\n/**\n * Zoom Blur - Blurs the image away from a certain point, which looks like radial motion blur.\n */\nexport type ZoomBlurProps = {\n  /** - The x, y coordinate of the blur origin. */\n  center?: number[],\n  /** - The strength of the blur. Values in the range 0 to 1 are usually sufficient, where 0 doesn't change the image and 1 creates a highly blurred image. */\n  strength?: number\n};\n\n/**\n * Zoom Blur\n * Blurs the image away from a certain point, which looks like radial motion blur.\n */\nexport const zoomBlur: ShaderPass<ZoomBlurProps, ZoomBlurProps> = {\n  name: 'zoomBlur',\n  uniformTypes: {\n    center: 'vec2<f32>',\n    strength: 'f32'\n  },\n  uniformPropTypes: {\n    center: {value: [0.5, 0.5]},\n    strength: {value: 0.3, min: 0, softMax: 1}\n  },\n  fs,\n  dependencies: [random],\n  passes: [{sampler: true}]\n};\n"],"mappings":"SAIQA,MAAM;AAEd,MAAMC,EAAE,GAAI;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAgBD,OAAO,MAAMC,QAAkD,GAAG;EAChEC,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACZC,MAAM,EAAE,WAAW;IACnBC,QAAQ,EAAE;EACZ,CAAC;EACDC,gBAAgB,EAAE;IAChBF,MAAM,EAAE;MAACG,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG;IAAC,CAAC;IAC3BF,QAAQ,EAAE;MAACE,KAAK,EAAE,GAAG;MAAEC,GAAG,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAC;EAC3C,CAAC;EACDT,EAAE;EACFU,YAAY,EAAE,CAACX,MAAM,CAAC;EACtBY,MAAM,EAAE,CAAC;IAACC,OAAO,EAAE;EAAI,CAAC;AAC1B,CAAC"}