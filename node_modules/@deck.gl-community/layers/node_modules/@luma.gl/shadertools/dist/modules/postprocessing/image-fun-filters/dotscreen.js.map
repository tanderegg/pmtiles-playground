{"version":3,"file":"dotscreen.js","names":["glsl","fs","dotScreen","name","uniformTypes","center","angle","size","uniformPropTypes","value","softMin","softMax","Math","PI","min","passes","filter"],"sources":["../../../../src/modules/postprocessing/image-fun-filters/dotscreen.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {ShaderPass} from '../../../lib/shader-module/shader-pass';\nimport {glsl} from '../../../lib/glsl-utils/highlight';\n\nconst fs = glsl`\\\nuniform dotScreenUniforms {\n  vec2 center;\n  float angle;\n  float size;\n} dotScreen;\n\nfloat pattern(vec2 texSize, vec2 texCoord) {\n  float scale = 3.1415 / dotScreen.size;\n\n  float s = sin(dotScreen.angle), c = cos(dotScreen.angle);\n  vec2 tex = texCoord * texSize - dotScreen.center * texSize;\n  vec2 point = vec2(\n    c * tex.x - s * tex.y,\n    s * tex.x + c * tex.y\n  ) * scale;\n  return (sin(point.x) * sin(point.y)) * 4.0;\n}\n\nvec4 dotScreen_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {\n  float average = (color.r + color.g + color.b) / 3.0;\n  return vec4(vec3(average * 10.0 - 5.0 + pattern(texSize, texCoord)), color.a);\n}\n`;\n\n/**\n * Dot Screen -\n * Simulates a black and white halftone rendering of the image by multiplying\n * pixel values with a rotated 2D sine wave pattern.\n */\nexport type DotScreenProps = {\n  /** The x, y coordinate of the pattern origin. */\n  center?: number[];\n  /** The rotation of the pattern in radians. */\n  angle?: number;\n  /** The diameter of a dot in pixels. */\n  size?: number;\n};\n\n/**\n * Dot Screen -\n * Simulates a black and white halftone rendering of the image by multiplying\n * pixel values with a rotated 2D sine wave pattern.\n */\nexport const dotScreen: ShaderPass<DotScreenProps, DotScreenProps> = {\n  name: 'dotScreen',\n  uniformTypes: {\n    center: 'vec2<f32>',\n    angle: 'f32',\n    size: 'f32'\n  },\n  uniformPropTypes: {\n    center: {value: [0.5, 0.5]},\n    angle: {value: 1.1, softMin: 0, softMax: Math.PI / 2},\n    size: {value: 3, min: 1, softMin: 3, softMax: 20}\n  },\n  fs,\n  passes: [{filter: true}]\n};\n"],"mappings":"SAIQA,IAAI;AAEZ,MAAMC,EAAE,GAAGD,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAqBD,OAAO,MAAME,SAAqD,GAAG;EACnEC,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAE;IACZC,MAAM,EAAE,WAAW;IACnBC,KAAK,EAAE,KAAK;IACZC,IAAI,EAAE;EACR,CAAC;EACDC,gBAAgB,EAAE;IAChBH,MAAM,EAAE;MAACI,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG;IAAC,CAAC;IAC3BH,KAAK,EAAE;MAACG,KAAK,EAAE,GAAG;MAAEC,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAEC,IAAI,CAACC,EAAE,GAAG;IAAC,CAAC;IACrDN,IAAI,EAAE;MAACE,KAAK,EAAE,CAAC;MAAEK,GAAG,EAAE,CAAC;MAAEJ,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAE;EAClD,CAAC;EACDV,EAAE;EACFc,MAAM,EAAE,CAAC;IAACC,MAAM,EAAE;EAAI,CAAC;AACzB,CAAC"}