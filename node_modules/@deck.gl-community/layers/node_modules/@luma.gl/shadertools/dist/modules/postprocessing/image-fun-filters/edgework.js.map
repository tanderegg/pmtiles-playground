{"version":3,"file":"edgework.js","names":["glsl","random","fs","edgeWork","name","uniformPropTypes","radius","value","min","softMax","delta","private","dependencies","passes","sampler"],"sources":["../../../../src/modules/postprocessing/image-fun-filters/edgework.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {ShaderPass} from '../../../lib/shader-module/shader-pass';\nimport {glsl} from '../../../lib/glsl-utils/highlight';\nimport {random} from '../../math/random/random';\n\nconst fs = glsl`\\\nuniform edgeWorkUniforms {\n  float radius;\n  vec2 delta;\n} edgeWork;\n\nvec4 edgeWork_sampleColor1(sampler2D source, vec2 texSize, vec2 texCoord) {\n  vec2 relativeDelta = edgeWork.radius * edgeWork.delta / texSize;\n\n  vec2 color = vec2(0.0);\n  vec2 total = vec2(0.0);\n\n  /* randomize the lookup values to hide the fixed number of samples */\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  for (float t = -30.0; t <= 30.0; t++) {\n    float percent = (t + offset - 0.5) / 30.0;\n    float weight = 1.0 - abs(percent);\n    vec3 sampleColor = texture(source, texCoord + relativeDelta * percent).rgb;\n    float average = (sampleColor.r + sampleColor.g + sampleColor.b) / 3.0;\n    color.x += average * weight;\n    total.x += weight;\n    if (abs(t) < 15.0) {\n      weight = weight * 2.0 - 1.0;\n      color.y += average * weight;\n      total.y += weight;\n    }\n  }\n  return vec4(color / total, 0.0, 1.0);\n}\n\nvec4 edgeWork_sampleColor2(sampler2D source, vec2 texSize, vec2 texCoord) {\n  vec2 relativeDelta = edgeWork.radius * edgeWork.delta / texSize;\n\n  vec2 color = vec2(0.0);\n  vec2 total = vec2(0.0);\n\n  /* randomize the lookup values to hide the fixed number of samples */\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  for (float t = -30.0; t <= 30.0; t++) {\n    float percent = (t + offset - 0.5) / 30.0;\n    float weight = 1.0 - abs(percent);\n    vec2 sampleColor = texture(source, texCoord + relativeDelta * percent).xy;\n    color.x += sampleColor.x * weight;\n    total.x += weight;\n    if (abs(t) < 15.0) {\n      weight = weight * 2.0 - 1.0;\n      color.y += sampleColor.y * weight;\n      total.y += weight;\n    }\n  }\n  float c = clamp(10000.0 * (color.y / total.y - color.x / total.x) + 0.5, 0.0, 1.0);\n  return vec4(c, c, c, 1.0);\n}\n`;\n\n/**\n * Edge Work -\n * Picks out different frequencies in the image by subtracting two\n * copies of the image blurred with different radii.\n */\nexport type EdgeWorkProps = {\n  /** radius The radius of the effect in pixels. */\n  radius?: number;\n  /** @deprecated internal */\n  delta?: number;\n};\n\n/**\n * Edge Work -\n * Picks out different frequencies in the image by subtracting two\n * copies of the image blurred with different radii.\n */\nexport const edgeWork: ShaderPass<EdgeWorkProps, EdgeWorkProps> = {\n  name: 'edgeWork',\n  uniformPropTypes: {\n    radius: {value: 2, min: 1, softMax: 50},\n    delta: {value: [1, 0], private: true}\n  },\n  fs,\n  dependencies: [random],\n  passes: [\n    {\n      // @ts-expect-error\n      sampler: 'edgeWork_sampleColor1',\n      uniformPropTypes: {delta: [1, 0]}\n    },\n    {\n      // @ts-expect-error\n      sampler: 'edgeWork_sampleColor2',\n      uniformPropTypes: {delta: [0, 1]}\n    }\n  ]\n};\n"],"mappings":"SAIQA,IAAI;AAAA,SACJC,MAAM;AAEd,MAAMC,EAAE,GAAGF,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAmBD,OAAO,MAAMG,QAAkD,GAAG;EAChEC,IAAI,EAAE,UAAU;EAChBC,gBAAgB,EAAE;IAChBC,MAAM,EAAE;MAACC,KAAK,EAAE,CAAC;MAAEC,GAAG,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAE,CAAC;IACvCC,KAAK,EAAE;MAACH,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MAAEI,OAAO,EAAE;IAAI;EACtC,CAAC;EACDT,EAAE;EACFU,YAAY,EAAE,CAACX,MAAM,CAAC;EACtBY,MAAM,EAAE,CACN;IAEEC,OAAO,EAAE,uBAAuB;IAChCT,gBAAgB,EAAE;MAACK,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;IAAC;EAClC,CAAC,EACD;IAEEI,OAAO,EAAE,uBAAuB;IAChCT,gBAAgB,EAAE;MAACK,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;IAAC;EAClC,CAAC;AAEL,CAAC"}