{"version":3,"file":"dirlight.js","names":["glsl","VS_WGSL","FS_WGSL","VS_GLSL","FS_GLSL","dirlight","name","dependencies","vs","fs","uniformTypes","lightDirection","defaultUniforms","Float32Array","getUniforms","opts","arguments","length","undefined","uniforms","dirlight_uLightDirection"],"sources":["../../../../src/modules/lighting/no-material/dirlight.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport type {NumberArray} from '@math.gl/types';\nimport {glsl} from '../../../lib/glsl-utils/highlight';\nimport {ShaderModule} from '../../../lib/shader-module/shader-module';\n\nexport type DirlightProps = {\n  lightDirection?: NumberArray | [number, number, number]\n}\n\nexport type DirlightUniforms = DirlightProps;\n\n// TODO\nexport const VS_WGSL = /* WGSL */`\\  \nvoid dirlight_setNormal(normal: vec3<f32>) {\n  dirlight_vNormal = normalize(normal);\n}\n`;\n\n// TODO\nexport const FS_WGSL = /* WGSL */`\\\nuniform dirlightUniforms {\n  vec3 lightDirection;\n} dirlight;\n\n// Returns color attenuated by angle from light source\nfn dirlight_filterColor(color: vec4<f32>, dirlightInputs): vec4<f32> {\n  const d: float = abs(dot(dirlight_vNormal, normalize(dirlight.lightDirection)));\n  return vec4<f32>(color.rgb * d, color.a);\n}\n`;\n\nconst VS_GLSL = glsl`\\\nout vec3 dirlight_vNormal;\n\nvoid dirlight_setNormal(vec3 normal) {\n  dirlight_vNormal = normalize(normal);\n}\n`;\n\nconst FS_GLSL = glsl`\\\nuniform dirlightUniforms {\n  vec3 lightDirection;\n} dirlight;\n\nin vec3 dirlight_vNormal;\n\n// Returns color attenuated by angle from light source\nvec4 dirlight_filterColor(vec4 color) {\n  float d = abs(dot(dirlight_vNormal, normalize(dirlight.lightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n`;\n\n/**\n * Cheap lighting - single directional light, single dot product, one uniform\n */\nexport const dirlight: ShaderModule<DirlightProps, DirlightUniforms> = {\n  name: 'dirlight',\n  dependencies: [],\n  vs: VS_GLSL,\n  fs: FS_GLSL,\n  // vs: {glsl: VS_GLSL, wgsl: VS_WGSL},\n  // fs: {glsl: FS_GLSL, wgsl: FS_WGSL},\n  // fragmentInputs: [\n  //   {\n  //     name: 'dirlight_vNormal',\n  //     type: 'vec3<f32>'\n  //   }\n  // ],\n  uniformTypes: {\n    lightDirection: 'vec3<f32>'\n  },\n  defaultUniforms: {\n    lightDirection: new Float32Array([1, 1, 2])\n  },\n  getUniforms\n};\n\nfunction getUniforms(opts: DirlightProps = dirlight.defaultUniforms): DirlightUniforms {\n  const uniforms: Record<string, unknown> = {};\n  if (opts.lightDirection) {\n    // eslint-disable-next-line camelcase\n    uniforms.dirlight_uLightDirection = opts.lightDirection;\n  }\n  return uniforms;\n}\n"],"mappings":"SAIQA,IAAI;AAUZ,OAAO,MAAMC,OAAO,GAAc;AAClC;AACA;AACA;AACA,CAAC;AAGD,OAAO,MAAMC,OAAO,GAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,OAAO,GAAGH,IAAK;AACrB;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMI,OAAO,GAAGJ,IAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAKD,OAAO,MAAMK,QAAuD,GAAG;EACrEC,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE,EAAE;EAChBC,EAAE,EAAEL,OAAO;EACXM,EAAE,EAAEL,OAAO;EASXM,YAAY,EAAE;IACZC,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE;IACfD,cAAc,EAAE,IAAIE,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC5C,CAAC;EACDC;AACF,CAAC;AAED,SAASA,WAAWA,CAAA,EAAmE;EAAA,IAAlEC,IAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGX,QAAQ,CAACO,eAAe;EACjE,MAAMO,QAAiC,GAAG,CAAC,CAAC;EAC5C,IAAIJ,IAAI,CAACJ,cAAc,EAAE;IAEvBQ,QAAQ,CAACC,wBAAwB,GAAGL,IAAI,CAACJ,cAAc;EACzD;EACA,OAAOQ,QAAQ;AACjB"}