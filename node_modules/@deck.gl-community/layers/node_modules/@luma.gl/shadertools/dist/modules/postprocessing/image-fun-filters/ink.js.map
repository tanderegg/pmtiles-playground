{"version":3,"file":"ink.js","names":["glsl","fs","ink","name","uniformTypes","strength","uniformPropTypes","value","min","softMax","passes","sampler"],"sources":["../../../../src/modules/postprocessing/image-fun-filters/ink.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {ShaderPass} from '../../../lib/shader-module/shader-pass';\nimport {glsl} from '../../../lib/glsl-utils/highlight';\n\nconst fs = glsl`\\\nuniform inkUniforms {\n  float strength;\n} ink;\n\nvec4 ink_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {\n  vec2 dx = vec2(1.0 / texSize.x, 0.0);\n  vec2 dy = vec2(0.0, 1.0 / texSize.y);\n  vec4 color = texture(source, texCoord);\n  float bigTotal = 0.0;\n  float smallTotal = 0.0;\n  vec3 bigAverage = vec3(0.0);\n  vec3 smallAverage = vec3(0.0);\n  for (float x = -2.0; x <= 2.0; x += 1.0) {\n    for (float y = -2.0; y <= 2.0; y += 1.0) {\n      vec3 offsetColor = texture(source, texCoord + dx * x + dy * y).rgb;\n      bigAverage += offsetColor;\n      bigTotal += 1.0;\n      if (abs(x) + abs(y) < 2.0) {\n        smallAverage += offsetColor;\n        smallTotal += 1.0;\n      }\n    }\n  }\n  vec3 edge = max(vec3(0.0), bigAverage / bigTotal - smallAverage / smallTotal);\n  float power = ink.strength * ink.strength * ink.strength * ink.strength * ink.strength;\n  return vec4(color.rgb - dot(edge, edge) * power * 100000.0, color.a);\n}\n`;\n\n/**\n * Ink -\n * Simulates outlining the image in ink by darkening edges stronger than a\n * certain threshold. The edge detection value is the difference of two\n * copies of the image, each blurred using a blur of a different radius.\n */\nexport type InkProps = {\n  /** The multiplicative scale of the ink edges. \n   * Values in the range 0 to 1 are usually sufficient, where 0 doesn't change the image and 1 adds lots of black edges. \n   * Negative strength values will create white ink edges instead of black ones.\n   */\n   strength?: number;\n};\n\n/**\n * Ink -\n * Simulates outlining the image in ink by darkening edges stronger than a\n * certain threshold. The edge detection value is the difference of two\n * copies of the image, each blurred using a blur of a different radius.\n */\nexport const ink: ShaderPass<InkProps, InkProps> = {\n  name: 'ink',\n  uniformTypes: {\n    strength: 'f32'\n  },\n  uniformPropTypes: {\n    strength: {value: 0.25, min: 0, softMax: 1}\n  },\n  fs,\n  passes: [{sampler: true}]\n};\n"],"mappings":"SAIQA,IAAI;AAEZ,MAAMC,EAAE,GAAGD,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAsBD,OAAO,MAAME,GAAmC,GAAG;EACjDC,IAAI,EAAE,KAAK;EACXC,YAAY,EAAE;IACZC,QAAQ,EAAE;EACZ,CAAC;EACDC,gBAAgB,EAAE;IAChBD,QAAQ,EAAE;MAACE,KAAK,EAAE,IAAI;MAAEC,GAAG,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAC;EAC5C,CAAC;EACDR,EAAE;EACFS,MAAM,EAAE,CAAC;IAACC,OAAO,EAAE;EAAI,CAAC;AAC1B,CAAC"}