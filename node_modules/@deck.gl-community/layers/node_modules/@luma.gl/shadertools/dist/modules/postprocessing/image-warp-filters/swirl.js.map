{"version":3,"file":"swirl.js","names":["glsl","warp","fs","swirl","name","uniformTypes","center","radius","angle","uniformPropTypes","value","min","softMax","softMin","dependencies","passes","sampler"],"sources":["../../../../src/modules/postprocessing/image-warp-filters/swirl.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {ShaderPass} from '../../../lib/shader-module/shader-pass';\nimport {glsl} from '../../../lib/glsl-utils/highlight';\nimport {warp} from './warp';\n\nconst fs = glsl`\\\nuniform swirlUniforms {\n  float radius;\n  float angle;\n  vec2 center;\n} swirl;\n\nvec2 swirl_warp(vec2 coord, vec2 texCenter) {\n  coord -= texCenter;\n  float distance = length(coord);\n  if (distance < swirl.radius) {\n    float percent = (swirl.radius - distance) / swirl.radius;\n    float theta = percent * percent * swirl.angle;\n    float s = sin(theta);\n    float c = cos(theta);\n    coord = vec2(\n      coord.x * c - coord.y * s,\n      coord.x * s + coord.y * c\n    );\n  }\n  coord += texCenter;\n  return coord;\n}\n\nvec4 swirl_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {\n  vec2 coord = texCoord * texSize;\n  coord = swirl_warp(coord, swirl.center * texSize);\n\n  return warp_sampleColor(source, texSize, coord);\n}\n`;\n\n/**\n * Warps a circular region of the image in a swirl.\n */\nexport type SwirlProps = {\n  /** [x, y] coordinates of the center of the circle of effect. default: [0.5, 0.5] */\n  center?: [number, number];\n  /**  The radius of the circular region. */\n  radius?: number;\n  /** The angle in radians that the pixels in the center of the circular region will be rotated by. */\n  angle?: number;\n};\n\n/**\n * Warps a circular region of the image in a swirl.\n */\nexport const swirl: ShaderPass<SwirlProps, SwirlProps> = {\n  name: 'swirl',\n  fs,\n  uniformTypes: {\n    center: 'vec2<f32>',\n    radius: 'f32',\n    angle: 'f32'\n  },\n  uniformPropTypes: {\n    center: {value: [0.5, 0.5]},\n    radius: {value: 200, min: 1, softMax: 600},\n    angle: {value: 3, softMin: -25, softMax: 25}\n  },\n  dependencies: [warp],\n  passes: [{sampler: true}]\n};\n"],"mappings":"SAIQA,IAAI;AAAA,SACJC,IAAI;AAEZ,MAAMC,EAAE,GAAGF,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAiBD,OAAO,MAAMG,KAAyC,GAAG;EACvDC,IAAI,EAAE,OAAO;EACbF,EAAE;EACFG,YAAY,EAAE;IACZC,MAAM,EAAE,WAAW;IACnBC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE;EACT,CAAC;EACDC,gBAAgB,EAAE;IAChBH,MAAM,EAAE;MAACI,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG;IAAC,CAAC;IAC3BH,MAAM,EAAE;MAACG,KAAK,EAAE,GAAG;MAAEC,GAAG,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAG,CAAC;IAC1CJ,KAAK,EAAE;MAACE,KAAK,EAAE,CAAC;MAAEG,OAAO,EAAE,CAAC,EAAE;MAAED,OAAO,EAAE;IAAE;EAC7C,CAAC;EACDE,YAAY,EAAE,CAACb,IAAI,CAAC;EACpBc,MAAM,EAAE,CAAC;IAACC,OAAO,EAAE;EAAI,CAAC;AAC1B,CAAC"}