{"version":3,"file":"triangleblur.js","names":["glsl","random","fs","triangleBlur","name","uniformTypes","radius","delta","uniformPropTypes","value","min","softMax","private","dependencies","passes","sampler","uniforms"],"sources":["../../../../src/modules/postprocessing/image-blur-filters/triangleblur.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {ShaderPass} from '../../../lib/shader-module/shader-pass';\nimport {glsl} from '../../../lib/glsl-utils/highlight';\nimport {random} from '../..//math/random/random';\n\nconst fs = glsl`\\\nuniform triangleBlurUniforms {\n  float radius;\n  vec2 delta;\n} triangleBlur;\n\nvec4 triangleBlur_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {\n  vec2 adjustedDelta = triangleBlur.delta * triangleBlur.radius / texSize;\n\n  vec4 color = vec4(0.0);\n  float total = 0.0;\n\n  /* randomize the lookup values to hide the fixed number of samples */\n  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n  for (float t = -30.0; t <= 30.0; t++) {\n    float percent = (t + offset - 0.5) / 30.0;\n    float weight = 1.0 - abs(percent);\n    vec4 offsetColor = texture(source, texCoord + adjustedDelta * percent);\n\n    /* switch to pre-multiplied alpha to correctly blur transparent images */\n    offsetColor.rgb *= offsetColor.a;\n\n    color += offsetColor * weight;\n    total += weight;\n  }\n\n  color = color / total;\n\n  /* switch back from pre-multiplied alpha */\n  color.rgb /= color.a + 0.00001;\n\n  return color;\n}\n`;\n\n/**\n * @filter       Triangle Blur\n * @description  This is the most basic blur filter, which convolves the image with a\n *               pyramid filter. The pyramid filter is separable and is applied as two\n *               perpendicular triangle filters.\n */\nexport type TriangleBlurProps = {\n  /** The radius of the pyramid convolved with the image. */\n  radius?: number;\n  /** @deprecated internal property */\n  delta?: number[];\n};\n\n/**\n * @filter       Triangle Blur\n * @description  This is the most basic blur filter, which convolves the image with a\n *               pyramid filter. The pyramid filter is separable and is applied as two\n *               perpendicular triangle filters.\n */\nexport const triangleBlur: ShaderPass<TriangleBlurProps, TriangleBlurProps> = {\n  name: 'triangleBlur',\n  uniformTypes: {\n    radius: 'f32',\n    delta: 'vec2<f32>'\n  },\n  uniformPropTypes: {\n    radius: {value: 20, min: 0, softMax: 100},\n    delta: {value: [1, 0], private: true}\n  },\n  fs,\n  dependencies: [random],\n  passes: [\n    {sampler: true, uniforms: {delta: [1, 0]}},\n    {sampler: true, uniforms: {delta: [0, 1]}}\n  ]\n};\n"],"mappings":"SAIQA,IAAI;AAAA,SACJC,MAAM;AAEd,MAAMC,EAAE,GAAGF,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAqBD,OAAO,MAAMG,YAA8D,GAAG;EAC5EC,IAAI,EAAE,cAAc;EACpBC,YAAY,EAAE;IACZC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE;EACT,CAAC;EACDC,gBAAgB,EAAE;IAChBF,MAAM,EAAE;MAACG,KAAK,EAAE,EAAE;MAAEC,GAAG,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAG,CAAC;IACzCJ,KAAK,EAAE;MAACE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MAAEG,OAAO,EAAE;IAAI;EACtC,CAAC;EACDV,EAAE;EACFW,YAAY,EAAE,CAACZ,MAAM,CAAC;EACtBa,MAAM,EAAE,CACN;IAACC,OAAO,EAAE,IAAI;IAAEC,QAAQ,EAAE;MAACT,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;IAAC;EAAC,CAAC,EAC1C;IAACQ,OAAO,EAAE,IAAI;IAAEC,QAAQ,EAAE;MAACT,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC;IAAC;EAAC,CAAC;AAE9C,CAAC"}