{"version":3,"file":"transpile-glsl-shader.js","names":["transpileGLSLShader","source","targetGLSLVersion","stage","_source$match","sourceGLSLVersion","Number","match","Error","convertShader","ES300_VERTEX_REPLACEMENTS","ES300_FRAGMENT_REPLACEMENTS","ES100_VERTEX_REPLACEMENTS","ES100_FRAGMENT_REPLACEMENTS","convertFragmentShaderTo100","String","ES300_REPLACEMENTS","makeVariableTextRegExp","ES100_REPLACEMENTS","ES100_FRAGMENT_OUTPUT_NAME","ES300_FRAGMENT_OUTPUT_REGEX","replacements","pattern","replacement","replace","outputMatch","exec","outputName","RegExp","qualifier"],"sources":["../../../src/lib/shader-transpiler/transpile-glsl-shader.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\n// TRANSPILATION TABLES\n\n/**\n * Transpiles GLSL 3.00 shader source code to target GLSL version (3.00 or 1.00)\n *\n * @note We always run transpiler even if same version e.g. 3.00 => 3.00\n * @note For texture sampling transpilation, apps need to use non-standard texture* calls in GLSL 3.00 source\n * RFC: https://github.com/visgl/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/portable-glsl-300-rfc.md\n */\nexport function transpileGLSLShader(\n  source: string,\n  targetGLSLVersion: 100 | 300,\n  stage: 'vertex' | 'fragment'\n): string {\n  const sourceGLSLVersion = Number(source.match(/^#version[ \\t]+(\\d+)/m)?.[1] || 100);\n  if (sourceGLSLVersion !== 300) {\n    // TODO - we splurge on a longer error message to help deck.gl custom layer developers\n    throw new Error('luma.gl v9 only supports GLSL 3.00 shader sources');\n  }\n\n  switch (targetGLSLVersion) {\n    case 300:\n      switch (stage) {\n        case 'vertex':\n          source = convertShader(source, ES300_VERTEX_REPLACEMENTS);\n          return source;\n        case 'fragment':\n          source = convertShader(source, ES300_FRAGMENT_REPLACEMENTS);\n          return source;\n        default:\n          // Unknown shader stage\n          throw new Error(stage);\n      }\n      \n    case 100:\n      switch (stage) {\n        case 'vertex':\n          source = convertShader(source, ES100_VERTEX_REPLACEMENTS);\n          return source;\n        case 'fragment':\n          source = convertShader(source, ES100_FRAGMENT_REPLACEMENTS);\n          source = convertFragmentShaderTo100(source);\n          return source;\n        default:\n          // Unknown shader stage\n          throw new Error(stage);\n      }\n\n    default:\n      // Unknown GLSL version\n      throw new Error(String(targetGLSLVersion));\n  }\n}\n\ntype GLSLReplacement = [RegExp, string];\n\n/** Simple regex replacements for GLSL ES 1.00 syntax that has changed in GLSL ES 3.00 */\nconst ES300_REPLACEMENTS: GLSLReplacement[] = [\n  // Fix poorly formatted version directive\n  [/^(#version[ \\t]+(100|300[ \\t]+es))?[ \\t]*\\n/, '#version 300 es\\n'],\n  // The individual `texture...()` functions were replaced with `texture()` overloads\n  [/\\btexture(2D|2DProj|Cube)Lod(EXT)?\\(/g, 'textureLod('],\n  [/\\btexture(2D|2DProj|Cube)(EXT)?\\(/g, 'texture(']\n];\n\nconst ES300_VERTEX_REPLACEMENTS: GLSLReplacement[] = [\n  ...ES300_REPLACEMENTS,\n  // `attribute` keyword replaced with `in`\n  [makeVariableTextRegExp('attribute'), 'in $1'],\n  // `varying` keyword replaced with `out`\n  [makeVariableTextRegExp('varying'), 'out $1']\n];\n\n/** Simple regex replacements for GLSL ES 1.00 syntax that has changed in GLSL ES 3.00 */\nconst ES300_FRAGMENT_REPLACEMENTS: GLSLReplacement[] = [\n  ...ES300_REPLACEMENTS,\n  // `varying` keyword replaced with `in`\n  [makeVariableTextRegExp('varying'), 'in $1']\n];\n\nconst ES100_REPLACEMENTS: GLSLReplacement[] = [\n  [/^#version[ \\t]+300[ \\t]+es/, '#version 100'],\n\n  // In GLSL 1.00 ES these functions are provided by an extension\n  [/\\btexture(2D|2DProj|Cube)Lod\\(/g, 'texture$1LodEXT('],\n\n  // Overloads in GLSL 3.00 map to individual functions. Note that we cannot\n  // differentiate 2D,2DProj,Cube without type analysis so we choose the most common variant.\n  [/\\btexture\\(/g, 'texture2D('],\n  [/\\btextureLod\\(/g, 'texture2DLodEXT(']\n];\n\nconst ES100_VERTEX_REPLACEMENTS: GLSLReplacement[] = [\n  ...ES100_REPLACEMENTS,\n  [makeVariableTextRegExp('in'), 'attribute $1'],\n  [makeVariableTextRegExp('out'), 'varying $1']\n];\n\nconst ES100_FRAGMENT_REPLACEMENTS: GLSLReplacement[] = [\n  ...ES100_REPLACEMENTS,\n  // Replace `in` with `varying`\n  [makeVariableTextRegExp('in'), 'varying $1']\n];\n\nconst ES100_FRAGMENT_OUTPUT_NAME: string = 'gl_FragColor';\nconst ES300_FRAGMENT_OUTPUT_REGEX: RegExp = /\\bout[ \\t]+vec4[ \\t]+(\\w+)[ \\t]*;\\n?/;\n// const REGEX_START_OF_MAIN: RegExp = /void\\s+main\\s*\\([^)]*\\)\\s*\\{\\n?/; // Beginning of main\n\nfunction convertShader(source: string, replacements: GLSLReplacement[]) {\n  for (const [pattern, replacement] of replacements) {\n    source = source.replace(pattern, replacement);\n  }\n  return source;\n}\n\n/** Transform fragment shader source code to GLSL ES 100 */\nfunction convertFragmentShaderTo100(source: string): string {\n  source = convertShader(source, ES100_FRAGMENT_REPLACEMENTS);\n\n  // TODO - This seems like a hack to find the color output name,\n  // what if we have several outputs?\n  const outputMatch = ES300_FRAGMENT_OUTPUT_REGEX.exec(source);\n  if (outputMatch) {\n    const outputName = outputMatch[1];\n    source = source\n      // Remove the GLSL300 output declaration\n      .replace(ES300_FRAGMENT_OUTPUT_REGEX, '')\n      // Replace any found output name \n      .replace(new RegExp(`\\\\b${outputName}\\\\b`, 'g'), ES100_FRAGMENT_OUTPUT_NAME);\n  }\n\n  return source;\n}\n\n/**\n * Creates a regexp that tests for a specific variable type\n * @example\n *   should match:\n *     in float weight;\n *     out vec4 positions[2];\n *   should not match:\n *     void f(out float a, in float b) {}\n */\nfunction makeVariableTextRegExp(qualifier: 'attribute' | 'varying' | 'in' | 'out'): RegExp {\n  return new RegExp(`\\\\b${qualifier}[ \\\\t]+(\\\\w+[ \\\\t]+\\\\w+(\\\\[\\\\w+\\\\])?;)`, 'g');\n}\n"],"mappings":"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"}