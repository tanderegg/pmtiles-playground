{"version":3,"file":"platform-defines.js","names":["glsl","getPlatformShaderDefines","platformInfo","gpu","toLowerCase","getVersionDefines","versionDefines","features","has"],"sources":["../../../src/lib/shader-assembly/platform-defines.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {glsl} from '../glsl-utils/highlight';\nimport {PlatformInfo} from './platform-info';\n\n/** Adds defines to help identify GPU architecture / platform */\nexport function getPlatformShaderDefines(platformInfo: PlatformInfo): string {\n  switch (platformInfo?.gpu.toLowerCase()) {\n    case 'apple':\n      return glsl`\\\n#define APPLE_GPU\n// Apple optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n`;\n\n    case 'nvidia':\n      return glsl`\\\n#define NVIDIA_GPU\n// Nvidia optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n`;\n\n    case 'intel':\n      return glsl`\\\n#define INTEL_GPU\n// Intel optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n`;\n\n    case 'amd':\n      // AMD Does not eliminate fp64 code\n      return glsl`\\\n#define AMD_GPU\n`;\n\n    default:\n      // We don't know what GPU it is, could be that the GPU driver or\n      // browser is not implementing UNMASKED_RENDERER constant and not\n      // reporting a correct name\n      return glsl`\\\n#define DEFAULT_GPU\n// Prevent driver from optimizing away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Headless Chrome's software shader 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// If the GPU doesn't have full 32 bits precision, will causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n`;\n  }\n}\n\n/** Adds defines to let shaders portably v1/v3 check for features */\nexport function getVersionDefines(platformInfo: PlatformInfo): string {\n  let versionDefines = '';\n\n  if (platformInfo.features.has('webgl2')) {\n    versionDefines += glsl`\\\n# define FEATURE_GLSL_DERIVATIVES\n# define FEATURE_GLSL_DRAW_BUFFERS\n# define FEATURE_GLSL_FRAG_DEPTH\n# define FEATURE_GLSL_TEXTURE_LOD\n`;\n  }\n\n  if (!platformInfo.features.has('webgl2')) {\n    if (platformInfo.features.has('glsl-frag-depth')) {\n      versionDefines += glsl`\\\n\n// FEATURE_GLSL_FRAG_DEPTH => gl_FragDepth is available\n#ifdef GL_EXT_frag_depth\n# extension GL_EXT_frag_depth : enable\n# define FEATURE_GLSL_FRAG_DEPTH\n# define FRAG_DEPTH\n# define gl_FragDepth gl_FragDepthEXT\n#endif\n`;\n    }\n    if (platformInfo?.features.has('glsl-derivatives')) {\n      versionDefines += glsl`\\\n\n// FEATURE_GLSL_DERIVATIVES => dxdF, dxdY and fwidth are available\n#if defined(GL_OES_standard_derivatives) || defined(FEATURE_GLSL_DERIVATIVES)\n# extension GL_OES_standard_derivatives : enable\n# define FEATURE_GLSL_DERIVATIVES\n#endif\n`;\n    }\n    if (platformInfo?.features.has('glsl-frag-data')) {\n      versionDefines += glsl`\\\n\n// FEATURE_GLSL_DRAW_BUFFERS => gl_FragData[] is available\n#ifdef GL_EXT_draw_buffers\n# extension GL_EXT_draw_buffers : require\n# define FEATURE_GLSL_DRAW_BUFFERS\n#endif\n`;\n    }\n    if (platformInfo?.features.has('glsl-texture-lod')) {\n      versionDefines += glsl`\\\n// TEXTURE_LOD => texture2DLod etc are available\n#ifdef GL_EXT_shader_texture_lod\n# extension GL_EXT_shader_texture_lod : enable\n# define FEATURE_GLSL_TEXTURE_LOD\n# define TEXTURE_LOD\n#endif\n`;\n    }\n  }\n  return versionDefines;\n}\n"],"mappings":"SAGQA,IAAI;AAIZ,OAAO,SAASC,wBAAwBA,CAACC,YAA0B,EAAU;EAC3E,QAAQA,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEC,GAAG,CAACC,WAAW,CAAC,CAAC;IACrC,KAAK,OAAO;MACV,OAAOJ,IAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IAEG,KAAK,QAAQ;MACX,OAAOA,IAAK;AAClB;AACA;AACA;AACA,CAAC;IAEG,KAAK,OAAO;MACV,OAAOA,IAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IAEG,KAAK,KAAK;MAER,OAAOA,IAAK;AAClB;AACA,CAAC;IAEG;MAIE,OAAOA,IAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;EACC;AACF;AAGA,OAAO,SAASK,iBAAiBA,CAACH,YAA0B,EAAU;EACpE,IAAII,cAAc,GAAG,EAAE;EAEvB,IAAIJ,YAAY,CAACK,QAAQ,CAACC,GAAG,CAAC,QAAQ,CAAC,EAAE;IACvCF,cAAc,IAAIN,IAAK;AAC3B;AACA;AACA;AACA;AACA,CAAC;EACC;EAEA,IAAI,CAACE,YAAY,CAACK,QAAQ,CAACC,GAAG,CAAC,QAAQ,CAAC,EAAE;IACxC,IAAIN,YAAY,CAACK,QAAQ,CAACC,GAAG,CAAC,iBAAiB,CAAC,EAAE;MAChDF,cAAc,IAAIN,IAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACG;IACA,IAAIE,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAEK,QAAQ,CAACC,GAAG,CAAC,kBAAkB,CAAC,EAAE;MAClDF,cAAc,IAAIN,IAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACG;IACA,IAAIE,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAEK,QAAQ,CAACC,GAAG,CAAC,gBAAgB,CAAC,EAAE;MAChDF,cAAc,IAAIN,IAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACG;IACA,IAAIE,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAEK,QAAQ,CAACC,GAAG,CAAC,kBAAkB,CAAC,EAAE;MAClDF,cAAc,IAAIN,IAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IACG;EACF;EACA,OAAOM,cAAc;AACvB"}