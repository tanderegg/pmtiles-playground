import { ShaderModuleInstance } from "./shader-module/shader-module-instance.js";
import { assembleShaders } from "./shader-assembly/assemble-shaders.js";
import { selectShaders } from "./shader-assembly/select-shaders.js";
export class ShaderAssembler {
  constructor() {
    this._hookFunctions = [];
    this._defaultModules = [];
  }
  static getDefaultShaderAssembler() {
    ShaderAssembler.defaultShaderAssembler = ShaderAssembler.defaultShaderAssembler || new ShaderAssembler();
    return ShaderAssembler.defaultShaderAssembler;
  }
  addDefaultModule(module) {
    if (!this._defaultModules.find(m => m.name === (typeof module === 'string' ? module : module.name))) {
      this._defaultModules.push(module);
    }
  }
  removeDefaultModule(module) {
    const moduleName = typeof module === 'string' ? module : module.name;
    this._defaultModules = this._defaultModules.filter(m => m.name !== moduleName);
  }
  addShaderHook(hook, opts) {
    if (opts) {
      hook = Object.assign(opts, {
        hook
      });
    }
    this._hookFunctions.push(hook);
  }
  assembleShaders(props) {
    const modules = this._getModuleList(props.modules);
    const hookFunctions = this._hookFunctions;
    const options = selectShaders(props);
    const assembled = assembleShaders({
      platformInfo: props.platformInfo,
      ...options,
      modules,
      hookFunctions
    });
    return {
      ...assembled,
      modules
    };
  }
  _getModuleList() {
    let appModules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    const modules = new Array(this._defaultModules.length + appModules.length);
    const seen = {};
    let count = 0;
    for (let i = 0, len = this._defaultModules.length; i < len; ++i) {
      const module = this._defaultModules[i];
      const name = module.name;
      modules[count++] = module;
      seen[name] = true;
    }
    for (let i = 0, len = appModules.length; i < len; ++i) {
      const module = appModules[i];
      const name = module.name;
      if (!seen[name]) {
        modules[count++] = module;
        seen[name] = true;
      }
    }
    modules.length = count;
    return ShaderModuleInstance.instantiateModules(modules);
  }
}
ShaderAssembler.defaultShaderAssembler = void 0;
//# sourceMappingURL=shader-assembler.js.map