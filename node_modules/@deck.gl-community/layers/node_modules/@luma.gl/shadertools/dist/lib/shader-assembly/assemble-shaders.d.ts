import { PlatformInfo } from './platform-info';
import { ShaderModuleInstance } from '../shader-module/shader-module-instance';
import type { ShaderInjection } from './shader-injections';
import type { ShaderModule } from '../shader-module/shader-module';
import { ShaderHook } from './shader-hooks';
/** Define map */
export type ShaderDefine = string | number | boolean;
export type HookFunction = {
    hook: string;
    header: string;
    footer: string;
    signature?: string;
};
export type AssembleShaderOptions = {
    /** information about the platform (which shader language & version, extensions etc.) */
    platformInfo: PlatformInfo;
    /** Inject shader id #defines */
    id?: string;
    /** Vertex shader */
    vs: string;
    /** Fragment shader */
    fs: string;
    /** Shader type @deprecated do we still need this */
    /** Modules to be injected */
    modules?: (ShaderModule | ShaderModuleInstance)[];
    /** Defines to be injected */
    defines?: Record<string, ShaderDefine>;
    /** Hook functions */
    hookFunctions?: (ShaderHook | string)[];
    /** Code injections */
    inject?: Record<string, string | ShaderInjection>;
    /** Whether to inject prologue */
    prologue?: boolean;
    /** logger object */
    log?: any;
};
/**
 * getUniforms function returned from the shader module system
 */
export type GetUniformsFunc = (opts: Record<string, any>) => Record<string, any>;
/**
 * Inject a list of shader modules into shader sources
 */
export declare function assembleShaders(options: AssembleShaderOptions): {
    vs: string;
    fs: string;
    getUniforms: GetUniformsFunc;
};
//# sourceMappingURL=assemble-shaders.d.ts.map