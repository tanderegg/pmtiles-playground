{"version":3,"file":"shader-utils.js","names":["glsl","FS100","FS_GLES","FS300","getQualifierDetails","line","qualifiers","Array","isArray","words","replace","split","qualifier","type","definition","includes","name","getPassthroughFS","options","version","input","inputChannels","output","Error","inputType","channelCountToType","outputValue","convertToVec4","typeToChannelSuffix","typeToChannelCount","channels","variable"],"sources":["../../../src/lib/glsl-utils/shader-utils.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {glsl} from './highlight';\n\nconst FS100 = glsl`void main() {gl_FragColor = vec4(0);}`;\nconst FS_GLES = glsl`\\\nout vec4 transform_output;\nvoid main() {\n  transform_output = vec4(0);\n}`;\nconst FS300 = `#version 300 es\\n${FS_GLES}`;\n\ntype QualifierInfo = {\n  qualifier: string;\n  type: string;\n  name: string;\n}\n\n// Prase given glsl line and return qualifier details or null\nexport function getQualifierDetails(line: string, qualifiers: string | string[]): QualifierInfo | null {\n  qualifiers = Array.isArray(qualifiers) ? qualifiers : [qualifiers];\n  const words = line.replace(/^\\s+/, '').split(/\\s+/);\n  // TODO add support for precession qualifiers (highp, mediump and lowp)\n  const [qualifier, type, definition] = words;\n  if (!qualifiers.includes(qualifier) || !type || !definition) {\n    return null;\n  }\n  const name = definition.split(';')[0];\n  return {qualifier, type, name};\n}\n\n/**\n * Given the shader version, input and output variable names,\n * builds and return a pass through fragment shader.\n */\nexport function getPassthroughFS(options?: {\n  version?: number;\n  input?: string;\n  inputChannels?: 1 | 2 | 3 | 4;\n  output?: string;\n}): string {\n  const {version = 100, input, inputChannels, output} = options || {};\n  if (!input) {\n    if (version === 300) {\n      // Fast-path for WebGL 2.0\n      return FS300;\n    } else if (version > 300) {\n      // Use the supplied version for OpenGL/ES 3.2+\n      return `#version ${version}\\n${FS_GLES}`;\n    }\n    // Fast-path for WebGL 1.0\n    return FS100;\n  }\n  if (!inputChannels) {\n    throw new Error('inputChannels');\n  }\n  const inputType = channelCountToType(inputChannels);\n  const outputValue = convertToVec4(input, inputChannels);\n  if (version >= 300) {\n    // If version is 300, assume WebGL 2.0\n    return `\\\n#version ${version} ${version === 300 ? 'es' : ''}\nin ${inputType} ${input};\nout vec4 ${output};\nvoid main() {\n  ${output} = ${outputValue};\n}`;\n  }\n  // WebGL 1.0\n  return `\\\nvarying ${inputType} ${input};\nvoid main() {\n  gl_FragColor = ${outputValue};\n}`;\n}\n\n/** convert glsl type to suffix */\nexport function typeToChannelSuffix(type: string):  'x' | 'xy' | 'xyz' | 'xyzw' {\n  // prettier-ignore\n  switch (type) {\n    case 'float': return 'x';\n    case 'vec2': return 'xy';\n    case 'vec3': return 'xyz';\n    case 'vec4': return 'xyzw';\n    default:\n      throw new Error(type);\n  }\n}\n\n/** convert glsl type to channel count */\nexport function typeToChannelCount(type: string): 1 | 2 | 3 | 4 {\n  // prettier-ignore\n  switch (type) {\n    case 'float': return 1;\n    case 'vec2': return 2;\n    case 'vec3': return 3;\n    case 'vec4': return 4;\n    default:\n      throw new Error(type);\n  }\n}\nfunction channelCountToType(channels: 1 | 2 | 3 |4): 'float' | 'vec2' | 'vec3' | 'vec4' {\n  // prettier-ignore\n  switch (channels) {\n    case 1: return 'float';\n    case 2: return 'vec2';\n    case 3: return 'vec3';\n    case 4: return 'vec4';\n    default:\n      throw new Error(`invalid channels: ${channels}`);\n  }\n}\n\n/** Returns glsl instruction for converting to vec4 */\nexport function convertToVec4(variable: string, channels: 1 | 2 | 3 | 4): string {\n  // prettier-ignore\n  switch (channels) {\n    case 1: return `vec4(${variable}, 0.0, 0.0, 1.0)`;\n    case 2: return `vec4(${variable}, 0.0, 1.0)`;\n    case 3: return `vec4(${variable}, 1.0)`;\n    case 4: return variable;\n    default:\n      throw new Error(`invalid channels: ${channels}`);\n  }\n}\n"],"mappings":"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"}