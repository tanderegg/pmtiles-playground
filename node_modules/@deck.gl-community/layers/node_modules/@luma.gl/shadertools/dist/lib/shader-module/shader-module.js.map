{"version":3,"file":"shader-module.js","names":[],"sources":["../../../src/lib/shader-module/shader-module.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {NumberArray} from '@math.gl/types';\nimport {UniformFormat} from '../../types';\nimport {PropType} from '../filters/prop-types';\n\nexport type UniformValue = number | boolean | Readonly<NumberArray>; // Float32Array> | Readonly<Int32Array> | Readonly<Uint32Array> | Readonly<number[]>;\n\nexport type UniformInfo = {\n  format?: UniformFormat; \n} & PropType;\n\n\n\n/** \n * A shader module definition object\n * @note Can be viewed as the ShaderModuleProps for a ShaderModuleInstance\n */\nexport type ShaderModule<PropsT extends Record<string, unknown> = Record<string, unknown>, UniformsT extends Record<string, UniformValue> = Record<string, UniformValue>, BindingsT extends Record<string, unknown> = {}> = {\n  /** Used for type inference not for values */\n  props?: Required<PropsT>;\n  /** Used for type inference, not currently used for values */\n  uniforms?: UniformsT;\n\n  name: string;\n  fs?: string;\n  vs?: string;\n\n  /** Uniform shader types @note: Both order and types MUST match uniform block declarations in shader */\n  uniformTypes?: Record<keyof UniformsT, UniformFormat>;\n  /** Uniform JS prop types  */\n  uniformPropTypes?: Record<keyof UniformsT, UniformInfo>;\n  /** Default uniform values */\n  defaultUniforms?: Required<UniformsT>; // Record<keyof UniformsT, UniformValue>;\n\n  /** Function that maps settings to uniforms */\n  // getUniforms?: (settings?: Partial<SettingsT>, prevUniforms?: any /* UniformsT */) => UniformsT;\n  getUniforms?: (settings?: any, prevUniforms?: any) => Record<string, UniformValue>;\n\n  /** uniform buffers, textures, samplers, storage, ... */\n  bindings?: Record<keyof BindingsT, {location: number; type: 'texture' | 'sampler' | 'uniforms'}>;\n\n  defines?: Record<string, string | number>;\n  /** Injections */\n  inject?: Record<string, string | {injection: string; order: number;}>;\n  dependencies?: ShaderModule<any, any>[];\n  /** Information on deprecated properties */\n  deprecations?: ShaderModuleDeprecation[];\n\n  /** Internal */\n  normalized?: boolean;\n};\n\n/** Use to generate deprecations when shader module is used */\nexport type ShaderModuleDeprecation = {\n  type: string;\n  regex?: RegExp;\n  new: string;\n  old: string;\n  deprecated?: boolean;\n};\n"],"mappings":""}