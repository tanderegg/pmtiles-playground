{"version":3,"file":"shader-injections.js","names":["MODULE_INJECTORS_VS","MODULE_INJECTORS_FS","assert","MODULE_INJECTORS","vertex","fragment","REGEX_START_OF_MAIN","REGEX_END_OF_MAIN","fragments","DECLARATION_INJECT_MARKER","normalizeInjections","injections","result","hook","injection","stage","getHookStage","order","type","slice","Error","injectShader","source","inject","injectStandardStubs","arguments","length","undefined","isVertex","key","fragmentData","sort","a","b","i","len","fragmentString","join","replace","match","combineInjects","injects","Array","isArray","forEach"],"sources":["../../../src/lib/shader-assembly/shader-injections.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {MODULE_INJECTORS_VS, MODULE_INJECTORS_FS} from '../../module-injectors';\nimport {assert} from '../utils/assert';\n\n// TODO - experimental\nconst MODULE_INJECTORS = {\n  vertex: MODULE_INJECTORS_VS,\n  fragment: MODULE_INJECTORS_FS\n};\n\nconst REGEX_START_OF_MAIN = /void\\s+main\\s*\\([^)]*\\)\\s*\\{\\n?/; // Beginning of main\nconst REGEX_END_OF_MAIN = /}\\n?[^{}]*$/; // End of main, assumes main is last function\nconst fragments: string[] = [];\n\nexport const DECLARATION_INJECT_MARKER = '__LUMA_INJECT_DECLARATIONS__';\n\n/**\n * \n */\nexport type ShaderInjection = {\n  injection: string;\n  order: number;\n};\n\n/**\n *  ShaderInjections, parsed and split per shader\n */\nexport type ShaderInjections = {\n  vertex: Record<string, ShaderInjection>;\n  fragment: Record<string, ShaderInjection>;\n};\n\n/**\n * \n */\nexport function normalizeInjections(injections: Record<string, string | ShaderInjection>): ShaderInjections {\n  const result: ShaderInjections = {vertex: {}, fragment: {}};\n\n  for (const hook in injections) {\n    let injection = injections[hook];\n    const stage = getHookStage(hook);\n    if (typeof injection === 'string') {\n      injection = {\n        order: 0,\n        injection\n      };\n    }\n\n    result[stage][hook] = injection;\n  }\n\n  return result;\n}\n\nfunction getHookStage(hook: string): 'vertex' | 'fragment' {\n  const type = hook.slice(0, 2);\n  switch (type) {\n    case 'vs': return 'vertex';\n    case 'fs': return 'fragment';\n    default:\n      throw new Error(type);\n  }\n}\n\n/**\n// A minimal shader injection/templating system.\n// RFC: https://github.com/visgl/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/shader-injection-rfc.md\n * @param source \n * @param type \n * @param inject \n * @param injectStandardStubs \n * @returns \n */\n// eslint-disable-next-line complexity\nexport function injectShader(\n  source: string, \n  stage: 'vertex' | 'fragment', \n  inject: Record<string, ShaderInjection[]>, \n  injectStandardStubs = false\n): string {\n  const isVertex = stage === 'vertex';\n\n  for (const key in inject) {\n    const fragmentData = inject[key];\n    fragmentData.sort((a: ShaderInjection, b: ShaderInjection): number => a.order - b.order);\n    fragments.length = fragmentData.length;\n    for (let i = 0, len = fragmentData.length; i < len; ++i) {\n      fragments[i] = fragmentData[i].injection;\n    }\n    const fragmentString = `${fragments.join('\\n')}\\n`;\n    switch (key) {\n      // declarations are injected before the main function\n      case 'vs:#decl':\n        if (isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      // inject code at the beginning of the main function\n      case 'vs:#main-start':\n        if (isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, (match: string) => match + fragmentString);\n        }\n        break;\n      // inject code at the end of main function\n      case 'vs:#main-end':\n        if (isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, (match: string) => fragmentString + match);\n        }\n        break;\n      // declarations are injected before the main function\n      case 'fs:#decl':\n        if (!isVertex) {\n          source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);\n        }\n        break;\n      // inject code at the beginning of the main function\n      case 'fs:#main-start':\n        if (!isVertex) {\n          source = source.replace(REGEX_START_OF_MAIN, (match: string) => match + fragmentString);\n        }\n        break;\n      // inject code at the end of main function\n      case 'fs:#main-end':\n        if (!isVertex) {\n          source = source.replace(REGEX_END_OF_MAIN, (match: string) => fragmentString + match);\n        }\n        break;\n\n      default:\n        // TODO(Tarek): I think this usage should be deprecated.\n\n        // inject code after key, leaving key in place\n        source = source.replace(key, (match: string) => match + fragmentString);\n    }\n  }\n\n  // Remove if it hasn't already been replaced\n  source = source.replace(DECLARATION_INJECT_MARKER, '');\n\n  // Finally, if requested, insert an automatic module injector chunk\n  if (injectStandardStubs) {\n    source = source.replace(/\\}\\s*$/, (match: string) => match + MODULE_INJECTORS[stage]);\n  }\n\n  return source;\n}\n\n// Takes an array of inject objects and combines them into one\nexport function combineInjects(injects: any[]): Record<string, string> {\n  const result: Record<string, string> = {};\n  assert(Array.isArray(injects) && injects.length > 1);\n  injects.forEach((inject) => {\n    for (const key in inject) {\n      result[key] = result[key] ? `${result[key]}\\n${inject[key]}` : inject[key];\n    }\n  });\n  return result;\n}\n"],"mappings":"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"}