import { assert } from "../utils/assert.js";
const DEFAULT_PROP_VALIDATORS = {
  number: {
    type: 'number',
    validate(value, propType) {
      return Number.isFinite(value) && typeof propType === 'object' && (propType.max === undefined || value <= propType.max) && (propType.min === undefined || value >= propType.min);
    }
  },
  array: {
    type: 'array',
    validate(value, propType) {
      return Array.isArray(value) || ArrayBuffer.isView(value);
    }
  }
};
export function makePropValidators(propTypes) {
  const propValidators = {};
  for (const [name, propType] of Object.entries(propTypes)) {
    propValidators[name] = makePropValidator(propType);
  }
  return propValidators;
}
export function getValidatedProperties(properties, propValidators, errorMessage) {
  const validated = {};
  for (const [key, propsValidator] of Object.entries(propValidators)) {
    if (properties && key in properties && !propsValidator.private) {
      if (propsValidator.validate) {
        assert(propsValidator.validate(properties[key], propsValidator), `${errorMessage}: invalid ${key}`);
      }
      validated[key] = properties[key];
    } else {
      validated[key] = propsValidator.value;
    }
  }
  return validated;
}
function makePropValidator(propType) {
  let type = getTypeOf(propType);
  if (type !== 'object') {
    return {
      value: propType,
      ...DEFAULT_PROP_VALIDATORS[type],
      type
    };
  }
  if (typeof propType === 'object') {
    if (!propType) {
      return {
        type: 'object',
        value: null
      };
    }
    if (propType.type !== undefined) {
      return {
        ...propType,
        ...DEFAULT_PROP_VALIDATORS[propType.type],
        type: propType.type
      };
    }
    if (propType.value === undefined) {
      return {
        type: 'object',
        value: propType
      };
    }
    type = getTypeOf(propType.value);
    return {
      ...propType,
      ...DEFAULT_PROP_VALIDATORS[type],
      type
    };
  }
  throw new Error('props');
}
function getTypeOf(value) {
  if (Array.isArray(value) || ArrayBuffer.isView(value)) {
    return 'array';
  }
  return typeof value;
}
//# sourceMappingURL=prop-types.js.map