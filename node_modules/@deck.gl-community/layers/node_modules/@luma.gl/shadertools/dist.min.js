(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object')
    module.exports = factory();
  else if (typeof define === 'function' && define.amd) define([], factory);
        else if (typeof exports === 'object') exports['luma'] = factory();
  else root['luma'] = factory();})(globalThis, function () {
"use strict";var __exports__=(()=>{var ln=Object.defineProperty;var Ro=Object.getOwnPropertyDescriptor;var ko=Object.getOwnPropertyNames;var Mo=Object.prototype.hasOwnProperty;var Uo=(e,n)=>{for(var t in n)ln(e,t,{get:n[t],enumerable:!0})},Do=(e,n,t,r)=>{if(n&&typeof n=="object"||typeof n=="function")for(let i of ko(n))!Mo.call(e,i)&&i!==t&&ln(e,i,{get:()=>n[i],enumerable:!(r=Ro(n,i))||r.enumerable});return e};var zo=e=>Do(ln({},"__esModule",{value:!0}),e);var Xc={};Uo(Xc,{ShaderAssembler:()=>dn,ShaderModuleInstance:()=>Z,_ShaderModuleInstance:()=>Z,_getDependencyGraph:()=>De,_resolveModules:()=>Ue,_warp:()=>ve,assembleShaders:()=>Be,brightnessContrast:()=>ti,bulgePinch:()=>Ri,capitalize:()=>oe,colorHalftone:()=>yi,combineInjects:()=>Zn,convertToVec4:()=>hn,denoise:()=>ii,dirlight:()=>An,dirlight1:()=>Lo,dotScreen:()=>Si,edgeWork:()=>Pi,fp32:()=>Pr,fp64:()=>Gi,fp64arithmetic:()=>wn,fxaa:()=>Ui,generateShaderForModule:()=>Zt,geometry1:()=>Wi,getPassthroughFS:()=>Xt,getQualifierDetails:()=>Vt,getShaderInfo:()=>ze,getShaderLayoutFromWGSL:()=>Ar,glsl:()=>v,gouraudLighting:()=>wo,gouraudMaterial:()=>Sn,hexagonalPixelate:()=>wi,hueSaturation:()=>ai,ink:()=>Ti,lighting:()=>W,lights1:()=>fe,magnify:()=>Oi,noise:()=>li,normalizeShaderModule:()=>Dt,pbr:()=>Fo,pbrMaterial:()=>ei,phongLighting:()=>Io,phongMaterial:()=>Ln,picking:()=>Tr,project1:()=>nn,random:()=>K,sepia:()=>fi,swirl:()=>Mi,tiltShift:()=>mi,triangleBlur:()=>vi,typeToChannelCount:()=>qt,typeToChannelSuffix:()=>Wt,vibrance:()=>_i,vignette:()=>di,zoomBlur:()=>bi});var v=function(n){return"".concat(n)};function V(e,n){if(!e)throw new Error(n||"shadertools: assertion failed.")}function Dn(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),t.push.apply(t,r)}return t}function ee(e){for(var n=1;n<arguments.length;n++){var t=arguments[n]!=null?arguments[n]:{};n%2?Dn(Object(t),!0).forEach(function(r){Bo(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Dn(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function Bo(e,n,t){return n=jo(n),n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function jo(e){var n=Go(e,"string");return ne(n)==="symbol"?n:String(n)}function Go(e,n){if(ne(e)!=="object"||e===null)return e;var t=e[Symbol.toPrimitive];if(t!==void 0){var r=t.call(e,n||"default");if(ne(r)!=="object")return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return(n==="string"?String:Number)(e)}function jn(e,n){return Wo(e)||Xo(e,n)||Vo(e,n)||Ho()}function Ho(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Vo(e,n){if(e){if(typeof e=="string")return zn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor&&(t=e.constructor.name),t==="Map"||t==="Set")return Array.from(e);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return zn(e,n)}}function zn(e,n){(n==null||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Xo(e,n){var t=e==null?null:typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(t!=null){var r,i,o,a,s=[],l=!0,f=!1;try{if(o=(t=t.call(e)).next,n===0){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(p){f=!0,i=p}finally{try{if(!l&&t.return!=null&&(a=t.return(),Object(a)!==a))return}finally{if(f)throw i}}return s}}function Wo(e){if(Array.isArray(e))return e}function ne(e){return ne=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(n){return typeof n}:function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},ne(e)}var cn={number:{type:"number",validate:function(n,t){return Number.isFinite(n)&&ne(t)==="object"&&(t.max===void 0||n<=t.max)&&(t.min===void 0||n>=t.min)}},array:{type:"array",validate:function(n,t){return Array.isArray(n)||ArrayBuffer.isView(n)}}};function Gn(e){for(var n={},t=0,r=Object.entries(e);t<r.length;t++){var i=jn(r[t],2),o=i[0],a=i[1];n[o]=qo(a)}return n}function Hn(e,n,t){for(var r={},i=0,o=Object.entries(n);i<o.length;i++){var a=jn(o[i],2),s=a[0],l=a[1];e&&s in e&&!l.private?(l.validate&&V(l.validate(e[s],l),"".concat(t,": invalid ").concat(s)),r[s]=e[s]):r[s]=l.value}return r}function qo(e){var n=Bn(e);if(n!=="object")return ee(ee({value:e},cn[n]),{},{type:n});if(ne(e)==="object")return e?e.type!==void 0?ee(ee(ee({},e),cn[e.type]),{},{type:e.type}):e.value===void 0?{type:"object",value:e}:(n=Bn(e.value),ee(ee(ee({},e),cn[n]),{},{type:n})):{type:"object",value:null};throw new Error("props")}function Bn(e){return Array.isArray(e)||ArrayBuffer.isView(e)?"array":ne(e)}var Vn,Xn;function Wn(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var qn=v(Vn||(Vn=Wn([`#ifdef MODULE_LOGDEPTH
  logdepth_adjustPosition(gl_Position);
#endif
`],[`\\
#ifdef MODULE_LOGDEPTH
  logdepth_adjustPosition(gl_Position);
#endif
`]))),Yn=v(Xn||(Xn=Wn([`#ifdef MODULE_MATERIAL
  gl_FragColor = material_filterColor(gl_FragColor);
#endif

#ifdef MODULE_LIGHTING
  gl_FragColor = lighting_filterColor(gl_FragColor);
#endif

#ifdef MODULE_FOG
  gl_FragColor = fog_filterColor(gl_FragColor);
#endif

#ifdef MODULE_PICKING
  gl_FragColor = picking_filterHighlightColor(gl_FragColor);
  gl_FragColor = picking_filterPickingColor(gl_FragColor);
#endif

#ifdef MODULE_LOGDEPTH
  logdepth_setFragDepth();
#endif
`],[`\\
#ifdef MODULE_MATERIAL
  gl_FragColor = material_filterColor(gl_FragColor);
#endif

#ifdef MODULE_LIGHTING
  gl_FragColor = lighting_filterColor(gl_FragColor);
#endif

#ifdef MODULE_FOG
  gl_FragColor = fog_filterColor(gl_FragColor);
#endif

#ifdef MODULE_PICKING
  gl_FragColor = picking_filterHighlightColor(gl_FragColor);
  gl_FragColor = picking_filterPickingColor(gl_FragColor);
#endif

#ifdef MODULE_LOGDEPTH
  logdepth_setFragDepth();
#endif
`])));var Yo={vertex:qn,fragment:Yn},Qn=/void\s+main\s*\([^)]*\)\s*\{\n?/,Kn=/}\n?[^{}]*$/,fn=[],Ae="__LUMA_INJECT_DECLARATIONS__";function $n(e){var n={vertex:{},fragment:{}};for(var t in e){var r=e[t],i=Qo(t);typeof r=="string"&&(r={order:0,injection:r}),n[i][t]=r}return n}function Qo(e){var n=e.slice(0,2);switch(n){case"vs":return"vertex";case"fs":return"fragment";default:throw new Error(n)}}function Se(e,n,t){var r=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!1,i=n==="vertex",o=function(){var l=t[a];l.sort(function(h,g){return h.order-g.order}),fn.length=l.length;for(var f=0,p=l.length;f<p;++f)fn[f]=l[f].injection;var d="".concat(fn.join(`
`),`
`);switch(a){case"vs:#decl":i&&(e=e.replace(Ae,d));break;case"vs:#main-start":i&&(e=e.replace(Qn,function(h){return h+d}));break;case"vs:#main-end":i&&(e=e.replace(Kn,function(h){return d+h}));break;case"fs:#decl":i||(e=e.replace(Ae,d));break;case"fs:#main-start":i||(e=e.replace(Qn,function(h){return h+d}));break;case"fs:#main-end":i||(e=e.replace(Kn,function(h){return d+h}));break;default:e=e.replace(a,function(h){return h+d})}};for(var a in t)o();return e=e.replace(Ae,""),r&&(e=e.replace(/\}\s*$/,function(s){return s+Yo[n]})),e}function Zn(e){var n={};return V(Array.isArray(e)&&e.length>1),e.forEach(function(t){for(var r in t)n[r]=n[r]?"".concat(n[r],`
`).concat(t[r]):t[r]}),n}function Le(e){return Le=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(n){return typeof n}:function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Le(e)}function Jn(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,$o(r.key),r)}}function Ko(e,n,t){return n&&Jn(e.prototype,n),t&&Jn(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function $o(e){var n=Zo(e,"string");return Le(n)==="symbol"?n:String(n)}function Zo(e,n){if(Le(e)!=="object"||e===null)return e;var t=e[Symbol.toPrimitive];if(t!==void 0){var r=t.call(e,n||"default");if(Le(r)!=="object")return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return(n==="string"?String:Number)(e)}function Jo(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var ea=1,Z=function(){e.instantiateModules=function(r){return r.map(function(i){if(i instanceof e)return i;V(typeof i!="string","Shader module use by name is deprecated. Import shader module '".concat(JSON.stringify(i),"' and use it directly.")),i.name||(console.warn("shader module has no name"),i.name="shader-module-".concat(ea++));var o=new e(i);return o.dependencies=e.instantiateModules(i.dependencies||[]),o})};function e(t){Jo(this,e),this.name=void 0,this.vs=void 0,this.fs=void 0,this.getModuleUniforms=void 0,this.dependencies=void 0,this.deprecations=void 0,this.defines=void 0,this.injections=void 0,this.uniforms={},this.uniformTypes={};var r=t.name,i=t.vs,o=t.fs,a=t.dependencies,s=a===void 0?[]:a,l=t.uniformPropTypes,f=l===void 0?{}:l,p=t.getUniforms,d=t.deprecations,h=d===void 0?[]:d,g=t.defines,b=g===void 0?{}:g,A=t.inject,L=A===void 0?{}:A;V(typeof r=="string"),this.name=r,this.vs=i,this.fs=o,this.getModuleUniforms=p,this.dependencies=e.instantiateModules(s),this.deprecations=this._parseDeprecationDefinitions(h),this.defines=b,this.injections=$n(L),f&&(this.uniforms=Gn(f))}var n=e.prototype;return n.getModuleSource=function(r){var i;switch(r){case"vertex":i=this.vs||"";break;case"fragment":i=this.fs||"";break;default:V(!1)}var o=this.name.toUpperCase().replace(/[^0-9a-z]/gi,"_");return"// ----- MODULE ".concat(this.name,` ---------------

#define MODULE_`).concat(o,`
`).concat(i,`

`)},n.getUniforms=function(r,i){return this.getModuleUniforms?this.getModuleUniforms(r,i):Hn(r,this.uniforms,this.name)},n.getDefines=function(){return this.defines},n.checkDeprecations=function(r,i){this.deprecations.forEach(function(o){var a;(a=o.regex)!==null&&a!==void 0&&a.test(r)&&(o.deprecated?i.deprecated(o.old,o.new)():i.removed(o.old,o.new)())})},n._parseDeprecationDefinitions=function(r){return r.forEach(function(i){switch(i.type){case"function":i.regex=new RegExp("\\b".concat(i.old,"\\("));break;default:i.regex=new RegExp("".concat(i.type," ").concat(i.old,";"))}}),r},n._defaultGetUniforms=function(){var r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},i={},o=this.uniforms;for(var a in o){var s=o[a];a in r&&!s.private?(s.validate&&V(s.validate(r[a],s),"".concat(this.name,": invalid ").concat(a)),i[a]=r[a]):i[a]=s.value}return i},Ko(e)}();function et(e,n){var t=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=na(e))||n&&e&&typeof e.length=="number"){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(f){throw f},f:i}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var o=!0,a=!1,s;return{s:function(){t=t.call(e)},n:function(){var f=t.next();return o=f.done,f},e:function(f){a=!0,s=f},f:function(){try{!o&&t.return!=null&&t.return()}finally{if(a)throw s}}}}function na(e,n){if(e){if(typeof e=="string")return nt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor&&(t=e.constructor.name),t==="Map"||t==="Set")return Array.from(e);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return nt(e,n)}}function nt(e,n){(n==null||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ue(e){var n=Z.instantiateModules(e);return ta(n)}function ta(e){var n={},t={};return De({modules:e,level:0,moduleMap:n,moduleDepth:t}),Object.keys(t).sort(function(r,i){return t[i]-t[r]}).map(function(r){return n[r]})}function De(e){var n=e.modules,t=e.level,r=e.moduleMap,i=e.moduleDepth;if(t>=5)throw new Error("Possible loop in shader dependency graph");var o=et(n),a;try{for(o.s();!(a=o.n()).done;){var s=a.value;r[s.name]=s,(i[s.name]===void 0||i[s.name]<t)&&(i[s.name]=t)}}catch(d){o.e(d)}finally{o.f()}var l=et(n),f;try{for(l.s();!(f=l.n()).done;){var p=f.value;p.dependencies&&De({modules:p.dependencies,level:t+1,moduleMap:r,moduleDepth:i})}}catch(d){l.e(d)}finally{l.f()}}var tt,rt,it,ot,at,st,lt,ct,ft,ut;function q(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}function _t(e){switch(e?.gpu.toLowerCase()){case"apple":return v(tt||(tt=q([`#define APPLE_GPU
// Apple optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`],[`\\
#define APPLE_GPU
// Apple optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`])));case"nvidia":return v(rt||(rt=q([`#define NVIDIA_GPU
// Nvidia optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
`],[`\\
#define NVIDIA_GPU
// Nvidia optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
`])));case"intel":return v(it||(it=q([`#define INTEL_GPU
// Intel optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
// Intel's built-in 'tan' function doesn't have acceptable precision
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`],[`\\
#define INTEL_GPU
// Intel optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
// Intel's built-in 'tan' function doesn't have acceptable precision
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`])));case"amd":return v(ot||(ot=q([`#define AMD_GPU
`],[`\\
#define AMD_GPU
`])));default:return v(at||(at=q([`#define DEFAULT_GPU
// Prevent driver from optimizing away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
// Headless Chrome's software shader 'tan' function doesn't have acceptable precision
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// If the GPU doesn't have full 32 bits precision, will causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`],[`\\
#define DEFAULT_GPU
// Prevent driver from optimizing away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
// Headless Chrome's software shader 'tan' function doesn't have acceptable precision
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// If the GPU doesn't have full 32 bits precision, will causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`])))}}function pt(e){var n="";return e.features.has("webgl2")&&(n+=v(st||(st=q([`# define FEATURE_GLSL_DERIVATIVES
# define FEATURE_GLSL_DRAW_BUFFERS
# define FEATURE_GLSL_FRAG_DEPTH
# define FEATURE_GLSL_TEXTURE_LOD
`],[`\\
# define FEATURE_GLSL_DERIVATIVES
# define FEATURE_GLSL_DRAW_BUFFERS
# define FEATURE_GLSL_FRAG_DEPTH
# define FEATURE_GLSL_TEXTURE_LOD
`])))),e.features.has("webgl2")||(e.features.has("glsl-frag-depth")&&(n+=v(lt||(lt=q([`
// FEATURE_GLSL_FRAG_DEPTH => gl_FragDepth is available
#ifdef GL_EXT_frag_depth
# extension GL_EXT_frag_depth : enable
# define FEATURE_GLSL_FRAG_DEPTH
# define FRAG_DEPTH
# define gl_FragDepth gl_FragDepthEXT
#endif
`],[`\\

// FEATURE_GLSL_FRAG_DEPTH => gl_FragDepth is available
#ifdef GL_EXT_frag_depth
# extension GL_EXT_frag_depth : enable
# define FEATURE_GLSL_FRAG_DEPTH
# define FRAG_DEPTH
# define gl_FragDepth gl_FragDepthEXT
#endif
`])))),e!=null&&e.features.has("glsl-derivatives")&&(n+=v(ct||(ct=q([`
// FEATURE_GLSL_DERIVATIVES => dxdF, dxdY and fwidth are available
#if defined(GL_OES_standard_derivatives) || defined(FEATURE_GLSL_DERIVATIVES)
# extension GL_OES_standard_derivatives : enable
# define FEATURE_GLSL_DERIVATIVES
#endif
`],[`\\

// FEATURE_GLSL_DERIVATIVES => dxdF, dxdY and fwidth are available
#if defined(GL_OES_standard_derivatives) || defined(FEATURE_GLSL_DERIVATIVES)
# extension GL_OES_standard_derivatives : enable
# define FEATURE_GLSL_DERIVATIVES
#endif
`])))),e!=null&&e.features.has("glsl-frag-data")&&(n+=v(ft||(ft=q([`
// FEATURE_GLSL_DRAW_BUFFERS => gl_FragData[] is available
#ifdef GL_EXT_draw_buffers
# extension GL_EXT_draw_buffers : require
# define FEATURE_GLSL_DRAW_BUFFERS
#endif
`],[`\\

// FEATURE_GLSL_DRAW_BUFFERS => gl_FragData[] is available
#ifdef GL_EXT_draw_buffers
# extension GL_EXT_draw_buffers : require
# define FEATURE_GLSL_DRAW_BUFFERS
#endif
`])))),e!=null&&e.features.has("glsl-texture-lod")&&(n+=v(ut||(ut=q([`// TEXTURE_LOD => texture2DLod etc are available
#ifdef GL_EXT_shader_texture_lod
# extension GL_EXT_shader_texture_lod : enable
# define FEATURE_GLSL_TEXTURE_LOD
# define TEXTURE_LOD
#endif
`],[`\\
// TEXTURE_LOD => texture2DLod etc are available
#ifdef GL_EXT_shader_texture_lod
# extension GL_EXT_shader_texture_lod : enable
# define FEATURE_GLSL_TEXTURE_LOD
# define TEXTURE_LOD
#endif
`]))))),n}function ra(e,n){return aa(e)||oa(e,n)||mt(e,n)||ia()}function ia(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function oa(e,n){var t=e==null?null:typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(t!=null){var r,i,o,a,s=[],l=!0,f=!1;try{if(o=(t=t.call(e)).next,n===0){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(p){f=!0,i=p}finally{try{if(!l&&t.return!=null&&(a=t.return(),Object(a)!==a))return}finally{if(f)throw i}}return s}}function aa(e){if(Array.isArray(e))return e}function sa(e,n){var t=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=mt(e))||n&&e&&typeof e.length=="number"){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(f){throw f},f:i}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var o=!0,a=!1,s;return{s:function(){t=t.call(e)},n:function(){var f=t.next();return o=f.done,f},e:function(f){a=!0,s=f},f:function(){try{!o&&t.return!=null&&t.return()}finally{if(a)throw s}}}}function mt(e,n){if(e){if(typeof e=="string")return dt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor&&(t=e.constructor.name),t==="Map"||t==="Set")return Array.from(e);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return dt(e,n)}}function dt(e,n){(n==null||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function gt(e,n,t){var r,i=Number(((r=e.match(/^#version[ \t]+(\d+)/m))===null||r===void 0?void 0:r[1])||100);if(i!==300)throw new Error("luma.gl v9 only supports GLSL 3.00 shader sources");switch(n){case 300:switch(t){case"vertex":return e=Pe(e,la),e;case"fragment":return e=Pe(e,ca),e;default:throw new Error(t)}case 100:switch(t){case"vertex":return e=Pe(e,fa),e;case"fragment":return e=Pe(e,xt),e=_a(e),e;default:throw new Error(t)}default:throw new Error(String(n))}}var vt=[[/^(#version[ \t]+(100|300[ \t]+es))?[ \t]*\n/,`#version 300 es
`],[/\btexture(2D|2DProj|Cube)Lod(EXT)?\(/g,"textureLod("],[/\btexture(2D|2DProj|Cube)(EXT)?\(/g,"texture("]],la=[].concat(vt,[[pe("attribute"),"in $1"],[pe("varying"),"out $1"]]),ca=[].concat(vt,[[pe("varying"),"in $1"]]),bt=[[/^#version[ \t]+300[ \t]+es/,"#version 100"],[/\btexture(2D|2DProj|Cube)Lod\(/g,"texture$1LodEXT("],[/\btexture\(/g,"texture2D("],[/\btextureLod\(/g,"texture2DLodEXT("]],fa=[].concat(bt,[[pe("in"),"attribute $1"],[pe("out"),"varying $1"]]),xt=[].concat(bt,[[pe("in"),"varying $1"]]),ua="gl_FragColor",ht=/\bout[ \t]+vec4[ \t]+(\w+)[ \t]*;\n?/;function Pe(e,n){var t=sa(n),r;try{for(t.s();!(r=t.n()).done;){var i=ra(r.value,2),o=i[0],a=i[1];e=e.replace(o,a)}}catch(s){t.e(s)}finally{t.f()}return e}function _a(e){e=Pe(e,xt);var n=ht.exec(e);if(n){var t=n[1];e=e.replace(ht,"").replace(new RegExp("\\b".concat(t,"\\b"),"g"),ua)}return e}function pe(e){return new RegExp("\\b".concat(e,"[ \\t]+(\\w+[ \\t]+\\w+(\\[\\w+\\])?;)"),"g")}function pa(e,n){return ma(e)||ha(e,n)||St(e,n)||da()}function da(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function ha(e,n){var t=e==null?null:typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(t!=null){var r,i,o,a,s=[],l=!0,f=!1;try{if(o=(t=t.call(e)).next,n===0){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(p){f=!0,i=p}finally{try{if(!l&&t.return!=null&&(a=t.return(),Object(a)!==a))return}finally{if(f)throw i}}return s}}function ma(e){if(Array.isArray(e))return e}function At(e,n){var t=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=St(e))||n&&e&&typeof e.length=="number"){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(f){throw f},f:i}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var o=!0,a=!1,s;return{s:function(){t=t.call(e)},n:function(){var f=t.next();return o=f.done,f},e:function(f){a=!0,s=f},f:function(){try{!o&&t.return!=null&&t.return()}finally{if(a)throw s}}}}function St(e,n){if(e){if(typeof e=="string")return yt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor&&(t=e.constructor.name),t==="Map"||t==="Set")return Array.from(e);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return yt(e,n)}}function yt(e,n){(n==null||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function un(e,n){var t="";for(var r in e){var i=e[r];if(t+="void ".concat(i.signature,` {
`),i.header&&(t+="  ".concat(i.header)),n[r]){var o=n[r];o.sort(function(f,p){return f.order-p.order});var a=At(o),s;try{for(a.s();!(s=a.n()).done;){var l=s.value;t+="  ".concat(l.injection,`
`)}}catch(f){a.e(f)}finally{a.f()}}i.footer&&(t+="  ".concat(i.footer)),t+=`}
`}return t}function _n(e){var n={vertex:{},fragment:{}},t=At(e),r;try{for(t.s();!(r=t.n()).done;){var i=r.value,o=void 0,a=void 0;typeof i!="string"?(o=i,a=o.hook):(o={},a=i),a=a.trim();var s=a.split(":"),l=pa(s,2),f=l[0],p=l[1],d=a.replace(/\(.+/,""),h=Object.assign(o,{signature:p});switch(f){case"vs":n.vertex[d]=h;break;case"fs":n.fragment[d]=h;break;default:throw new Error(f)}}}catch(g){t.e(g)}finally{t.f()}return n}function ze(e,n){return{name:ga(e,n),language:"glsl",version:va(e)}}function ga(e){var n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"unnamed",t=/#define[^\S\r\n]*SHADER_NAME[^\S\r\n]*([A-Za-z0-9_-]+)\s*/,r=t.exec(e);return r?r[1]:n}function va(e){var n=100,t=e.match(/[^\s]+/g);if(t&&t.length>=2&&t[0]==="#version"){var r=parseInt(t[1],10);Number.isFinite(r)&&(n=r)}if(n!==100&&n!==300)throw new Error("Invalid GLSL version ".concat(n));return n}function Ee(e){return Ee=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(n){return typeof n}:function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Ee(e)}var Lt;function pn(e,n){var t=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=ba(e))||n&&e&&typeof e.length=="number"){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(f){throw f},f:i}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var o=!0,a=!1,s;return{s:function(){t=t.call(e)},n:function(){var f=t.next();return o=f.done,f},e:function(f){a=!0,s=f},f:function(){try{!o&&t.return!=null&&t.return()}finally{if(a)throw s}}}}function ba(e,n){if(e){if(typeof e=="string")return Pt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor&&(t=e.constructor.name),t==="Map"||t==="Set")return Array.from(e);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return Pt(e,n)}}function Pt(e,n){(n==null||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Et(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),t.push.apply(t,r)}return t}function te(e){for(var n=1;n<arguments.length;n++){var t=arguments[n]!=null?arguments[n]:{};n%2?Et(Object(t),!0).forEach(function(r){xa(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Et(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function xa(e,n,t){return n=ya(n),n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ya(e){var n=Aa(e,"string");return Ee(n)==="symbol"?n:String(n)}function Aa(e,n){if(Ee(e)!=="object"||e===null)return e;var t=e[Symbol.toPrimitive];if(t!==void 0){var r=t.call(e,n||"default");if(Ee(r)!=="object")return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return(n==="string"?String:Number)(e)}function Sa(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Nt=`

`.concat(Ae,`
`),La=v(Lt||(Lt=Sa([`precision highp float;
`],[`\\
precision highp float;
`])));function Be(e){var n=e.vs,t=e.fs,r=Ue(e.modules||[]);switch(e.platformInfo.shaderLanguage){case"glsl":return{vs:It(e.platformInfo,te(te({},e),{},{source:n,stage:"vertex",modules:r})),fs:It(e.platformInfo,te(te({},e),{},{source:t,stage:"fragment",modules:r})),getUniforms:Tt(r)};case"wgsl":return{vs:wt(e.platformInfo,te(te({},e),{},{source:n,stage:"vertex",modules:r})),fs:wt(e.platformInfo,te(te({},e),{},{source:t,stage:"fragment",modules:r})),getUniforms:Tt(r)}}}function wt(e,n){var t=n.source,r=n.stage,i=n.modules,o=n.hookFunctions,a=o===void 0?[]:o,s=n.inject,l=s===void 0?{}:s,f=n.log;V(typeof t=="string","shader source must be a string");var p=t,d="",h=_n(a),g={},b={},A={};for(var L in l){var E=typeof l[L]=="string"?{injection:l[L],order:0}:l[L],T=/^(v|f)s:(#)?([\w-]+)$/.exec(L);if(T){var w=T[2],I=T[3];w?I==="decl"?b[L]=[E]:A[L]=[E]:g[L]=[E]}else A[L]=[E]}var S=e.type!=="webgpu"?i:[],P=pn(S),F;try{for(P.s();!(F=P.n()).done;){var k=F.value;f&&k.checkDeprecations(p,f);var D=k.getModuleSource(r,"wgsl");d+=D;var M=k.injections[r];for(var R in M){var U=/^(v|f)s:#([\w-]+)$/.exec(R);if(U){var B=U[2],C=B==="decl"?b:A;C[R]=C[R]||[],C[R].push(M[R])}else g[R]=g[R]||[],g[R].push(M[R])}}}catch(X){P.e(X)}finally{P.f()}return d+=Nt,d=Se(d,r,b),d+=un(h[r],g),d+=p,d=Se(d,r,A),d}function It(e,n){var t=n.id,r=n.source,i=n.stage,o=n.language,a=o===void 0?"glsl":o,s=n.modules,l=n.defines,f=l===void 0?{}:l,p=n.hookFunctions,d=p===void 0?[]:p,h=n.inject,g=h===void 0?{}:h,b=n.prologue,A=b===void 0?!0:b,L=n.log;V(typeof r=="string","shader source must be a string");var E=a==="glsl"?ze(r).version:-1,T=e.shaderLanguageVersion,w=E===100?"#version 100":"#version 300 es",I=r.split(`
`),S=I.slice(1).join(`
`),P={};s.forEach(function(sn){Object.assign(P,sn.getDefines())}),Object.assign(P,f);var F="";switch(a){case"wgsl":break;case"glsl":F=A?"".concat(w,`

// ----- PROLOGUE -------------------------
`).concat(Pa({id:t,source:r,stage:i}),`
`,"#define SHADER_TYPE_".concat(i.toUpperCase()),`
`).concat(_t(e),`
`).concat(pt(e),`
`).concat(i==="fragment"?La:"",`

// ----- APPLICATION DEFINES -------------------------

`).concat(Ea(P),`

`):"".concat(w,`
`);break}var k=_n(d),D={},M={},R={};for(var U in g){var B=typeof g[U]=="string"?{injection:g[U],order:0}:g[U],C=/^(v|f)s:(#)?([\w-]+)$/.exec(U);if(C){var X=C[2],tn=C[3];X?tn==="decl"?M[U]=[B]:R[U]=[B]:D[U]=[B]}else R[U]=[B]}var ue=pn(s),Me;try{for(ue.s();!(Me=ue.n()).done;){var xe=Me.value;L&&xe.checkDeprecations(S,L);var rn=xe.getModuleSource(i);F+=rn;var ye=xe.injections[i];for(var H in ye){var _e=/^(v|f)s:#([\w-]+)$/.exec(H);if(_e){var on=_e[2],an=on==="decl"?M:R;an[H]=an[H]||[],an[H].push(ye[H])}else D[H]=D[H]||[],D[H].push(ye[H])}}}catch(sn){ue.e(sn)}finally{ue.f()}return F+="// ----- MAIN SHADER SOURCE -------------------------",F+=Nt,F=Se(F,i,M),F+=un(k[i],D),F+=S,F=Se(F,i,R),a==="glsl"&&E!==T&&(F=gt(F,T,i)),F.trim()}function Tt(e){return function(t){var r={},i=pn(e),o;try{for(i.s();!(o=i.n()).done;){var a=o.value,s=a.getUniforms(t,r);Object.assign(r,s)}}catch(l){i.e(l)}finally{i.f()}return r}}function Pa(e){var n=e.id,t=e.source,r=e.stage,i=n&&t.indexOf("SHADER_NAME")===-1;return i?`
#define SHADER_NAME `.concat(n,"_").concat(r,`

`):""}function Ea(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},n="";for(var t in e){var r=e[t];(r||Number.isFinite(r))&&(n+="#define ".concat(t.toUpperCase()," ").concat(e[t],`
`))}return n}function we(e){return we=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(n){return typeof n}:function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},we(e)}function Ot(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),t.push.apply(t,r)}return t}function Ct(e){for(var n=1;n<arguments.length;n++){var t=arguments[n]!=null?arguments[n]:{};n%2?Ot(Object(t),!0).forEach(function(r){wa(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ot(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function wa(e,n,t){return n=Ia(n),n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ia(e){var n=Ta(e,"string");return we(n)==="symbol"?n:String(n)}function Ta(e,n){if(we(e)!=="object"||e===null)return e;var t=e[Symbol.toPrimitive];if(t!==void 0){var r=t.call(e,n||"default");if(we(r)!=="object")return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return(n==="string"?String:Number)(e)}function Rt(e){if(!e.vs)throw new Error("no vertex shader");var n=Ft(e.platformInfo,e.vs),t;return e.fs&&(t=Ft(e.platformInfo,e.fs)),Ct(Ct({},e),{},{vs:n,fs:t})}function Ft(e,n){if(typeof n=="string")return n;switch(e.type){case"webgpu":if(n!=null&&n.wgsl)return n.wgsl;throw new Error("WebGPU does not support GLSL shaders");default:if(n!=null&&n.glsl)return n.glsl;throw new Error("WebGL does not support WGSL shaders")}}function Ie(e){return Ie=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(n){return typeof n}:function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Ie(e)}function kt(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),t.push.apply(t,r)}return t}function je(e){for(var n=1;n<arguments.length;n++){var t=arguments[n]!=null?arguments[n]:{};n%2?kt(Object(t),!0).forEach(function(r){Na(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):kt(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function Na(e,n,t){return n=Ut(n),n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Mt(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Ut(r.key),r)}}function Oa(e,n,t){return n&&Mt(e.prototype,n),t&&Mt(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function Ut(e){var n=Ca(e,"string");return Ie(n)==="symbol"?n:String(n)}function Ca(e,n){if(Ie(e)!=="object"||e===null)return e;var t=e[Symbol.toPrimitive];if(t!==void 0){var r=t.call(e,n||"default");if(Ie(r)!=="object")return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return(n==="string"?String:Number)(e)}function Fa(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var dn=function(){function e(){Fa(this,e),this._hookFunctions=[],this._defaultModules=[]}e.getDefaultShaderAssembler=function(){return e.defaultShaderAssembler=e.defaultShaderAssembler||new e,e.defaultShaderAssembler};var n=e.prototype;return n.addDefaultModule=function(r){this._defaultModules.find(function(i){return i.name===(typeof r=="string"?r:r.name)})||this._defaultModules.push(r)},n.removeDefaultModule=function(r){var i=typeof r=="string"?r:r.name;this._defaultModules=this._defaultModules.filter(function(o){return o.name!==i})},n.addShaderHook=function(r,i){i&&(r=Object.assign(i,{hook:r})),this._hookFunctions.push(r)},n.assembleShaders=function(r){var i=this._getModuleList(r.modules),o=this._hookFunctions,a=Rt(r),s=Be(je(je({platformInfo:r.platformInfo},a),{},{modules:i,hookFunctions:o}));return je(je({},s),{},{modules:i})},n._getModuleList=function(){for(var r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],i=new Array(this._defaultModules.length+r.length),o={},a=0,s=0,l=this._defaultModules.length;s<l;++s){var f=this._defaultModules[s],p=f.name;i[a++]=f,o[p]=!0}for(var d=0,h=r.length;d<h;++d){var g=r[d],b=g.name;o[b]||(i[a++]=g,o[b]=!0)}return i.length=a,Z.instantiateModules(i)},Oa(e)}();dn.defaultShaderAssembler=void 0;function Dt(e){if(!e.normalized&&(e.normalized=!0,e.uniformPropTypes&&!e.getUniforms)){var n=new Z(e);e.getUniforms=n.getUniforms.bind(n)}return e}var zt,Bt;function Ra(e,n){return Da(e)||Ua(e,n)||Ma(e,n)||ka()}function ka(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Ma(e,n){if(e){if(typeof e=="string")return jt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor&&(t=e.constructor.name),t==="Map"||t==="Set")return Array.from(e);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return jt(e,n)}}function jt(e,n){(n==null||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ua(e,n){var t=e==null?null:typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(t!=null){var r,i,o,a,s=[],l=!0,f=!1;try{if(o=(t=t.call(e)).next,n===0){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(p){f=!0,i=p}finally{try{if(!l&&t.return!=null&&(a=t.return(),Object(a)!==a))return}finally{if(f)throw i}}return s}}function Da(e){if(Array.isArray(e))return e}function Gt(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var za=v(zt||(zt=Gt(["void main() {gl_FragColor = vec4(0);}"]))),Ht=v(Bt||(Bt=Gt([`out vec4 transform_output;
void main() {
  transform_output = vec4(0);
}`],[`\\
out vec4 transform_output;
void main() {
  transform_output = vec4(0);
}`]))),Ba=`#version 300 es
`.concat(Ht);function Vt(e,n){n=Array.isArray(n)?n:[n];var t=e.replace(/^\s+/,"").split(/\s+/),r=Ra(t,3),i=r[0],o=r[1],a=r[2];if(!n.includes(i)||!o||!a)return null;var s=a.split(";")[0];return{qualifier:i,type:o,name:s}}function Xt(e){var n=e||{},t=n.version,r=t===void 0?100:t,i=n.input,o=n.inputChannels,a=n.output;if(!i)return r===300?Ba:r>300?"#version ".concat(r,`
`).concat(Ht):za;if(!o)throw new Error("inputChannels");var s=ja(o),l=hn(i,o);return r>=300?"#version ".concat(r," ").concat(r===300?"es":"",`
in `).concat(s," ").concat(i,`;
out vec4 `).concat(a,`;
void main() {
  `).concat(a," = ").concat(l,`;
}`):"varying ".concat(s," ").concat(i,`;
void main() {
  gl_FragColor = `).concat(l,`;
}`)}function Wt(e){switch(e){case"float":return"x";case"vec2":return"xy";case"vec3":return"xyz";case"vec4":return"xyzw";default:throw new Error(e)}}function qt(e){switch(e){case"float":return 1;case"vec2":return 2;case"vec3":return 3;case"vec4":return 4;default:throw new Error(e)}}function ja(e){switch(e){case 1:return"float";case 2:return"vec2";case 3:return"vec3";case 4:return"vec4";default:throw new Error("invalid channels: ".concat(e))}}function hn(e,n){switch(n){case 1:return"vec4(".concat(e,", 0.0, 0.0, 1.0)");case 2:return"vec4(".concat(e,", 0.0, 1.0)");case 3:return"vec4(".concat(e,", 1.0)");case 4:return e;default:throw new Error("invalid channels: ".concat(n))}}function oe(e){return typeof e=="string"?e.charAt(0).toUpperCase()+e.slice(1):e}function Ga(e,n){return Wa(e)||Xa(e,n)||Va(e,n)||Ha()}function Ha(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Va(e,n){if(e){if(typeof e=="string")return Yt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor&&(t=e.constructor.name),t==="Map"||t==="Set")return Array.from(e);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return Yt(e,n)}}function Yt(e,n){(n==null||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Xa(e,n){var t=e==null?null:typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(t!=null){var r,i,o,a,s=[],l=!0,f=!1;try{if(o=(t=t.call(e)).next,n===0){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(p){f=!0,i=p}finally{try{if(!l&&t.return!=null&&(a=t.return(),Object(a)!==a))return}finally{if(f)throw i}}return s}}function Wa(e){if(Array.isArray(e))return e}function Qt(e,n){return qa(e,n)}function qa(e,n){var t=[];switch(n.uniforms){case"scoped-interface-blocks":case"unscoped-interface-blocks":t.push("uniform ".concat(oe(e.name)," {"));break;case"uniforms":}for(var r=0,i=Object.entries(e.uniformTypes||{});r<i.length;r++){var o=Ga(i[r],2),a=o[0],s=o[1],l=Ya(s);switch(n.uniforms){case"scoped-interface-blocks":t.push("  ".concat(l," ").concat(a,";"));break;case"unscoped-interface-blocks":t.push("  ".concat(l," ").concat(e.name,"_").concat(a,";"));break;case"uniforms":t.push("uniform ".concat(l," ").concat(e.name,"_").concat(a,";"))}}switch(n.uniforms){case"scoped-interface-blocks":t.push("} ".concat(e.name,";"));break;case"unscoped-interface-blocks":t.push("};");break;case"uniforms":}return t.push(""),t.join(`
`)}function Ya(e){var n={f32:"float",i32:"int",u32:"uint","vec2<f32>":"vec2","vec3<f32>":"vec3","vec4<f32>":"vec4","vec2<i32>":"ivec2","vec3<i32>":"ivec3","vec4<i32>":"ivec4","vec2<u32>":"uvec2","vec3<u32>":"uvec3","vec4<u32>":"uvec4","mat2x2<f32>":"mat2","mat2x3<f32>":"mat2x3","mat2x4<f32>":"mat2x4","mat3x2<f32>":"mat3x2","mat3x3<f32>":"mat3","mat3x4<f32>":"mat3x4","mat4x2<f32>":"mat4x2","mat4x3<f32>":"mat4x3","mat4x4<f32>":"mat4"},t=n[e];return t}function Qa(e,n){return Ja(e)||Za(e,n)||$a(e,n)||Ka()}function Ka(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function $a(e,n){if(e){if(typeof e=="string")return Kt(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor&&(t=e.constructor.name),t==="Map"||t==="Set")return Array.from(e);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return Kt(e,n)}}function Kt(e,n){(n==null||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Za(e,n){var t=e==null?null:typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(t!=null){var r,i,o,a,s=[],l=!0,f=!1;try{if(o=(t=t.call(e)).next,n===0){if(Object(t)!==t)return;l=!1}else for(;!(l=(r=o.call(t)).done)&&(s.push(r.value),s.length!==n);l=!0);}catch(p){f=!0,i=p}finally{try{if(!l&&t.return!=null&&(a=t.return(),Object(a)!==a))return}finally{if(f)throw i}}return s}}function Ja(e){if(Array.isArray(e))return e}function $t(e,n){return es(e,n)}function es(e,n){var t=[];t.push("struct ".concat(oe(e.name)," {"));for(var r=0,i=Object.entries(e?.uniformTypes||{});r<i.length;r++){var o=Qa(i[r],2),a=o[0],s=o[1],l=s;t.push("  ".concat(a," : ").concat(l,";"))}return t.push("};"),t.push("var<uniform> ".concat(e.name," : ").concat(oe(e.name),";")),t.join(`
`)}function Zt(e,n){switch(n.shaderLanguage){case"glsl":return Qt(e,n);case"wgsl":return $t(e,n)}}function me(e){return me=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(n){return typeof n}:function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},me(e)}function j(e,n){var t=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=ur(e))||n&&e&&typeof e.length=="number"){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(f){throw f},f:i}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var o=!0,a=!1,s;return{s:function(){t=t.call(e)},n:function(){var f=t.next();return o=f.done,f},e:function(f){a=!0,s=f},f:function(){try{!o&&t.return!=null&&t.return()}finally{if(a)throw s}}}}function ie(e){return rs(e)||ts(e)||ur(e)||ns()}function ns(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function ur(e,n){if(e){if(typeof e=="string")return gn(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor&&(t=e.constructor.name),t==="Map"||t==="Set")return Array.from(e);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return gn(e,n)}}function ts(e){if(typeof Symbol<"u"&&e[Symbol.iterator]!=null||e["@@iterator"]!=null)return Array.from(e)}function rs(e){if(Array.isArray(e))return gn(e)}function gn(e,n){(n==null||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function N(e,n){if(typeof n!="function"&&n!==null)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&vn(e,n)}function vn(e,n){return vn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(r,i){return r.__proto__=i,r},vn(e,n)}function O(e){var n=as();return function(){var r=Xe(e),i;if(n){var o=Xe(this).constructor;i=Reflect.construct(r,arguments,o)}else i=r.apply(this,arguments);return is(this,i)}}function is(e,n){if(n&&(me(n)==="object"||typeof n=="function"))return n;if(n!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return os(e)}function os(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function as(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}function Xe(e){return Xe=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Xe(e)}function Jt(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,ss(r.key),r)}}function x(e,n,t){return n&&Jt(e.prototype,n),t&&Jt(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function ss(e){var n=ls(e,"string");return me(n)==="symbol"?n:String(n)}function ls(e,n){if(me(e)!=="object"||e===null)return e;var t=e[Symbol.toPrimitive];if(t!==void 0){var r=t.call(e,n||"default");if(me(r)!=="object")return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return(n==="string"?String:Number)(e)}function y(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var cs=x(function e(){y(this,e),this.constants=new Map,this.aliases=new Map,this.structs=new Map}),se=function(){function e(){y(this,e)}var n=e.prototype;return n.evaluate=function(r){throw new Error("Cannot evaluate node")},n.evaluateString=function(r){return this.evaluate(r).toString()},x(e,[{key:"isAstNode",get:function(){return!0}},{key:"astNodeType",get:function(){return""}}]),e}(),z=function(e){N(t,e);var n=O(t);function t(){return y(this,t),n.call(this)}return x(t)}(se),_r=function(e){N(t,e);var n=O(t);function t(r,i,o,a){var s;return y(this,t),s=n.call(this),s.name=r,s.args=i,s.returnType=o,s.body=a,s}return x(t,[{key:"astNodeType",get:function(){return"function"}}]),t}(z),fs=function(e){N(t,e);var n=O(t);function t(r){var i;return y(this,t),i=n.call(this),i.expression=r,i}return x(t,[{key:"astNodeType",get:function(){return"staticAssert"}}]),t}(z),us=function(e){N(t,e);var n=O(t);function t(r,i){var o;return y(this,t),o=n.call(this),o.condition=r,o.body=i,o}return x(t,[{key:"astNodeType",get:function(){return"while"}}]),t}(z),_s=function(e){N(t,e);var n=O(t);function t(r){var i;return y(this,t),i=n.call(this),i.body=r,i}return x(t,[{key:"astNodeType",get:function(){return"continuing"}}]),t}(z),ps=function(e){N(t,e);var n=O(t);function t(r,i,o,a){var s;return y(this,t),s=n.call(this),s.init=r,s.condition=i,s.increment=o,s.body=a,s}return x(t,[{key:"astNodeType",get:function(){return"for"}}]),t}(z),de=function(e){N(t,e);var n=O(t);function t(r,i,o,a,s){var l;return y(this,t),l=n.call(this),l.name=r,l.type=i,l.storage=o,l.access=a,l.value=s,l}return x(t,[{key:"astNodeType",get:function(){return"var"}}]),t}(z),pr=function(e){N(t,e);var n=O(t);function t(r,i,o){var a;return y(this,t),a=n.call(this),a.name=r,a.type=i,a.value=o,a}return x(t,[{key:"astNodeType",get:function(){return"override"}}]),t}(z),er=function(e){N(t,e);var n=O(t);function t(r,i,o,a,s){var l;return y(this,t),l=n.call(this),l.name=r,l.type=i,l.storage=o,l.access=a,l.value=s,l}return x(t,[{key:"astNodeType",get:function(){return"let"}}]),t}(z),nr=function(e){N(t,e);var n=O(t);function t(i,o,a,s,l){var f;return y(this,t),f=n.call(this),f.name=i,f.type=o,f.storage=a,f.access=s,f.value=l,f}var r=t.prototype;return r.evaluate=function(o){return this.value.evaluate(o)},x(t,[{key:"astNodeType",get:function(){return"const"}}]),t}(z),ge;(function(e){e.increment="++",e.decrement="--"})(ge||(ge={}));(function(e){function n(t){var r=t;if(r=="parse")throw new Error("Invalid value for IncrementOperator");return e[r]}e.parse=n})(ge||(ge={}));var ds=function(e){N(t,e);var n=O(t);function t(r,i){var o;return y(this,t),o=n.call(this),o.operator=r,o.variable=i,o}return x(t,[{key:"astNodeType",get:function(){return"increment"}}]),t}(z),Oe;(function(e){e.assign="=",e.addAssign="+=",e.subtractAssin="-=",e.multiplyAssign="*=",e.divideAssign="/=",e.moduloAssign="%=",e.andAssign="&=",e.orAssign="|=",e.xorAssign="^=",e.shiftLeftAssign="<<=",e.shiftRightAssign=">>="})(Oe||(Oe={}));(function(e){function n(t){var r=t;if(r=="parse")throw new Error("Invalid value for AssignOperator");return e[r]}e.parse=n})(Oe||(Oe={}));var hs=function(e){N(t,e);var n=O(t);function t(r,i,o){var a;return y(this,t),a=n.call(this),a.operator=r,a.variable=i,a.value=o,a}return x(t,[{key:"astNodeType",get:function(){return"assign"}}]),t}(z),ms=function(e){N(t,e);var n=O(t);function t(r,i){var o;return y(this,t),o=n.call(this),o.name=r,o.args=i,o}return x(t,[{key:"astNodeType",get:function(){return"call"}}]),t}(z),gs=function(e){N(t,e);var n=O(t);function t(r,i){var o;return y(this,t),o=n.call(this),o.body=r,o.continuing=i,o}return x(t,[{key:"astNodeType",get:function(){return"loop"}}]),t}(z),vs=function(e){N(t,e);var n=O(t);function t(r,i){var o;return y(this,t),o=n.call(this),o.condition=r,o.body=i,o}return x(t,[{key:"astNodeType",get:function(){return"body"}}]),t}(z),bs=function(e){N(t,e);var n=O(t);function t(r,i,o,a){var s;return y(this,t),s=n.call(this),s.condition=r,s.body=i,s.elseif=o,s.else=a,s}return x(t,[{key:"astNodeType",get:function(){return"if"}}]),t}(z),xs=function(e){N(t,e);var n=O(t);function t(r){var i;return y(this,t),i=n.call(this),i.value=r,i}return x(t,[{key:"astNodeType",get:function(){return"return"}}]),t}(z),ys=function(e){N(t,e);var n=O(t);function t(r){var i;return y(this,t),i=n.call(this),i.name=r,i}return x(t,[{key:"astNodeType",get:function(){return"enable"}}]),t}(z),dr=function(e){N(t,e);var n=O(t);function t(r,i){var o;return y(this,t),o=n.call(this),o.name=r,o.type=i,o}return x(t,[{key:"astNodeType",get:function(){return"alias"}}]),t}(z),As=function(e){N(t,e);var n=O(t);function t(){return y(this,t),n.call(this)}return x(t,[{key:"astNodeType",get:function(){return"discard"}}]),t}(z),Ss=function(e){N(t,e);var n=O(t);function t(){return y(this,t),n.call(this)}return x(t,[{key:"astNodeType",get:function(){return"break"}}]),t}(z),Ls=function(e){N(t,e);var n=O(t);function t(){return y(this,t),n.call(this)}return x(t,[{key:"astNodeType",get:function(){return"continue"}}]),t}(z),le=function(e){N(t,e);var n=O(t);function t(r){var i;return y(this,t),i=n.call(this),i.name=r,i}return x(t,[{key:"astNodeType",get:function(){return"type"}},{key:"isStruct",get:function(){return!1}},{key:"isArray",get:function(){return!1}}]),t}(z),ae=function(e){N(t,e);var n=O(t);function t(i,o){var a;return y(this,t),a=n.call(this,i),a.members=o,a}var r=t.prototype;return r.getMemberIndex=function(o){for(var a=0;a<this.members.length;a++)if(this.members[a].name==o)return a;return-1},x(t,[{key:"astNodeType",get:function(){return"struct"}},{key:"isStruct",get:function(){return!0}}]),t}(le),hr=function(e){N(t,e);var n=O(t);function t(r,i,o){var a;return y(this,t),a=n.call(this,r),a.format=i,a.access=o,a}return x(t,[{key:"astNodeType",get:function(){return"template"}}]),t}(le),Ps=function(e){N(t,e);var n=O(t);function t(r,i,o,a){var s;return y(this,t),s=n.call(this,r),s.storage=i,s.type=o,s.access=a,s}return x(t,[{key:"astNodeType",get:function(){return"pointer"}}]),t}(le),mr=function(e){N(t,e);var n=O(t);function t(r,i,o,a){var s;return y(this,t),s=n.call(this,r),s.attributes=i,s.format=o,s.count=a,s}return x(t,[{key:"astNodeType",get:function(){return"array"}},{key:"isArray",get:function(){return!0}}]),t}(le),Te=function(e){N(t,e);var n=O(t);function t(r,i,o){var a;return y(this,t),a=n.call(this,r),a.format=i,a.access=o,a}return x(t,[{key:"astNodeType",get:function(){return"sampler"}}]),t}(le),Q=function(e){N(t,e);var n=O(t);function t(){return y(this,t),n.call(this)}return x(t)}(se),tr=function(e){N(t,e);var n=O(t);function t(i){var o;return y(this,t),o=n.call(this),o.value=i,o}var r=t.prototype;return r.toString=function(){return this.value},r.evaluateString=function(){return this.value},x(t,[{key:"astNodeType",get:function(){return"stringExpr"}}]),t}(Q),Ne=function(e){N(t,e);var n=O(t);function t(r,i){var o;return y(this,t),o=n.call(this),o.type=r,o.args=i,o}return x(t,[{key:"astNodeType",get:function(){return"createExpr"}}]),t}(Q),Es=function(e){N(t,e);var n=O(t);function t(i,o){var a;return y(this,t),a=n.call(this),a.name=i,a.args=o,a}var r=t.prototype;return r.evaluate=function(o){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(o));case"acos":return Math.acos(this.args[0].evaluate(o));case"acosh":return Math.acosh(this.args[0].evaluate(o));case"asin":return Math.asin(this.args[0].evaluate(o));case"asinh":return Math.asinh(this.args[0].evaluate(o));case"atan":return Math.atan(this.args[0].evaluate(o));case"atan2":return Math.atan2(this.args[0].evaluate(o),this.args[1].evaluate(o));case"atanh":return Math.atanh(this.args[0].evaluate(o));case"ceil":return Math.ceil(this.args[0].evaluate(o));case"clamp":return Math.min(Math.max(this.args[0].evaluate(o),this.args[1].evaluate(o)),this.args[2].evaluate(o));case"cos":return Math.cos(this.args[0].evaluate(o));case"degrees":return this.args[0].evaluate(o)*180/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(o)-this.args[1].evaluate(o),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(o));case"exp2":return Math.pow(2,this.args[0].evaluate(o));case"floor":return Math.floor(this.args[0].evaluate(o));case"fma":return this.args[0].evaluate(o)*this.args[1].evaluate(o)+this.args[2].evaluate(o);case"fract":return this.args[0].evaluate(o)-Math.floor(this.args[0].evaluate(o));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(o));case"log":return Math.log(this.args[0].evaluate(o));case"log2":return Math.log2(this.args[0].evaluate(o));case"max":return Math.max(this.args[0].evaluate(o),this.args[1].evaluate(o));case"min":return Math.min(this.args[0].evaluate(o),this.args[1].evaluate(o));case"mix":return this.args[0].evaluate(o)*(1-this.args[2].evaluate(o))+this.args[1].evaluate(o)*this.args[2].evaluate(o);case"modf":return this.args[0].evaluate(o)-Math.floor(this.args[0].evaluate(o));case"pow":return Math.pow(this.args[0].evaluate(o),this.args[1].evaluate(o));case"radians":return this.args[0].evaluate(o)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(o));case"sign":return Math.sign(this.args[0].evaluate(o));case"sin":return Math.sin(this.args[0].evaluate(o));case"sinh":return Math.sinh(this.args[0].evaluate(o));case"saturate":return Math.min(Math.max(this.args[0].evaluate(o),0),1);case"smoothstep":return this.args[0].evaluate(o)*this.args[0].evaluate(o)*(3-2*this.args[0].evaluate(o));case"sqrt":return Math.sqrt(this.args[0].evaluate(o));case"step":return this.args[0].evaluate(o)<this.args[1].evaluate(o)?0:1;case"tan":return Math.tan(this.args[0].evaluate(o));case"tanh":return Math.tanh(this.args[0].evaluate(o));case"trunc":return Math.trunc(this.args[0].evaluate(o));default:throw new Error("Non const function: "+this.name)}},x(t,[{key:"astNodeType",get:function(){return"callExpr"}}]),t}(Q),ws=function(e){N(t,e);var n=O(t);function t(r){var i;return y(this,t),i=n.call(this),i.name=r,i}return x(t,[{key:"astNodeType",get:function(){return"varExpr"}}]),t}(Q),rr=function(e){N(t,e);var n=O(t);function t(i,o){var a;return y(this,t),a=n.call(this),a.name=i,a.initializer=o,a}var r=t.prototype;return r.evaluate=function(o){var a,s;if(this.initializer instanceof Ne){var l=(a=this.postfix)===null||a===void 0?void 0:a.evaluateString(o),f=(s=this.initializer.type)===null||s===void 0?void 0:s.name,p=o.structs.get(f),d=p?.getMemberIndex(l);if(d!=-1){var h=this.initializer.args[d].evaluate(o);return h}console.log(d)}return this.initializer.evaluate(o)},x(t,[{key:"astNodeType",get:function(){return"constExpr"}}]),t}(Q),ir=function(e){N(t,e);var n=O(t);function t(i){var o;return y(this,t),o=n.call(this),o.value=i,o}var r=t.prototype;return r.evaluate=function(){return this.value},x(t,[{key:"astNodeType",get:function(){return"literalExpr"}}]),t}(Q),Is=function(e){N(t,e);var n=O(t);function t(r,i){var o;return y(this,t),o=n.call(this),o.type=r,o.value=i,o}return x(t,[{key:"astNodeType",get:function(){return"bitcastExpr"}}]),t}(Q),Ts=function(e){N(t,e);var n=O(t);function t(i,o){var a;return y(this,t),a=n.call(this),a.type=i,a.args=o,a}var r=t.prototype;return r.evaluate=function(o){return this.args[0].evaluate(o)},x(t,[{key:"astNodeType",get:function(){return"typecastExpr"}}]),t}(Q),or=function(e){N(t,e);var n=O(t);function t(i){var o;return y(this,t),o=n.call(this),o.contents=i,o}var r=t.prototype;return r.evaluate=function(o){return this.contents[0].evaluate(o)},x(t,[{key:"astNodeType",get:function(){return"groupExpr"}}]),t}(Q),gr=function(e){N(t,e);var n=O(t);function t(){return y(this,t),n.call(this)}return x(t)}(Q),Ns=function(e){N(t,e);var n=O(t);function t(i,o){var a;return y(this,t),a=n.call(this),a.operator=i,a.right=o,a}var r=t.prototype;return r.evaluate=function(o){switch(this.operator){case"+":return this.right.evaluate(o);case"-":return-this.right.evaluate(o);case"!":return this.right.evaluate(o)?0:1;case"~":return~this.right.evaluate(o);default:throw new Error("Unknown unary operator: "+this.operator)}},x(t,[{key:"astNodeType",get:function(){return"unaryOp"}}]),t}(gr),Y=function(e){N(t,e);var n=O(t);function t(i,o,a){var s;return y(this,t),s=n.call(this),s.operator=i,s.left=o,s.right=a,s}var r=t.prototype;return r.evaluate=function(o){switch(this.operator){case"+":return this.left.evaluate(o)+this.right.evaluate(o);case"-":return this.left.evaluate(o)-this.right.evaluate(o);case"*":return this.left.evaluate(o)*this.right.evaluate(o);case"/":return this.left.evaluate(o)/this.right.evaluate(o);case"%":return this.left.evaluate(o)%this.right.evaluate(o);case"==":return this.left.evaluate(o)==this.right.evaluate(o)?1:0;case"!=":return this.left.evaluate(o)!=this.right.evaluate(o)?1:0;case"<":return this.left.evaluate(o)<this.right.evaluate(o)?1:0;case">":return this.left.evaluate(o)>this.right.evaluate(o)?1:0;case"<=":return this.left.evaluate(o)<=this.right.evaluate(o)?1:0;case">=":return this.left.evaluate(o)>=this.right.evaluate(o)?1:0;case"&&":return this.left.evaluate(o)&&this.right.evaluate(o)?1:0;case"||":return this.left.evaluate(o)||this.right.evaluate(o)?1:0;default:throw new Error("Unknown operator ".concat(this.operator))}},x(t,[{key:"astNodeType",get:function(){return"binaryOp"}}]),t}(gr),vr=function(e){N(t,e);var n=O(t);function t(){return y(this,t),n.call(this)}return x(t)}(se),Os=function(e){N(t,e);var n=O(t);function t(r,i){var o;return y(this,t),o=n.call(this),o.selector=r,o.body=i,o}return x(t,[{key:"astNodeType",get:function(){return"case"}}]),t}(vr),Cs=function(e){N(t,e);var n=O(t);function t(r){var i;return y(this,t),i=n.call(this),i.body=r,i}return x(t,[{key:"astNodeType",get:function(){return"default"}}]),t}(vr),Fs=function(e){N(t,e);var n=O(t);function t(r,i,o){var a;return y(this,t),a=n.call(this),a.name=r,a.type=i,a.attributes=o,a}return x(t,[{key:"astNodeType",get:function(){return"argument"}}]),t}(se),Rs=function(e){N(t,e);var n=O(t);function t(r,i){var o;return y(this,t),o=n.call(this),o.condition=r,o.body=i,o}return x(t,[{key:"astNodeType",get:function(){return"elseif"}}]),t}(se),ks=function(e){N(t,e);var n=O(t);function t(r,i,o){var a;return y(this,t),a=n.call(this),a.name=r,a.type=i,a.attributes=o,a}return x(t,[{key:"astNodeType",get:function(){return"member"}}]),t}(se),ar=function(e){N(t,e);var n=O(t);function t(r,i){var o;return y(this,t),o=n.call(this),o.name=r,o.value=i,o}return x(t,[{key:"astNodeType",get:function(){return"attribute"}}]),t}(se),m,u;(function(e){e[e.token=0]="token",e[e.keyword=1]="keyword",e[e.reserved=2]="reserved"})(u||(u={}));var _=function(){function e(t,r,i){y(this,e),this.name=t,this.type=r,this.rule=i}var n=e.prototype;return n.toString=function(){return this.name},x(e)}(),c=x(function e(){y(this,e)});m=c;c.none=new _("",u.reserved,"");c.eof=new _("EOF",u.token,"");c.reserved={asm:new _("asm",u.reserved,"asm"),bf16:new _("bf16",u.reserved,"bf16"),do:new _("do",u.reserved,"do"),enum:new _("enum",u.reserved,"enum"),f16:new _("f16",u.reserved,"f16"),f64:new _("f64",u.reserved,"f64"),handle:new _("handle",u.reserved,"handle"),i8:new _("i8",u.reserved,"i8"),i16:new _("i16",u.reserved,"i16"),i64:new _("i64",u.reserved,"i64"),mat:new _("mat",u.reserved,"mat"),premerge:new _("premerge",u.reserved,"premerge"),regardless:new _("regardless",u.reserved,"regardless"),typedef:new _("typedef",u.reserved,"typedef"),u8:new _("u8",u.reserved,"u8"),u16:new _("u16",u.reserved,"u16"),u64:new _("u64",u.reserved,"u64"),unless:new _("unless",u.reserved,"unless"),using:new _("using",u.reserved,"using"),vec:new _("vec",u.reserved,"vec"),void:new _("void",u.reserved,"void")};c.keywords={array:new _("array",u.keyword,"array"),atomic:new _("atomic",u.keyword,"atomic"),bool:new _("bool",u.keyword,"bool"),f32:new _("f32",u.keyword,"f32"),i32:new _("i32",u.keyword,"i32"),mat2x2:new _("mat2x2",u.keyword,"mat2x2"),mat2x3:new _("mat2x3",u.keyword,"mat2x3"),mat2x4:new _("mat2x4",u.keyword,"mat2x4"),mat3x2:new _("mat3x2",u.keyword,"mat3x2"),mat3x3:new _("mat3x3",u.keyword,"mat3x3"),mat3x4:new _("mat3x4",u.keyword,"mat3x4"),mat4x2:new _("mat4x2",u.keyword,"mat4x2"),mat4x3:new _("mat4x3",u.keyword,"mat4x3"),mat4x4:new _("mat4x4",u.keyword,"mat4x4"),ptr:new _("ptr",u.keyword,"ptr"),sampler:new _("sampler",u.keyword,"sampler"),sampler_comparison:new _("sampler_comparison",u.keyword,"sampler_comparison"),struct:new _("struct",u.keyword,"struct"),texture_1d:new _("texture_1d",u.keyword,"texture_1d"),texture_2d:new _("texture_2d",u.keyword,"texture_2d"),texture_2d_array:new _("texture_2d_array",u.keyword,"texture_2d_array"),texture_3d:new _("texture_3d",u.keyword,"texture_3d"),texture_cube:new _("texture_cube",u.keyword,"texture_cube"),texture_cube_array:new _("texture_cube_array",u.keyword,"texture_cube_array"),texture_multisampled_2d:new _("texture_multisampled_2d",u.keyword,"texture_multisampled_2d"),texture_storage_1d:new _("texture_storage_1d",u.keyword,"texture_storage_1d"),texture_storage_2d:new _("texture_storage_2d",u.keyword,"texture_storage_2d"),texture_storage_2d_array:new _("texture_storage_2d_array",u.keyword,"texture_storage_2d_array"),texture_storage_3d:new _("texture_storage_3d",u.keyword,"texture_storage_3d"),texture_depth_2d:new _("texture_depth_2d",u.keyword,"texture_depth_2d"),texture_depth_2d_array:new _("texture_depth_2d_array",u.keyword,"texture_depth_2d_array"),texture_depth_cube:new _("texture_depth_cube",u.keyword,"texture_depth_cube"),texture_depth_cube_array:new _("texture_depth_cube_array",u.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new _("texture_depth_multisampled_2d",u.keyword,"texture_depth_multisampled_2d"),texture_external:new _("texture_external",u.keyword,"texture_external"),u32:new _("u32",u.keyword,"u32"),vec2:new _("vec2",u.keyword,"vec2"),vec3:new _("vec3",u.keyword,"vec3"),vec4:new _("vec4",u.keyword,"vec4"),bitcast:new _("bitcast",u.keyword,"bitcast"),block:new _("block",u.keyword,"block"),break:new _("break",u.keyword,"break"),case:new _("case",u.keyword,"case"),continue:new _("continue",u.keyword,"continue"),continuing:new _("continuing",u.keyword,"continuing"),default:new _("default",u.keyword,"default"),discard:new _("discard",u.keyword,"discard"),else:new _("else",u.keyword,"else"),enable:new _("enable",u.keyword,"enable"),fallthrough:new _("fallthrough",u.keyword,"fallthrough"),false:new _("false",u.keyword,"false"),fn:new _("fn",u.keyword,"fn"),for:new _("for",u.keyword,"for"),function:new _("function",u.keyword,"function"),if:new _("if",u.keyword,"if"),let:new _("let",u.keyword,"let"),const:new _("const",u.keyword,"const"),loop:new _("loop",u.keyword,"loop"),while:new _("while",u.keyword,"while"),private:new _("private",u.keyword,"private"),read:new _("read",u.keyword,"read"),read_write:new _("read_write",u.keyword,"read_write"),return:new _("return",u.keyword,"return"),storage:new _("storage",u.keyword,"storage"),switch:new _("switch",u.keyword,"switch"),true:new _("true",u.keyword,"true"),alias:new _("alias",u.keyword,"alias"),type:new _("type",u.keyword,"type"),uniform:new _("uniform",u.keyword,"uniform"),var:new _("var",u.keyword,"var"),override:new _("override",u.keyword,"override"),workgroup:new _("workgroup",u.keyword,"workgroup"),write:new _("write",u.keyword,"write"),r8unorm:new _("r8unorm",u.keyword,"r8unorm"),r8snorm:new _("r8snorm",u.keyword,"r8snorm"),r8uint:new _("r8uint",u.keyword,"r8uint"),r8sint:new _("r8sint",u.keyword,"r8sint"),r16uint:new _("r16uint",u.keyword,"r16uint"),r16sint:new _("r16sint",u.keyword,"r16sint"),r16float:new _("r16float",u.keyword,"r16float"),rg8unorm:new _("rg8unorm",u.keyword,"rg8unorm"),rg8snorm:new _("rg8snorm",u.keyword,"rg8snorm"),rg8uint:new _("rg8uint",u.keyword,"rg8uint"),rg8sint:new _("rg8sint",u.keyword,"rg8sint"),r32uint:new _("r32uint",u.keyword,"r32uint"),r32sint:new _("r32sint",u.keyword,"r32sint"),r32float:new _("r32float",u.keyword,"r32float"),rg16uint:new _("rg16uint",u.keyword,"rg16uint"),rg16sint:new _("rg16sint",u.keyword,"rg16sint"),rg16float:new _("rg16float",u.keyword,"rg16float"),rgba8unorm:new _("rgba8unorm",u.keyword,"rgba8unorm"),rgba8unorm_srgb:new _("rgba8unorm_srgb",u.keyword,"rgba8unorm_srgb"),rgba8snorm:new _("rgba8snorm",u.keyword,"rgba8snorm"),rgba8uint:new _("rgba8uint",u.keyword,"rgba8uint"),rgba8sint:new _("rgba8sint",u.keyword,"rgba8sint"),bgra8unorm:new _("bgra8unorm",u.keyword,"bgra8unorm"),bgra8unorm_srgb:new _("bgra8unorm_srgb",u.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new _("rgb10a2unorm",u.keyword,"rgb10a2unorm"),rg11b10float:new _("rg11b10float",u.keyword,"rg11b10float"),rg32uint:new _("rg32uint",u.keyword,"rg32uint"),rg32sint:new _("rg32sint",u.keyword,"rg32sint"),rg32float:new _("rg32float",u.keyword,"rg32float"),rgba16uint:new _("rgba16uint",u.keyword,"rgba16uint"),rgba16sint:new _("rgba16sint",u.keyword,"rgba16sint"),rgba16float:new _("rgba16float",u.keyword,"rgba16float"),rgba32uint:new _("rgba32uint",u.keyword,"rgba32uint"),rgba32sint:new _("rgba32sint",u.keyword,"rgba32sint"),rgba32float:new _("rgba32float",u.keyword,"rgba32float"),static_assert:new _("static_assert",u.keyword,"static_assert")};c.tokens={decimal_float_literal:new _("decimal_float_literal",u.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new _("hex_float_literal",u.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new _("int_literal",u.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new _("uint_literal",u.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new _("ident",u.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new _("and",u.token,"&"),and_and:new _("and_and",u.token,"&&"),arrow:new _("arrow ",u.token,"->"),attr:new _("attr",u.token,"@"),attr_left:new _("attr_left",u.token,"[["),attr_right:new _("attr_right",u.token,"]]"),forward_slash:new _("forward_slash",u.token,"/"),bang:new _("bang",u.token,"!"),bracket_left:new _("bracket_left",u.token,"["),bracket_right:new _("bracket_right",u.token,"]"),brace_left:new _("brace_left",u.token,"{"),brace_right:new _("brace_right",u.token,"}"),colon:new _("colon",u.token,":"),comma:new _("comma",u.token,","),equal:new _("equal",u.token,"="),equal_equal:new _("equal_equal",u.token,"=="),not_equal:new _("not_equal",u.token,"!="),greater_than:new _("greater_than",u.token,">"),greater_than_equal:new _("greater_than_equal",u.token,">="),shift_right:new _("shift_right",u.token,">>"),less_than:new _("less_than",u.token,"<"),less_than_equal:new _("less_than_equal",u.token,"<="),shift_left:new _("shift_left",u.token,"<<"),modulo:new _("modulo",u.token,"%"),minus:new _("minus",u.token,"-"),minus_minus:new _("minus_minus",u.token,"--"),period:new _("period",u.token,"."),plus:new _("plus",u.token,"+"),plus_plus:new _("plus_plus",u.token,"++"),or:new _("or",u.token,"|"),or_or:new _("or_or",u.token,"||"),paren_left:new _("paren_left",u.token,"("),paren_right:new _("paren_right",u.token,")"),semicolon:new _("semicolon",u.token,";"),star:new _("star",u.token,"*"),tilde:new _("tilde",u.token,"~"),underscore:new _("underscore",u.token,"_"),xor:new _("xor",u.token,"^"),plus_equal:new _("plus_equal",u.token,"+="),minus_equal:new _("minus_equal",u.token,"-="),times_equal:new _("times_equal",u.token,"*="),division_equal:new _("division_equal",u.token,"/="),modulo_equal:new _("modulo_equal",u.token,"%="),and_equal:new _("and_equal",u.token,"&="),or_equal:new _("or_equal",u.token,"|="),xor_equal:new _("xor_equal",u.token,"^="),shift_right_equal:new _("shift_right_equal",u.token,">>="),shift_left_equal:new _("shift_left_equal",u.token,"<<=")};c.storage_class=[m.keywords.function,m.keywords.private,m.keywords.workgroup,m.keywords.uniform,m.keywords.storage];c.access_mode=[m.keywords.read,m.keywords.write,m.keywords.read_write];c.sampler_type=[m.keywords.sampler,m.keywords.sampler_comparison];c.sampled_texture_type=[m.keywords.texture_1d,m.keywords.texture_2d,m.keywords.texture_2d_array,m.keywords.texture_3d,m.keywords.texture_cube,m.keywords.texture_cube_array];c.multisampled_texture_type=[m.keywords.texture_multisampled_2d];c.storage_texture_type=[m.keywords.texture_storage_1d,m.keywords.texture_storage_2d,m.keywords.texture_storage_2d_array,m.keywords.texture_storage_3d];c.depth_texture_type=[m.keywords.texture_depth_2d,m.keywords.texture_depth_2d_array,m.keywords.texture_depth_cube,m.keywords.texture_depth_cube_array,m.keywords.texture_depth_multisampled_2d];c.texture_external_type=[m.keywords.texture_external];c.any_texture_type=[].concat(ie(m.sampled_texture_type),ie(m.multisampled_texture_type),ie(m.storage_texture_type),ie(m.depth_texture_type),ie(m.texture_external_type));c.texel_format=[m.keywords.r8unorm,m.keywords.r8snorm,m.keywords.r8uint,m.keywords.r8sint,m.keywords.r16uint,m.keywords.r16sint,m.keywords.r16float,m.keywords.rg8unorm,m.keywords.rg8snorm,m.keywords.rg8uint,m.keywords.rg8sint,m.keywords.r32uint,m.keywords.r32sint,m.keywords.r32float,m.keywords.rg16uint,m.keywords.rg16sint,m.keywords.rg16float,m.keywords.rgba8unorm,m.keywords.rgba8unorm_srgb,m.keywords.rgba8snorm,m.keywords.rgba8uint,m.keywords.rgba8sint,m.keywords.bgra8unorm,m.keywords.bgra8unorm_srgb,m.keywords.rgb10a2unorm,m.keywords.rg11b10float,m.keywords.rg32uint,m.keywords.rg32sint,m.keywords.rg32float,m.keywords.rgba16uint,m.keywords.rgba16sint,m.keywords.rgba16float,m.keywords.rgba32uint,m.keywords.rgba32sint,m.keywords.rgba32float];c.const_literal=[m.tokens.int_literal,m.tokens.uint_literal,m.tokens.decimal_float_literal,m.tokens.hex_float_literal,m.keywords.true,m.keywords.false];c.literal_or_ident=[m.tokens.ident,m.tokens.int_literal,m.tokens.uint_literal,m.tokens.decimal_float_literal,m.tokens.hex_float_literal];c.element_count_expression=[m.tokens.int_literal,m.tokens.uint_literal,m.tokens.ident];c.template_types=[m.keywords.vec2,m.keywords.vec3,m.keywords.vec4,m.keywords.mat2x2,m.keywords.mat2x3,m.keywords.mat2x4,m.keywords.mat3x2,m.keywords.mat3x3,m.keywords.mat3x4,m.keywords.mat4x2,m.keywords.mat4x3,m.keywords.mat4x4,m.keywords.atomic,m.keywords.bitcast].concat(ie(m.any_texture_type));c.attribute_name=[m.tokens.ident,m.keywords.block];c.assignment_operators=[m.tokens.equal,m.tokens.plus_equal,m.tokens.minus_equal,m.tokens.times_equal,m.tokens.division_equal,m.tokens.modulo_equal,m.tokens.and_equal,m.tokens.or_equal,m.tokens.xor_equal,m.tokens.shift_right_equal,m.tokens.shift_left_equal];c.increment_operators=[m.tokens.plus_plus,m.tokens.minus_minus];var sr=function(){function e(t,r,i){y(this,e),this.type=t,this.lexeme=r,this.line=i}var n=e.prototype;return n.toString=function(){return this.lexeme},n.isTemplateType=function(){return c.template_types.indexOf(this.type)!=-1},n.isArrayType=function(){return this.type==c.keywords.array},n.isArrayOrTemplateType=function(){return this.isArrayType()||this.isTemplateType()},x(e)}(),Ms=function(){function e(t){y(this,e),this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=t??""}var n=e.prototype;return n.scanTokens=function(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw"Invalid syntax at line ".concat(this._line);return this._tokens.push(new sr(c.eof,"",this._line)),this._tokens},n.scanToken=function(){var r=this._advance();if(r==`
`)return this._line++,!0;if(this._isWhitespace(r))return!0;if(r=="/"){if(this._peekAhead()=="/"){for(;r!=`
`;){if(this._isAtEnd())return!0;r=this._advance()}return this._line++,!0}else if(this._peekAhead()=="*"){this._advance();for(var i=1;i>0;){if(this._isAtEnd())return!0;if(r=this._advance(),r==`
`)this._line++;else if(r=="*"){if(this._peekAhead()=="/"&&(this._advance(),i--,i==0))return!0}else r=="/"&&this._peekAhead()=="*"&&(this._advance(),i++)}return!0}}for(var o=c.none;;){var a=this._findType(r),s=this._peekAhead();if(r==">"&&(s==">"||s=="=")){for(var l=!1,f=this._tokens.length-1,p=0;p<5&&f>=0;++p,--f)if(this._tokens[f].type===c.tokens.less_than){f>0&&this._tokens[f-1].isArrayOrTemplateType()&&(l=!0);break}if(l)return this._addToken(a),!0}if(a===c.none){for(var d=r,h=0,g=2,b=0;b<g;++b)if(d+=this._peekAhead(b),a=this._findType(d),a!==c.none){h=b;break}if(a===c.none)return o===c.none?!1:(this._current--,this._addToken(o),!0);r=d,this._current+=h+1}if(o=a,this._isAtEnd())break;r+=this._advance()}return o===c.none?!1:(this._addToken(o),!0)},n._findType=function(r){for(var i in c.keywords){var o=c.keywords[i];if(this._match(r,o.rule))return o}for(var a in c.tokens){var s=c.tokens[a];if(this._match(r,s.rule))return s}return c.none},n._match=function(r,i){if(typeof i=="string"){if(i==r)return!0}else{var o=i.exec(r);if(o&&o.index==0&&o[0]==r)return!0}return!1},n._isAtEnd=function(){return this._current>=this._source.length},n._isWhitespace=function(r){return r==" "||r=="	"||r=="\r"},n._advance=function(){var r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0,i=this._source[this._current];return r=r||0,r++,this._current+=r,i},n._peekAhead=function(){var r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:0;return r=r||0,this._current+r>=this._source.length?"\0":this._source[this._current+r]},n._addToken=function(r){var i=this._source.substring(this._start,this._current);this._tokens.push(new sr(r,i,this._line))},x(e)}(),Us=function(){function e(){y(this,e),this._tokens=[],this._current=0,this._context=new cs}var n=e.prototype;return n.parse=function(r){this._initialize(r);for(var i=[];!this._isAtEnd();){var o=this._global_decl_or_directive();if(!o)break;i.push(o)}return i},n._initialize=function(r){if(r)if(typeof r=="string"){var i=new Ms(r);this._tokens=i.scanTokens()}else this._tokens=r;else this._tokens=[];this._current=0},n._error=function(r,i){return console.error(r,i),{token:r,message:i,toString:function(){return"".concat(i)}}},n._isAtEnd=function(){return this._current>=this._tokens.length||this._peek().type==c.eof},n._match=function(r){if(r instanceof _)return this._check(r)?(this._advance(),!0):!1;for(var i=0,o=r.length;i<o;++i){var a=r[i];if(this._check(a))return this._advance(),!0}return!1},n._consume=function(r,i){if(this._check(r))return this._advance();throw this._error(this._peek(),i)},n._check=function(r){if(this._isAtEnd())return!1;var i=this._peek();if(r instanceof Array){var o=i.type,a=r.indexOf(o);return a!=-1}return i.type==r},n._advance=function(){return this._isAtEnd()||this._current++,this._previous()},n._peek=function(){return this._tokens[this._current]},n._previous=function(){return this._tokens[this._current-1]},n._global_decl_or_directive=function(){for(;this._match(c.tokens.semicolon)&&!this._isAtEnd(););if(this._match(c.keywords.alias)){var r=this._type_alias();return this._consume(c.tokens.semicolon,"Expected ';'"),r}if(this._match(c.keywords.enable)){var i=this._enable_directive();return this._consume(c.tokens.semicolon,"Expected ';'"),i}var o=this._attribute();if(this._check(c.keywords.var)){var a=this._global_variable_decl();return a!=null&&(a.attributes=o),this._consume(c.tokens.semicolon,"Expected ';'."),a}if(this._check(c.keywords.override)){var s=this._override_variable_decl();return s!=null&&(s.attributes=o),this._consume(c.tokens.semicolon,"Expected ';'."),s}if(this._check(c.keywords.let)){var l=this._global_let_decl();return l!=null&&(l.attributes=o),this._consume(c.tokens.semicolon,"Expected ';'."),l}if(this._check(c.keywords.const)){var f=this._global_const_decl();return f!=null&&(f.attributes=o),this._consume(c.tokens.semicolon,"Expected ';'."),f}if(this._check(c.keywords.struct)){var p=this._struct_decl();return p!=null&&(p.attributes=o),p}if(this._check(c.keywords.fn)){var d=this._function_decl();return d!=null&&(d.attributes=o),d}return null},n._function_decl=function(){if(!this._match(c.keywords.fn))return null;var r=this._consume(c.tokens.ident,"Expected function name.").toString();this._consume(c.tokens.paren_left,"Expected '(' for function arguments.");var i=[];if(!this._check(c.tokens.paren_right))do{if(this._check(c.tokens.paren_right))break;var o=this._attribute(),a=this._consume(c.tokens.ident,"Expected argument name.").toString();this._consume(c.tokens.colon,"Expected ':' for argument type.");var s=this._attribute(),l=this._type_decl();l!=null&&(l.attributes=s,i.push(new Fs(a,l,o)))}while(this._match(c.tokens.comma));this._consume(c.tokens.paren_right,"Expected ')' after function arguments.");var f=null;if(this._match(c.tokens.arrow)){var p=this._attribute();f=this._type_decl(),f!=null&&(f.attributes=p)}var d=this._compound_statement();return new _r(r,i,f,d)},n._compound_statement=function(){var r=[];for(this._consume(c.tokens.brace_left,"Expected '{' for block.");!this._check(c.tokens.brace_right);){var i=this._statement();i!==null&&r.push(i)}return this._consume(c.tokens.brace_right,"Expected '}' for block."),r},n._statement=function(){for(;this._match(c.tokens.semicolon)&&!this._isAtEnd(););if(this._check(c.keywords.if))return this._if_statement();if(this._check(c.keywords.switch))return this._switch_statement();if(this._check(c.keywords.loop))return this._loop_statement();if(this._check(c.keywords.for))return this._for_statement();if(this._check(c.keywords.while))return this._while_statement();if(this._check(c.keywords.continuing))return this._continuing_statement();if(this._check(c.keywords.static_assert))return this._static_assert_statement();if(this._check(c.tokens.brace_left))return this._compound_statement();var r=null;return this._check(c.keywords.return)?r=this._return_statement():this._check([c.keywords.var,c.keywords.let,c.keywords.const])?r=this._variable_statement():this._match(c.keywords.discard)?r=new As:this._match(c.keywords.break)?r=new Ss:this._match(c.keywords.continue)?r=new Ls:r=this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),r!=null&&this._consume(c.tokens.semicolon,"Expected ';' after statement."),r},n._static_assert_statement=function(){if(!this._match(c.keywords.static_assert))return null;var r=this._optional_paren_expression();return new fs(r)},n._while_statement=function(){if(!this._match(c.keywords.while))return null;var r=this._optional_paren_expression(),i=this._compound_statement();return new us(r,i)},n._continuing_statement=function(){if(!this._match(c.keywords.continuing))return null;var r=this._compound_statement();return new _s(r)},n._for_statement=function(){if(!this._match(c.keywords.for))return null;this._consume(c.tokens.paren_left,"Expected '('.");var r=this._check(c.tokens.semicolon)?null:this._for_init();this._consume(c.tokens.semicolon,"Expected ';'.");var i=this._check(c.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(c.tokens.semicolon,"Expected ';'.");var o=this._check(c.tokens.paren_right)?null:this._for_increment();this._consume(c.tokens.paren_right,"Expected ')'.");var a=this._compound_statement();return new ps(r,i,o,a)},n._for_init=function(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()},n._for_increment=function(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()},n._variable_statement=function(){if(this._check(c.keywords.var)){var r=this._variable_decl();if(r===null)throw this._error(this._peek(),"Variable declaration expected.");var i=null;return this._match(c.tokens.equal)&&(i=this._short_circuit_or_expression()),new de(r.name,r.type,r.storage,r.access,i)}if(this._match(c.keywords.let)){var o=this._consume(c.tokens.ident,"Expected name for let.").toString(),a=null;if(this._match(c.tokens.colon)){var s=this._attribute();a=this._type_decl(),a!=null&&(a.attributes=s)}this._consume(c.tokens.equal,"Expected '=' for let.");var l=this._short_circuit_or_expression();return new er(o,a,null,null,l)}if(this._match(c.keywords.const)){var f=this._consume(c.tokens.ident,"Expected name for const.").toString(),p=null;if(this._match(c.tokens.colon)){var d=this._attribute();p=this._type_decl(),p!=null&&(p.attributes=d)}this._consume(c.tokens.equal,"Expected '=' for const.");var h=this._short_circuit_or_expression();return new nr(f,p,null,null,h)}return null},n._increment_decrement_statement=function(){var r=this._current,i=this._unary_expression();if(i==null)return null;if(!this._check(c.increment_operators))return this._current=r,null;var o=this._consume(c.increment_operators,"Expected increment operator");return new ds(o.type===c.tokens.plus_plus?ge.increment:ge.decrement,i)},n._assignment_statement=function(){var r=null;if(this._check(c.tokens.brace_right))return null;var i=this._match(c.tokens.underscore);if(i||(r=this._unary_expression()),!i&&r==null)return null;var o=this._consume(c.assignment_operators,"Expected assignment operator."),a=this._short_circuit_or_expression();return new hs(Oe.parse(o.lexeme),r,a)},n._func_call_statement=function(){if(!this._check(c.tokens.ident))return null;var r=this._current,i=this._consume(c.tokens.ident,"Expected function name."),o=this._argument_expression_list();return o===null?(this._current=r,null):new ms(i.lexeme,o)},n._loop_statement=function(){if(!this._match(c.keywords.loop))return null;this._consume(c.tokens.brace_left,"Expected '{' for loop.");for(var r=[],i=this._statement();i!==null;){if(Array.isArray(i)){var o=j(i),a;try{for(o.s();!(a=o.n()).done;){var s=a.value;r.push(s)}}catch(f){o.e(f)}finally{o.f()}}else r.push(i);i=this._statement()}var l=null;return this._match(c.keywords.continuing)&&(l=this._compound_statement()),this._consume(c.tokens.brace_right,"Expected '}' for loop."),new gs(r,l)},n._switch_statement=function(){if(!this._match(c.keywords.switch))return null;var r=this._optional_paren_expression();this._consume(c.tokens.brace_left,"Expected '{' for switch.");var i=this._switch_body();if(i==null||i.length==0)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(c.tokens.brace_right,"Expected '}' for switch."),new vs(r,i)},n._switch_body=function(){var r=[];if(this._match(c.keywords.case)){var i=this._case_selectors();this._match(c.tokens.colon),this._consume(c.tokens.brace_left,"Exected '{' for switch case.");var o=this._case_body();this._consume(c.tokens.brace_right,"Exected '}' for switch case."),r.push(new Os(i,o))}if(this._match(c.keywords.default)){this._match(c.tokens.colon),this._consume(c.tokens.brace_left,"Exected '{' for switch default.");var a=this._case_body();this._consume(c.tokens.brace_right,"Exected '}' for switch default."),r.push(new Cs(a))}if(this._check([c.keywords.default,c.keywords.case])){var s=this._switch_body();r.push(s[0])}return r},n._case_selectors=function(){for(var r,i,o,a,s=[(i=(r=this._shift_expression())===null||r===void 0?void 0:r.evaluate(this._context).toString())!==null&&i!==void 0?i:""];this._match(c.tokens.comma);)s.push((a=(o=this._shift_expression())===null||o===void 0?void 0:o.evaluate(this._context).toString())!==null&&a!==void 0?a:"");return s},n._case_body=function(){if(this._match(c.keywords.fallthrough))return this._consume(c.tokens.semicolon,"Expected ';'"),[];var r=this._statement();if(r==null)return[];r instanceof Array||(r=[r]);var i=this._case_body();return i.length==0?r:[].concat(ie(r),[i[0]])},n._if_statement=function(){if(!this._match(c.keywords.if))return null;var r=this._optional_paren_expression(),i=this._compound_statement(),o=[];this._match_elseif()&&(o=this._elseif_statement(o));var a=null;return this._match(c.keywords.else)&&(a=this._compound_statement()),new bs(r,i,o,a)},n._match_elseif=function(){return this._tokens[this._current].type===c.keywords.else&&this._tokens[this._current+1].type===c.keywords.if?(this._advance(),this._advance(),!0):!1},n._elseif_statement=function(){var r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:[],i=this._optional_paren_expression(),o=this._compound_statement();return r.push(new Rs(i,o)),this._match_elseif()&&this._elseif_statement(r),r},n._return_statement=function(){if(!this._match(c.keywords.return))return null;var r=this._short_circuit_or_expression();return new xs(r)},n._short_circuit_or_expression=function(){for(var r=this._short_circuit_and_expr();this._match(c.tokens.or_or);)r=new Y(this._previous().toString(),r,this._short_circuit_and_expr());return r},n._short_circuit_and_expr=function(){for(var r=this._inclusive_or_expression();this._match(c.tokens.and_and);)r=new Y(this._previous().toString(),r,this._inclusive_or_expression());return r},n._inclusive_or_expression=function(){for(var r=this._exclusive_or_expression();this._match(c.tokens.or);)r=new Y(this._previous().toString(),r,this._exclusive_or_expression());return r},n._exclusive_or_expression=function(){for(var r=this._and_expression();this._match(c.tokens.xor);)r=new Y(this._previous().toString(),r,this._and_expression());return r},n._and_expression=function(){for(var r=this._equality_expression();this._match(c.tokens.and);)r=new Y(this._previous().toString(),r,this._equality_expression());return r},n._equality_expression=function(){var r=this._relational_expression();return this._match([c.tokens.equal_equal,c.tokens.not_equal])?new Y(this._previous().toString(),r,this._relational_expression()):r},n._relational_expression=function(){for(var r=this._shift_expression();this._match([c.tokens.less_than,c.tokens.greater_than,c.tokens.less_than_equal,c.tokens.greater_than_equal]);)r=new Y(this._previous().toString(),r,this._shift_expression());return r},n._shift_expression=function(){for(var r=this._additive_expression();this._match([c.tokens.shift_left,c.tokens.shift_right]);)r=new Y(this._previous().toString(),r,this._additive_expression());return r},n._additive_expression=function(){for(var r=this._multiplicative_expression();this._match([c.tokens.plus,c.tokens.minus]);)r=new Y(this._previous().toString(),r,this._multiplicative_expression());return r},n._multiplicative_expression=function(){for(var r=this._unary_expression();this._match([c.tokens.star,c.tokens.forward_slash,c.tokens.modulo]);)r=new Y(this._previous().toString(),r,this._unary_expression());return r},n._unary_expression=function(){return this._match([c.tokens.minus,c.tokens.bang,c.tokens.tilde,c.tokens.star,c.tokens.and])?new Ns(this._previous().toString(),this._unary_expression()):this._singular_expression()},n._singular_expression=function(){var r=this._primary_expression(),i=this._postfix_expression();return i&&(r.postfix=i),r},n._postfix_expression=function(){if(this._match(c.tokens.bracket_left)){var r=this._short_circuit_or_expression();this._consume(c.tokens.bracket_right,"Expected ']'.");var i=this._postfix_expression();return i&&(r.postfix=i),r}if(this._match(c.tokens.period)){var o=this._consume(c.tokens.ident,"Expected member name."),a=this._postfix_expression(),s=new tr(o.lexeme);return a&&(s.postfix=a),s}return null},n._getStruct=function(r){if(this._context.aliases.has(r)){var i=this._context.aliases.get(r).type;return i}if(this._context.structs.has(r)){var o=this._context.structs.get(r);return o}return null},n._primary_expression=function(){if(this._match(c.tokens.ident)){var r=this._previous().toString();if(this._check(c.tokens.paren_left)){var i=this._argument_expression_list(),o=this._getStruct(r);return o!=null?new Ne(o,i):new Es(r,i)}if(this._context.constants.has(r)){var a=this._context.constants.get(r);return new rr(r,a.value)}return new ws(r)}if(this._match(c.const_literal))return new ir(parseFloat(this._previous().toString()));if(this._check(c.tokens.paren_left))return this._paren_expression();if(this._match(c.keywords.bitcast)){this._consume(c.tokens.less_than,"Expected '<'.");var s=this._type_decl();this._consume(c.tokens.greater_than,"Expected '>'.");var l=this._paren_expression();return new Is(s,l)}var f=this._type_decl(),p=this._argument_expression_list();return new Ts(f,p)},n._argument_expression_list=function(){if(!this._match(c.tokens.paren_left))return null;var r=[];do{if(this._check(c.tokens.paren_right))break;var i=this._short_circuit_or_expression();r.push(i)}while(this._match(c.tokens.comma));return this._consume(c.tokens.paren_right,"Expected ')' for agument list"),r},n._optional_paren_expression=function(){this._match(c.tokens.paren_left);var r=this._short_circuit_or_expression();return this._match(c.tokens.paren_right),new or([r])},n._paren_expression=function(){this._consume(c.tokens.paren_left,"Expected '('.");var r=this._short_circuit_or_expression();return this._consume(c.tokens.paren_right,"Expected ')'."),new or([r])},n._struct_decl=function(){if(!this._match(c.keywords.struct))return null;var r=this._consume(c.tokens.ident,"Expected name for struct.").toString();this._consume(c.tokens.brace_left,"Expected '{' for struct body.");for(var i=[];!this._check(c.tokens.brace_right);){var o=this._attribute(),a=this._consume(c.tokens.ident,"Expected variable name.").toString();this._consume(c.tokens.colon,"Expected ':' for struct member type.");var s=this._attribute(),l=this._type_decl();l!=null&&(l.attributes=s),this._check(c.tokens.brace_right)?this._match(c.tokens.comma):this._consume(c.tokens.comma,"Expected ',' for struct member."),i.push(new ks(a,l,o))}this._consume(c.tokens.brace_right,"Expected '}' after struct body.");var f=new ae(r,i);return this._context.structs.set(r,f),f},n._global_variable_decl=function(){var r=this._variable_decl();return r&&this._match(c.tokens.equal)&&(r.value=this._const_expression()),r},n._override_variable_decl=function(){var r=this._override_decl();return r&&this._match(c.tokens.equal)&&(r.value=this._const_expression()),r},n._global_const_decl=function(){if(!this._match(c.keywords.const))return null;var r=this._consume(c.tokens.ident,"Expected variable name"),i=null;if(this._match(c.tokens.colon)){var o=this._attribute();i=this._type_decl(),i!=null&&(i.attributes=o)}var a=null;if(this._match(c.tokens.equal)){var s=this._short_circuit_or_expression();if(s instanceof Ne)a=s;else if(s instanceof rr&&s.initializer instanceof Ne)a=s.initializer;else try{var l=s.evaluate(this._context);a=new ir(l)}catch{a=s}}var f=new nr(r.toString(),i,"","",a);return this._context.constants.set(f.name,f),f},n._global_let_decl=function(){if(!this._match(c.keywords.let))return null;var r=this._consume(c.tokens.ident,"Expected variable name"),i=null;if(this._match(c.tokens.colon)){var o=this._attribute();i=this._type_decl(),i!=null&&(i.attributes=o)}var a=null;return this._match(c.tokens.equal)&&(a=this._const_expression()),new er(r.toString(),i,"","",a)},n._const_expression=function(){if(this._match(c.const_literal))return new tr(this._previous().toString());var r=this._type_decl();this._consume(c.tokens.paren_left,"Expected '('.");for(var i=[];!this._check(c.tokens.paren_right)&&(i.push(this._const_expression()),!!this._check(c.tokens.comma));)this._advance();return this._consume(c.tokens.paren_right,"Expected ')'."),new Ne(r,i)},n._variable_decl=function(){if(!this._match(c.keywords.var))return null;var r="",i="";this._match(c.tokens.less_than)&&(r=this._consume(c.storage_class,"Expected storage_class.").toString(),this._match(c.tokens.comma)&&(i=this._consume(c.access_mode,"Expected access_mode.").toString()),this._consume(c.tokens.greater_than,"Expected '>'."));var o=this._consume(c.tokens.ident,"Expected variable name"),a=null;if(this._match(c.tokens.colon)){var s=this._attribute();a=this._type_decl(),a!=null&&(a.attributes=s)}return new de(o.toString(),a,r,i,null)},n._override_decl=function(){if(!this._match(c.keywords.override))return null;var r=this._consume(c.tokens.ident,"Expected variable name"),i=null;if(this._match(c.tokens.colon)){var o=this._attribute();i=this._type_decl(),i!=null&&(i.attributes=o)}return new pr(r.toString(),i,null)},n._enable_directive=function(){var r=this._consume(c.tokens.ident,"identity expected.");return new ys(r.toString())},n._type_alias=function(){var r=this._consume(c.tokens.ident,"identity expected.");this._consume(c.tokens.equal,"Expected '=' for type alias.");var i=this._type_decl();if(i===null)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(i.name)&&(i=this._context.aliases.get(i.name).type);var o=new dr(r.toString(),i);return this._context.aliases.set(o.name,o),o},n._type_decl=function(){if(this._check([c.tokens.ident].concat(ie(c.texel_format),[c.keywords.bool,c.keywords.f32,c.keywords.i32,c.keywords.u32]))){var r=this._advance(),i=r.toString();return this._context.structs.has(i)?this._context.structs.get(i):this._context.aliases.has(i)?this._context.aliases.get(i).type:new le(r.toString())}var o=this._texture_sampler_types();if(o)return o;if(this._check(c.template_types)){var a=this._advance().toString(),s=null,l=null;return this._match(c.tokens.less_than)&&(s=this._type_decl(),l=null,this._match(c.tokens.comma)&&(l=this._consume(c.access_mode,"Expected access_mode for pointer").toString()),this._consume(c.tokens.greater_than,"Expected '>' for type.")),new hr(a,s,l)}if(this._match(c.keywords.ptr)){var f=this._previous().toString();this._consume(c.tokens.less_than,"Expected '<' for pointer.");var p=this._consume(c.storage_class,"Expected storage_class for pointer");this._consume(c.tokens.comma,"Expected ',' for pointer.");var d=this._type_decl(),h=null;return this._match(c.tokens.comma)&&(h=this._consume(c.access_mode,"Expected access_mode for pointer").toString()),this._consume(c.tokens.greater_than,"Expected '>' for pointer."),new Ps(f,p.toString(),d,h)}var g=this._attribute();if(this._match(c.keywords.array)){var b=null,A=-1,L=this._previous();if(this._match(c.tokens.less_than)){b=this._type_decl(),this._context.aliases.has(b.name)&&(b=this._context.aliases.get(b.name).type);var E="";if(this._match(c.tokens.comma)){var T=this._shift_expression();E=T.evaluate(this._context).toString()}this._consume(c.tokens.greater_than,"Expected '>' for array."),A=E?parseInt(E):0}return new mr(L.toString(),g,b,A)}return null},n._texture_sampler_types=function(){if(this._match(c.sampler_type))return new Te(this._previous().toString(),null,null);if(this._match(c.depth_texture_type))return new Te(this._previous().toString(),null,null);if(this._match(c.sampled_texture_type)||this._match(c.multisampled_texture_type)){var r=this._previous();this._consume(c.tokens.less_than,"Expected '<' for sampler type.");var i=this._type_decl();return this._consume(c.tokens.greater_than,"Expected '>' for sampler type."),new Te(r.toString(),i,null)}if(this._match(c.storage_texture_type)){var o=this._previous();this._consume(c.tokens.less_than,"Expected '<' for sampler type.");var a=this._consume(c.texel_format,"Invalid texel format.").toString();this._consume(c.tokens.comma,"Expected ',' after texel format.");var s=this._consume(c.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(c.tokens.greater_than,"Expected '>' for sampler type."),new Te(o.toString(),a,s)}return null},n._attribute=function(){for(var r=[];this._match(c.tokens.attr);){var i=this._consume(c.attribute_name,"Expected attribute name"),o=new ar(i.toString(),null);if(this._match(c.tokens.paren_left)){if(o.value=this._consume(c.literal_or_ident,"Expected attribute value").toString(),this._check(c.tokens.comma)){this._advance();do{var a=this._consume(c.literal_or_ident,"Expected attribute value").toString();o.value instanceof Array||(o.value=[o.value]),o.value.push(a)}while(this._match(c.tokens.comma))}this._consume(c.tokens.paren_right,"Expected ')'")}r.push(o)}for(;this._match(c.tokens.attr_left);){if(!this._check(c.tokens.attr_right))do{var s=this._consume(c.attribute_name,"Expected attribute name"),l=new ar(s.toString(),null);if(this._match(c.tokens.paren_left)){if(l.value=[this._consume(c.literal_or_ident,"Expected attribute value").toString()],this._check(c.tokens.comma)){this._advance();do{var f=this._consume(c.literal_or_ident,"Expected attribute value").toString();l.value.push(f)}while(this._match(c.tokens.comma))}this._consume(c.tokens.paren_right,"Expected ')'")}r.push(l)}while(this._match(c.tokens.comma));this._consume(c.tokens.attr_right,"Expected ']]' after attribute declarations")}return r.length==0?null:r},x(e)}(),he=function(){function e(n,t){y(this,e),this.name=n,this.attributes=t,this.size=0}return x(e,[{key:"isArray",get:function(){return!1}},{key:"isStruct",get:function(){return!1}},{key:"isTemplate",get:function(){return!1}}]),e}(),lr=function(){function e(n,t,r){y(this,e),this.name=n,this.type=t,this.attributes=r,this.offset=0,this.size=0}return x(e,[{key:"isArray",get:function(){return this.type.isArray}},{key:"isStruct",get:function(){return this.type.isStruct}},{key:"isTemplate",get:function(){return this.type.isTemplate}},{key:"align",get:function(){return this.type.isStruct?this.type.align:0}},{key:"members",get:function(){return this.type.isStruct?this.type.members:null}},{key:"format",get:function(){return this.type.isArray?this.type.format:this.type.isTemplate?this.type.format:null}},{key:"count",get:function(){return this.type.isArray?this.type.count:0}},{key:"stride",get:function(){return this.type.isArray?this.type.stride:this.size}}]),e}(),Ge=function(e){N(t,e);var n=O(t);function t(r,i){var o;return y(this,t),o=n.call(this,r,i),o.members=[],o.align=0,o}return x(t,[{key:"isStruct",get:function(){return!0}}]),t}(he),mn=function(e){N(t,e);var n=O(t);function t(r,i){var o;return y(this,t),o=n.call(this,r,i),o.count=0,o.stride=0,o}return x(t,[{key:"isArray",get:function(){return!0}}]),t}(he),cr=function(e){N(t,e);var n=O(t);function t(r,i,o,a){var s;return y(this,t),s=n.call(this,r,o),s.format=i,s.access=a,s}return x(t,[{key:"isTemplate",get:function(){return!0}}]),t}(he),re;(function(e){e[e.Uniform=0]="Uniform",e[e.Storage=1]="Storage",e[e.Texture=2]="Texture",e[e.Sampler=3]="Sampler",e[e.StorageTexture=4]="StorageTexture"})(re||(re={}));var He=function(){function e(n,t,r,i,o,a,s){y(this,e),this.name=n,this.type=t,this.group=r,this.binding=i,this.attributes=o,this.resourceType=a,this.access=s}return x(e,[{key:"isArray",get:function(){return this.type.isArray}},{key:"isStruct",get:function(){return this.type.isStruct}},{key:"isTemplate",get:function(){return this.type.isTemplate}},{key:"size",get:function(){return this.type.size}},{key:"align",get:function(){return this.type.isStruct?this.type.align:0}},{key:"members",get:function(){return this.type.isStruct?this.type.members:null}},{key:"format",get:function(){return this.type.isArray?this.type.format:this.type.isTemplate?this.type.format:null}},{key:"count",get:function(){return this.type.isArray?this.type.count:0}},{key:"stride",get:function(){return this.type.isArray?this.type.stride:this.size}}]),e}(),Ds=x(function e(n,t){y(this,e),this.name=n,this.type=t}),Ve=x(function e(n,t){y(this,e),this.align=n,this.size=t}),zs=x(function e(n,t,r,i){y(this,e),this.name=n,this.type=t,this.locationType=r,this.location=i,this.interpolation=null}),fr=x(function e(n,t,r,i){y(this,e),this.name=n,this.type=t,this.locationType=r,this.location=i}),Bs=x(function e(n){var t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null;y(this,e),this.stage=null,this.inputs=[],this.outputs=[],this.name=n,this.stage=t}),js=x(function e(){y(this,e),this.vertex=[],this.fragment=[],this.compute=[]}),Gs=x(function e(n,t,r,i){y(this,e),this.name=n,this.type=t,this.attributes=r,this.id=i}),Ce=function(){function e(t){y(this,e),this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new js,this._types=new Map,t&&this.update(t)}var n=e.prototype;return n._isStorageTexture=function(r){return r.name=="texture_storage_1d"||r.name=="texture_storage_2d"||r.name=="texture_storage_2d_array"||r.name=="texture_storage_3d"},n.update=function(r){var i=new Us,o=i.parse(r),a=j(o),s;try{for(a.s();!(s=a.n()).done;){var l=s.value;if(l instanceof ae){var f=this._getTypeInfo(l,null);f instanceof Ge&&this.structs.push(f);continue}if(l instanceof dr){this.aliases.push(this._getAliasInfo(l));continue}if(l instanceof pr){var p=l,d=this._getAttributeNum(p.attributes,"id",0),h=p.type!=null?this._getTypeInfo(p.type,p.attributes):null;this.overrides.push(new Gs(p.name,h,p.attributes,d));continue}if(this._isUniformVar(l)){var g=l,b=this._getAttributeNum(g.attributes,"group",0),A=this._getAttributeNum(g.attributes,"binding",0),L=this._getTypeInfo(g.type,g.attributes),E=new He(g.name,L,b,A,g.attributes,re.Uniform,g.access);this.uniforms.push(E);continue}if(this._isStorageVar(l)){var T=l,w=this._getAttributeNum(T.attributes,"group",0),I=this._getAttributeNum(T.attributes,"binding",0),S=this._getTypeInfo(T.type,T.attributes),P=this._isStorageTexture(S),F=new He(T.name,S,w,I,T.attributes,P?re.StorageTexture:re.Storage,T.access);this.storage.push(F);continue}if(this._isTextureVar(l)){var k=l,D=this._getAttributeNum(k.attributes,"group",0),M=this._getAttributeNum(k.attributes,"binding",0),R=this._getTypeInfo(k.type,k.attributes),U=this._isStorageTexture(R),B=new He(k.name,R,D,M,k.attributes,U?re.StorageTexture:re.Texture,k.access);U?this.storage.push(B):this.textures.push(B);continue}if(this._isSamplerVar(l)){var C=l,X=this._getAttributeNum(C.attributes,"group",0),tn=this._getAttributeNum(C.attributes,"binding",0),ue=this._getTypeInfo(C.type,C.attributes),Me=new He(C.name,ue,X,tn,C.attributes,re.Sampler,C.access);this.samplers.push(Me);continue}if(l instanceof _r){var xe=this._getAttribute(l,"vertex"),rn=this._getAttribute(l,"fragment"),ye=this._getAttribute(l,"compute"),H=xe||rn||ye;if(H){var _e=new Bs(l.name,H.name);_e.inputs=this._getInputs(l.args),_e.outputs=this._getOutputs(l.returnType),this.entry[H.name].push(_e)}continue}}}catch(on){a.e(on)}finally{a.f()}},n.getBindGroups=function(){var r=[];function i(S,P){S>=r.length&&(r.length=S+1),r[S]===void 0&&(r[S]=[]),P>=r[S].length&&(r[S].length=P+1)}var o=j(this.uniforms),a;try{for(o.s();!(a=o.n()).done;){var s=a.value;i(s.group,s.binding);var l=r[s.group];l[s.binding]=s}}catch(S){o.e(S)}finally{o.f()}var f=j(this.storage),p;try{for(f.s();!(p=f.n()).done;){var d=p.value;i(d.group,d.binding);var h=r[d.group];h[d.binding]=d}}catch(S){f.e(S)}finally{f.f()}var g=j(this.textures),b;try{for(g.s();!(b=g.n()).done;){var A=b.value;i(A.group,A.binding);var L=r[A.group];L[A.binding]=A}}catch(S){g.e(S)}finally{g.f()}var E=j(this.samplers),T;try{for(E.s();!(T=E.n()).done;){var w=T.value;i(w.group,w.binding);var I=r[w.group];I[w.binding]=w}}catch(S){E.e(S)}finally{E.f()}return r},n._getOutputs=function(r){var i=arguments.length>1&&arguments[1]!==void 0?arguments[1]:void 0;if(i===void 0&&(i=[]),r instanceof ae)this._getStructOutputs(r,i);else{var o=this._getOutputInfo(r);o!==null&&i.push(o)}return i},n._getStructOutputs=function(r,i){var o=j(r.members),a;try{for(o.s();!(a=o.n()).done;){var s=a.value;if(s.type instanceof ae)this._getStructOutputs(s.type,i);else{var l=this._getAttribute(s,"location")||this._getAttribute(s,"builtin");if(l!==null){var f=this._getTypeInfo(s.type,s.type.attributes),p=this._parseInt(l.value),d=new fr(s.name,f,l.name,p);i.push(d)}}}}catch(h){o.e(h)}finally{o.f()}},n._getOutputInfo=function(r){var i=this._getAttribute(r,"location")||this._getAttribute(r,"builtin");if(i!==null){var o=this._getTypeInfo(r,r.attributes),a=this._parseInt(i.value),s=new fr("",o,i.name,a);return s}return null},n._getInputs=function(r){var i=arguments.length>1&&arguments[1]!==void 0?arguments[1]:void 0;i===void 0&&(i=[]);var o=j(r),a;try{for(o.s();!(a=o.n()).done;){var s=a.value;if(s.type instanceof ae)this._getStructInputs(s.type,i);else{var l=this._getInputInfo(s);l!==null&&i.push(l)}}}catch(f){o.e(f)}finally{o.f()}return i},n._getStructInputs=function(r,i){var o=j(r.members),a;try{for(o.s();!(a=o.n()).done;){var s=a.value;if(s.type instanceof ae)this._getStructInputs(s.type,i);else{var l=this._getInputInfo(s);l!==null&&i.push(l)}}}catch(f){o.e(f)}finally{o.f()}},n._getInputInfo=function(r){var i=this._getAttribute(r,"location")||this._getAttribute(r,"builtin");if(i!==null){var o=this._getAttribute(r,"interpolation"),a=this._getTypeInfo(r.type,r.attributes),s=this._parseInt(i.value),l=new zs(r.name,a,i.name,s);return o!==null&&(l.interpolation=this._parseString(o.value)),l}return null},n._parseString=function(r){return r instanceof Array&&(r=r[0]),r},n._parseInt=function(r){r instanceof Array&&(r=r[0]);var i=parseInt(r);return isNaN(i)?r:i},n._getAlias=function(r){var i=j(this.aliases),o;try{for(i.s();!(o=i.n()).done;){var a=o.value;if(a.name==r)return a.type}}catch(s){i.e(s)}finally{i.f()}return null},n._getAliasInfo=function(r){return new Ds(r.name,this._getTypeInfo(r.type,null))},n._getTypeInfo=function(r,i){if(this._types.has(r))return this._types.get(r);if(r instanceof mr){var o=r,a=this._getTypeInfo(o.format,o.attributes),s=new mn(o.name,i);return s.format=a,s.count=o.count,this._types.set(r,s),this._updateTypeInfo(s),s}if(r instanceof ae){var l=r,f=new Ge(l.name,i),p=j(l.members),d;try{for(p.s();!(d=p.n()).done;){var h=d.value,g=this._getTypeInfo(h.type,h.attributes);f.members.push(new lr(h.name,g,h.attributes))}}catch(P){p.e(P)}finally{p.f()}return this._types.set(r,f),this._updateTypeInfo(f),f}if(r instanceof Te){var b=r,A=b.format instanceof le,L=b.format?A?this._getTypeInfo(b.format,null):new he(b.format,null):null,E=new cr(b.name,L,i,b.access);return this._types.set(r,E),this._updateTypeInfo(E),E}if(r instanceof hr){var T=r,w=T.format?this._getTypeInfo(T.format,null):null,I=new cr(T.name,w,i,T.access);return this._types.set(r,I),this._updateTypeInfo(I),I}var S=new he(r.name,i);return this._types.set(r,S),this._updateTypeInfo(S),S},n._updateTypeInfo=function(r){var i,o,a=this._getTypeSize(r);if(r.size=(i=a?.size)!==null&&i!==void 0?i:0,r instanceof mn){var s=this._getTypeSize(r.format);r.stride=(o=s?.size)!==null&&o!==void 0?o:0,this._updateTypeInfo(r.format)}r instanceof Ge&&this._updateStructInfo(r)},n._updateStructInfo=function(r){for(var i,o=0,a=0,s=0,l=0,f=0,p=r.members.length;f<p;++f){var d=r.members[f],h=this._getTypeSize(d);if(h){(i=this._getAlias(d.type.name))!==null&&i!==void 0||d.type;var g=h.align,b=h.size;o=this._roundUp(g,o+a),a=b,s=o,l=Math.max(l,g),d.offset=o,d.size=b,this._updateTypeInfo(d.type)}}r.size=this._roundUp(l,s+a),r.align=l},n._getTypeSize=function(r){var i;if(r==null)return null;var o=this._getAttributeNum(r.attributes,"size",0),a=this._getAttributeNum(r.attributes,"align",0);if(r instanceof lr&&(r=r.type),r instanceof he){var s=this._getAlias(r.name);s!==null&&(r=s)}{var l=e._typeInfo[r.name];if(l!==void 0){var f=r.format==="f16"?2:1;return new Ve(Math.max(a,l.align/f),Math.max(o,l.size/f))}}{var p=e._typeInfo[r.name.substring(0,r.name.length-1)];if(p){var d=r.name[r.name.length-1]==="h"?2:1;return new Ve(Math.max(a,p.align/d),Math.max(o,p.size/d))}}if(r instanceof mn){var h=r,g=8,b=8,A=this._getTypeSize(h.format);A!==null&&(b=A.size,g=A.align);var L=h.count,E=this._getAttributeNum((i=r?.attributes)!==null&&i!==void 0?i:null,"stride",this._roundUp(g,b));return b=L*E,o&&(b=o),new Ve(Math.max(a,g),Math.max(o,b))}if(r instanceof Ge){var T=0,w=0,I=0,S=0,P=0,F=j(r.members),k;try{for(F.s();!(k=F.n()).done;){var D=k.value,M=this._getTypeSize(D.type);M!==null&&(T=Math.max(M.align,T),I=this._roundUp(M.align,I+S),S=M.size,P=I)}}catch(R){F.e(R)}finally{F.f()}return w=this._roundUp(T,P+S),new Ve(Math.max(a,T),Math.max(o,w))}return null},n._isUniformVar=function(r){return r instanceof de&&r.storage=="uniform"},n._isStorageVar=function(r){return r instanceof de&&r.storage=="storage"},n._isTextureVar=function(r){return r instanceof de&&r.type!==null&&e._textureTypes.indexOf(r.type.name)!=-1},n._isSamplerVar=function(r){return r instanceof de&&r.type!==null&&e._samplerTypes.indexOf(r.type.name)!=-1},n._getAttribute=function(r,i){var o=r;if(!o||!o.attributes)return null;var a=o.attributes,s=j(a),l;try{for(s.s();!(l=s.n()).done;){var f=l.value;if(f.name==i)return f}}catch(p){s.e(p)}finally{s.f()}return null},n._getAttributeNum=function(r,i,o){if(r===null)return o;var a=j(r),s;try{for(a.s();!(s=a.n()).done;){var l=s.value;if(l.name==i){var f=l!==null&&l.value!==null?l.value:o;return f instanceof Array&&(f=f[0]),typeof f=="number"?f:typeof f=="string"?parseInt(f):o}}}catch(p){a.e(p)}finally{a.f()}return o},n._roundUp=function(r,i){return Math.ceil(i/r)*r},x(e)}();Ce._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}};Ce._textureTypes=c.any_texture_type.map(function(e){return e.name});Ce._samplerTypes=c.sampler_type.map(function(e){return e.name});function We(e){return We=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(n){return typeof n}:function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},We(e)}function br(e,n){var t=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Hs(e))||n&&e&&typeof e.length=="number"){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(f){throw f},f:i}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var o=!0,a=!1,s;return{s:function(){t=t.call(e)},n:function(){var f=t.next();return o=f.done,f},e:function(f){a=!0,s=f},f:function(){try{!o&&t.return!=null&&t.return()}finally{if(a)throw s}}}}function Hs(e,n){if(e){if(typeof e=="string")return xr(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor&&(t=e.constructor.name),t==="Map"||t==="Set")return Array.from(e);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return xr(e,n)}}function xr(e,n){(n==null||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Ar(e){var n={attributes:[],bindings:[]},t=Vs(e),r=br(t.uniforms),i;try{for(r.s();!(i=r.n()).done;){var o=i.value,a=[],s=br(o.type.members),l;try{for(s.s();!(l=s.n()).done;){var f=l.value;a.push({name:f.name,type:yr(f.type)})}}catch(A){s.e(A)}finally{s.f()}n.bindings.push({type:"uniform",name:o.name,location:o.binding,group:o.group,members:a})}}catch(A){r.e(A)}finally{r.f()}for(var p=t.entry.vertex[0],d=p.inputs.length,h=0;h<d;h++){var g=p.inputs[h];if(g.locationType==="location"){var b=yr(g.type);n.attributes.push({name:g.name,location:g.location,type:b})}}return n}function yr(e){return e.format?"".concat(e.name,"<").concat(e.format.name,">"):e.name}function Vs(e){try{return new Ce(e)}catch(t){if(t instanceof Error)throw t;var n="WGSL parse error";throw We(t)==="object"&&t!==null&&t!==void 0&&t.message&&(n+=": ".concat(t.message," ")),We(t)==="object"&&t!==null&&t!==void 0&&t.token&&(n+=t.token.line||""),new Error(n,{cause:t})}}var Sr;function Xs(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Ws=v(Sr||(Sr=Xs([`float random(vec3 scale, float seed) {
  /* use the fragment position for a different seed per-pixel */
  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);
}
`],[`\\
float random(vec3 scale, float seed) {
  /* use the fragment position for a different seed per-pixel */
  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);
}
`]))),K={name:"random",fs:Ws};var Lr;function qs(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Ys=v(Lr||(Lr=qs([`#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND

// All these functions are for substituting tan() function from Intel GPU only
const float TWO_PI = 6.2831854820251465;
const float PI_2 = 1.5707963705062866;
const float PI_16 = 0.1963495463132858;

const float SIN_TABLE_0 = 0.19509032368659973;
const float SIN_TABLE_1 = 0.3826834261417389;
const float SIN_TABLE_2 = 0.5555702447891235;
const float SIN_TABLE_3 = 0.7071067690849304;

const float COS_TABLE_0 = 0.9807852506637573;
const float COS_TABLE_1 = 0.9238795042037964;
const float COS_TABLE_2 = 0.8314695954322815;
const float COS_TABLE_3 = 0.7071067690849304;

const float INVERSE_FACTORIAL_3 = 1.666666716337204e-01; // 1/3!
const float INVERSE_FACTORIAL_5 = 8.333333767950535e-03; // 1/5!
const float INVERSE_FACTORIAL_7 = 1.9841270113829523e-04; // 1/7!
const float INVERSE_FACTORIAL_9 = 2.75573188446287533e-06; // 1/9!

float sin_taylor_fp32(float a) {
  float r, s, t, x;

  if (a == 0.0) {
    return 0.0;
  }

  x = -a * a;
  s = a;
  r = a;

  r = r * x;
  t = r * INVERSE_FACTORIAL_3;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_5;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_7;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_9;
  s = s + t;

  return s;
}

void sincos_taylor_fp32(float a, out float sin_t, out float cos_t) {
  if (a == 0.0) {
    sin_t = 0.0;
    cos_t = 1.0;
  }
  sin_t = sin_taylor_fp32(a);
  cos_t = sqrt(1.0 - sin_t * sin_t);
}

float tan_taylor_fp32(float a) {
    float sin_a;
    float cos_a;

    if (a == 0.0) {
        return 0.0;
    }

    // 2pi range reduction
    float z = floor(a / TWO_PI);
    float r = a - TWO_PI * z;

    float t;
    float q = floor(r / PI_2 + 0.5);
    int j = int(q);

    if (j < -2 || j > 2) {
        return 1.0 / 0.0;
    }

    t = r - PI_2 * q;

    q = floor(t / PI_16 + 0.5);
    int k = int(q);
    int abs_k = int(abs(float(k)));

    if (abs_k > 4) {
        return 1.0 / 0.0;
    } else {
        t = t - PI_16 * q;
    }

    float u = 0.0;
    float v = 0.0;

    float sin_t, cos_t;
    float s, c;
    sincos_taylor_fp32(t, sin_t, cos_t);

    if (k == 0) {
        s = sin_t;
        c = cos_t;
    } else {
        if (abs(float(abs_k) - 1.0) < 0.5) {
            u = COS_TABLE_0;
            v = SIN_TABLE_0;
        } else if (abs(float(abs_k) - 2.0) < 0.5) {
            u = COS_TABLE_1;
            v = SIN_TABLE_1;
        } else if (abs(float(abs_k) - 3.0) < 0.5) {
            u = COS_TABLE_2;
            v = SIN_TABLE_2;
        } else if (abs(float(abs_k) - 4.0) < 0.5) {
            u = COS_TABLE_3;
            v = SIN_TABLE_3;
        }
        if (k > 0) {
            s = u * sin_t + v * cos_t;
            c = u * cos_t - v * sin_t;
        } else {
            s = u * sin_t - v * cos_t;
            c = u * cos_t + v * sin_t;
        }
    }

    if (j == 0) {
        sin_a = s;
        cos_a = c;
    } else if (j == 1) {
        sin_a = c;
        cos_a = -s;
    } else if (j == -1) {
        sin_a = -c;
        cos_a = s;
    } else {
        sin_a = -s;
        cos_a = -c;
    }
    return sin_a / cos_a;
}
#endif

float tan_fp32(float a) {
#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND
  return tan_taylor_fp32(a);
#else
  return tan(a);
#endif
}
`],[`\\
#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND

// All these functions are for substituting tan() function from Intel GPU only
const float TWO_PI = 6.2831854820251465;
const float PI_2 = 1.5707963705062866;
const float PI_16 = 0.1963495463132858;

const float SIN_TABLE_0 = 0.19509032368659973;
const float SIN_TABLE_1 = 0.3826834261417389;
const float SIN_TABLE_2 = 0.5555702447891235;
const float SIN_TABLE_3 = 0.7071067690849304;

const float COS_TABLE_0 = 0.9807852506637573;
const float COS_TABLE_1 = 0.9238795042037964;
const float COS_TABLE_2 = 0.8314695954322815;
const float COS_TABLE_3 = 0.7071067690849304;

const float INVERSE_FACTORIAL_3 = 1.666666716337204e-01; // 1/3!
const float INVERSE_FACTORIAL_5 = 8.333333767950535e-03; // 1/5!
const float INVERSE_FACTORIAL_7 = 1.9841270113829523e-04; // 1/7!
const float INVERSE_FACTORIAL_9 = 2.75573188446287533e-06; // 1/9!

float sin_taylor_fp32(float a) {
  float r, s, t, x;

  if (a == 0.0) {
    return 0.0;
  }

  x = -a * a;
  s = a;
  r = a;

  r = r * x;
  t = r * INVERSE_FACTORIAL_3;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_5;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_7;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_9;
  s = s + t;

  return s;
}

void sincos_taylor_fp32(float a, out float sin_t, out float cos_t) {
  if (a == 0.0) {
    sin_t = 0.0;
    cos_t = 1.0;
  }
  sin_t = sin_taylor_fp32(a);
  cos_t = sqrt(1.0 - sin_t * sin_t);
}

float tan_taylor_fp32(float a) {
    float sin_a;
    float cos_a;

    if (a == 0.0) {
        return 0.0;
    }

    // 2pi range reduction
    float z = floor(a / TWO_PI);
    float r = a - TWO_PI * z;

    float t;
    float q = floor(r / PI_2 + 0.5);
    int j = int(q);

    if (j < -2 || j > 2) {
        return 1.0 / 0.0;
    }

    t = r - PI_2 * q;

    q = floor(t / PI_16 + 0.5);
    int k = int(q);
    int abs_k = int(abs(float(k)));

    if (abs_k > 4) {
        return 1.0 / 0.0;
    } else {
        t = t - PI_16 * q;
    }

    float u = 0.0;
    float v = 0.0;

    float sin_t, cos_t;
    float s, c;
    sincos_taylor_fp32(t, sin_t, cos_t);

    if (k == 0) {
        s = sin_t;
        c = cos_t;
    } else {
        if (abs(float(abs_k) - 1.0) < 0.5) {
            u = COS_TABLE_0;
            v = SIN_TABLE_0;
        } else if (abs(float(abs_k) - 2.0) < 0.5) {
            u = COS_TABLE_1;
            v = SIN_TABLE_1;
        } else if (abs(float(abs_k) - 3.0) < 0.5) {
            u = COS_TABLE_2;
            v = SIN_TABLE_2;
        } else if (abs(float(abs_k) - 4.0) < 0.5) {
            u = COS_TABLE_3;
            v = SIN_TABLE_3;
        }
        if (k > 0) {
            s = u * sin_t + v * cos_t;
            c = u * cos_t - v * sin_t;
        } else {
            s = u * sin_t - v * cos_t;
            c = u * cos_t + v * sin_t;
        }
    }

    if (j == 0) {
        sin_a = s;
        cos_a = c;
    } else if (j == 1) {
        sin_a = c;
        cos_a = -s;
    } else if (j == -1) {
        sin_a = -c;
        cos_a = s;
    } else {
        sin_a = -s;
        cos_a = -c;
    }
    return sin_a / cos_a;
}
#endif

float tan_fp32(float a) {
#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND
  return tan_taylor_fp32(a);
#else
  return tan(a);
#endif
}
`]))),Pr={name:"fp32",vs:Ys};var Er,wr;function Ir(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Qs=new Float32Array([0,1,1,1]),Ks=v(Er||(Er=Ir([`uniform pickingUniforms {
  float isActive;
  float isAttribute;
  float isHighlightActive;
  float useFloatColors;
  vec3 highlightedObjectColor;
  vec4 highlightColor;
} picking;

out vec4 picking_vRGBcolor_Avalid;

// Normalize unsigned byte color to 0-1 range
vec3 picking_normalizeColor(vec3 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

// Normalize unsigned byte color to 0-1 range
vec4 picking_normalizeColor(vec4 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

bool picking_isColorZero(vec3 color) {
  return dot(color, vec3(1.0)) < 0.00001;
}

bool picking_isColorValid(vec3 color) {
  return dot(color, vec3(1.0)) > 0.00001;
}

// Check if this vertex is highlighted 
bool isVertexHighlighted(vec3 vertexColor) {
  vec3 highlightedObjectColor = picking_normalizeColor(picking.highlightedObjectColor);
  return
    bool(picking.isHighlightActive) && picking_isColorZero(abs(vertexColor - highlightedObjectColor));
}

// Set the current picking color
void picking_setPickingColor(vec3 pickingColor) {
  pickingColor = picking_normalizeColor(pickingColor);

  if (bool(picking.isActive)) {
    // Use alpha as the validity flag. If pickingColor is [0, 0, 0] fragment is non-pickable
    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));

    // if (!bool(picking.isAttribute)) {
    // Stores the picking color so that the fragment shader can render it during picking
    picking_vRGBcolor_Avalid.rgb = pickingColor;
    // }
  } else {
    // Do the comparison with selected item color in vertex shader as it should mean fewer compares
    picking_vRGBcolor_Avalid.a = float(isVertexHighlighted(pickingColor));
  }
}

void picking_setPickingAttribute(float value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.r = value;
  }
}

void picking_setPickingAttribute(vec2 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rg = value;
  }
}

void picking_setPickingAttribute(vec3 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rgb = value;
  }
}
`],[`\\
uniform pickingUniforms {
  float isActive;
  float isAttribute;
  float isHighlightActive;
  float useFloatColors;
  vec3 highlightedObjectColor;
  vec4 highlightColor;
} picking;

out vec4 picking_vRGBcolor_Avalid;

// Normalize unsigned byte color to 0-1 range
vec3 picking_normalizeColor(vec3 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

// Normalize unsigned byte color to 0-1 range
vec4 picking_normalizeColor(vec4 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

bool picking_isColorZero(vec3 color) {
  return dot(color, vec3(1.0)) < 0.00001;
}

bool picking_isColorValid(vec3 color) {
  return dot(color, vec3(1.0)) > 0.00001;
}

// Check if this vertex is highlighted 
bool isVertexHighlighted(vec3 vertexColor) {
  vec3 highlightedObjectColor = picking_normalizeColor(picking.highlightedObjectColor);
  return
    bool(picking.isHighlightActive) && picking_isColorZero(abs(vertexColor - highlightedObjectColor));
}

// Set the current picking color
void picking_setPickingColor(vec3 pickingColor) {
  pickingColor = picking_normalizeColor(pickingColor);

  if (bool(picking.isActive)) {
    // Use alpha as the validity flag. If pickingColor is [0, 0, 0] fragment is non-pickable
    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));

    // if (!bool(picking.isAttribute)) {
    // Stores the picking color so that the fragment shader can render it during picking
    picking_vRGBcolor_Avalid.rgb = pickingColor;
    // }
  } else {
    // Do the comparison with selected item color in vertex shader as it should mean fewer compares
    picking_vRGBcolor_Avalid.a = float(isVertexHighlighted(pickingColor));
  }
}

void picking_setPickingAttribute(float value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.r = value;
  }
}

void picking_setPickingAttribute(vec2 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rg = value;
  }
}

void picking_setPickingAttribute(vec3 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rgb = value;
  }
}
`]))),$s=v(wr||(wr=Ir([`uniform pickingUniforms {
  float isActive;
  float isAttribute;
  float isHighlightActive;
  float useFloatColors;
  vec3 highlightedObjectColor;
  vec4 highlightColor;
} picking;

in vec4 picking_vRGBcolor_Avalid;

/*
 * Returns highlight color if this item is selected.
 */
vec4 picking_filterHighlightColor(vec4 color) {
  // If we are still picking, we don't highlight
  if (picking.isActive > 0.5) {
    return color;
  }

  bool selected = bool(picking_vRGBcolor_Avalid.a);

  if (selected) {
    // Blend in highlight color based on its alpha value
    float highLightAlpha = picking.highlightColor.a;
    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);
    float highLightRatio = highLightAlpha / blendedAlpha;

    vec3 blendedRGB = mix(color.rgb, picking.highlightColor.rgb, highLightRatio);
    return vec4(blendedRGB, blendedAlpha);
  } else {
    return color;
  }
}

/*
 * Returns picking color if picking enabled else unmodified argument.
 */
vec4 picking_filterPickingColor(vec4 color) {
  if (bool(picking.isActive)) {
    if (picking_vRGBcolor_Avalid.a == 0.0) {
      discard;
    }
    return picking_vRGBcolor_Avalid;
  }
  return color;
}

/*
 * Returns picking color if picking is enabled if not
 * highlight color if this item is selected, otherwise unmodified argument.
 */
vec4 picking_filterColor(vec4 color) {
  vec4 highlightColor = picking_filterHighlightColor(color);
  return picking_filterPickingColor(highlightColor);
}
`],[`\\
uniform pickingUniforms {
  float isActive;
  float isAttribute;
  float isHighlightActive;
  float useFloatColors;
  vec3 highlightedObjectColor;
  vec4 highlightColor;
} picking;

in vec4 picking_vRGBcolor_Avalid;

/*
 * Returns highlight color if this item is selected.
 */
vec4 picking_filterHighlightColor(vec4 color) {
  // If we are still picking, we don't highlight
  if (picking.isActive > 0.5) {
    return color;
  }

  bool selected = bool(picking_vRGBcolor_Avalid.a);

  if (selected) {
    // Blend in highlight color based on its alpha value
    float highLightAlpha = picking.highlightColor.a;
    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);
    float highLightRatio = highLightAlpha / blendedAlpha;

    vec3 blendedRGB = mix(color.rgb, picking.highlightColor.rgb, highLightRatio);
    return vec4(blendedRGB, blendedAlpha);
  } else {
    return color;
  }
}

/*
 * Returns picking color if picking enabled else unmodified argument.
 */
vec4 picking_filterPickingColor(vec4 color) {
  if (bool(picking.isActive)) {
    if (picking_vRGBcolor_Avalid.a == 0.0) {
      discard;
    }
    return picking_vRGBcolor_Avalid;
  }
  return color;
}

/*
 * Returns picking color if picking is enabled if not
 * highlight color if this item is selected, otherwise unmodified argument.
 */
vec4 picking_filterColor(vec4 color) {
  vec4 highlightColor = picking_filterHighlightColor(color);
  return picking_filterPickingColor(highlightColor);
}
`]))),Tr={name:"picking",vs:Ks,fs:$s,uniformTypes:{isActive:"f32",isAttribute:"f32",isHighlightActive:"f32",useFloatColors:"f32",highlightedObjectColor:"vec3<f32>",highlightColor:"vec4<f32>"},defaultUniforms:{isActive:!1,isAttribute:!1,isHighlightActive:!1,useFloatColors:!0,highlightedObjectColor:new Float32Array([0,0,0]),highlightColor:Qs},getUniforms:Zs};function Zs(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0,t={};if(e.highlightedObjectColor!==void 0)if(e.highlightedObjectColor===null)t.isHighlightActive=!1;else{t.isHighlightActive=!0;var r=e.highlightedObjectColor.slice(0,3);t.highlightedObjectColor=r}if(e.highlightColor){var i=Array.from(e.highlightColor,function(o){return o/255});Number.isFinite(i[3])||(i[3]=1),t.highlightColor=i}return e.isActive!==void 0&&(t.isActive=Boolean(e.isActive),t.isAttribute=Boolean(e.isAttribute)),e.useFloatColors!==void 0&&(t.useFloatColors=Boolean(e.useFloatColors)),t}var Nr;function Js(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var bn=v(Nr||(Nr=Js([`precision highp int;

// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))
struct AmbientLight {
  vec3 color;
};

struct PointLight {
  vec3 color;
  vec3 position;
  vec3 attenuation; // 2nd order x:Constant-y:Linear-z:Exponential
};

struct DirectionalLight {
  vec3 color;
  vec3 direction;
};

uniform lightingUniforms {
  int enabled;
  int pointLightCount;
  int directionalLightCount;

  vec3 ambientColor;

  int lightType;
  vec3 lightColor;
  vec3 lightDirection;
  vec3 lightPosition;
  vec3 lightAttenuation;

  // AmbientLight ambientLight;
  // PointLight pointLight[MAX_LIGHTS];
  // DirectionalLight directionalLight[MAX_LIGHTS];
} lighting;

PointLight lighting_getPointLight(int index) {
  return PointLight(lighting.lightColor, lighting.lightPosition, lighting.lightAttenuation);
}

DirectionalLight lighting_getDirectionalLight(int index) {
  return DirectionalLight(lighting.lightColor, lighting.lightDirection);
} 

float getPointLightAttenuation(PointLight pointLight, float distance) {
  return pointLight.attenuation.x
       + pointLight.attenuation.y * distance
       + pointLight.attenuation.z * distance * distance;
}

// #endif
`],[`\\
precision highp int;

// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))
struct AmbientLight {
  vec3 color;
};

struct PointLight {
  vec3 color;
  vec3 position;
  vec3 attenuation; // 2nd order x:Constant-y:Linear-z:Exponential
};

struct DirectionalLight {
  vec3 color;
  vec3 direction;
};

uniform lightingUniforms {
  int enabled;
  int pointLightCount;
  int directionalLightCount;

  vec3 ambientColor;

  int lightType;
  vec3 lightColor;
  vec3 lightDirection;
  vec3 lightPosition;
  vec3 lightAttenuation;

  // AmbientLight ambientLight;
  // PointLight pointLight[MAX_LIGHTS];
  // DirectionalLight directionalLight[MAX_LIGHTS];
} lighting;

PointLight lighting_getPointLight(int index) {
  return PointLight(lighting.lightColor, lighting.lightPosition, lighting.lightAttenuation);
}

DirectionalLight lighting_getDirectionalLight(int index) {
  return DirectionalLight(lighting.lightColor, lighting.lightDirection);
} 

float getPointLightAttenuation(PointLight pointLight, float distance) {
  return pointLight.attenuation.x
       + pointLight.attenuation.y * distance
       + pointLight.attenuation.z * distance * distance;
}

// #endif
`])));function Fe(e){return Fe=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(n){return typeof n}:function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Fe(e)}function yn(e,n){var t=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=el(e))||n&&e&&typeof e.length=="number"){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(f){throw f},f:i}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var o=!0,a=!1,s;return{s:function(){t=t.call(e)},n:function(){var f=t.next();return o=f.done,f},e:function(f){a=!0,s=f},f:function(){try{!o&&t.return!=null&&t.return()}finally{if(a)throw s}}}}function el(e,n){if(e){if(typeof e=="string")return Or(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor&&(t=e.constructor.name),t==="Map"||t==="Set")return Array.from(e);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return Or(e,n)}}function Or(e,n){(n==null||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function Cr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),t.push.apply(t,r)}return t}function $(e){for(var n=1;n<arguments.length;n++){var t=arguments[n]!=null?arguments[n]:{};n%2?Cr(Object(t),!0).forEach(function(r){nl(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Cr(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function nl(e,n,t){return n=tl(n),n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function tl(e){var n=rl(e,"string");return Fe(n)==="symbol"?n:String(n)}function rl(e,n){if(Fe(e)!=="object"||e===null)return e;var t=e[Symbol.toPrimitive];if(t!==void 0){var r=t.call(e,n||"default");if(Fe(r)!=="object")return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return(n==="string"?String:Number)(e)}var il=5,ol=255,qe=function(e){return e[e.POINT=0]="POINT",e[e.DIRECTIONAL=1]="DIRECTIONAL",e}(qe||{}),W={name:"lighting",vs:bn,fs:bn,getUniforms:function(n,t){return al(n)},defines:{MAX_LIGHTS:il},uniformTypes:{enabled:"i32",ambientLightColor:"vec3<f32>",numberOfLights:"i32",lightType:"i32",lightColor:"vec3<f32>",lightPosition:"vec3<f32>",lightDirection:"vec3<f32>",lightAttenuation:"vec3<f32>"},defaultUniforms:{enabled:1,ambientLightColor:[.1,.1,.1],numberOfLights:0,lightType:qe.POINT,lightColor:[1,1,1],lightPosition:[1,1,2],lightDirection:[1,1,1],lightAttenuation:[1,1,1]}};function al(e){var n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(e=e&&$({},e),!e)return $({},W.defaultUniforms);e.lights&&(e=$($($({},e),ll(e.lights)),{},{lights:void 0}));var t=e||{},r=t.ambientLight,i=t.pointLights,o=t.directionalLights,a=r||i&&i.length>0||o&&o.length>0;if(!a)return $($({},W.defaultUniforms),{},{enabled:0});var s=$($($({},W.defaultUniforms),n),sl({ambientLight:r,pointLights:i,directionalLights:o}));return e.enabled!==void 0&&(s.enabled=e.enabled?1:0),s}function sl(e){var n=e.ambientLight,t=e.pointLights,r=t===void 0?[]:t,i=e.directionalLights,o=i===void 0?[]:i,a={};a.ambientLightColor=xn(n);var s=0,l=yn(r),f;try{for(l.s();!(f=l.n()).done;){var p=f.value;a.lightType=qe.POINT,a.lightColor=xn(p),a.lightPosition=p.position,a.lightAttenuation=[p.attenuation||1,0,0],s++}}catch(b){l.e(b)}finally{l.f()}var d=yn(o),h;try{for(d.s();!(h=d.n()).done;){var g=h.value;a.lightType=qe.DIRECTIONAL,a.lightColor=xn(g),a.lightPosition=g.position,a.lightDirection=g.direction,s++}}catch(b){d.e(b)}finally{d.f()}return a.numberOfLights=s,a}function ll(e){var n,t,r={pointLights:[],directionalLights:[]},i=yn(e||[]),o;try{for(i.s();!(o=i.n()).done;){var a=o.value;switch(a.type){case"ambient":r.ambientLight=a;break;case"directional":(n=r.directionalLights)===null||n===void 0||n.push(a);break;case"point":(t=r.pointLights)===null||t===void 0||t.push(a);break;default:}}}catch(s){i.e(s)}finally{i.f()}return r}function xn(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},n=e.color,t=n===void 0?[0,0,0]:n,r=e.intensity,i=r===void 0?1:r;return t.map(function(o){return o*i/ol})}var Fr,Rr;function kr(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var cl=v(Fr||(Fr=kr([`out vec3 dirlight_vNormal;

void dirlight_setNormal(vec3 normal) {
  dirlight_vNormal = normalize(normal);
}
`],[`\\
out vec3 dirlight_vNormal;

void dirlight_setNormal(vec3 normal) {
  dirlight_vNormal = normalize(normal);
}
`]))),fl=v(Rr||(Rr=kr([`uniform dirlightUniforms {
  vec3 lightDirection;
} dirlight;

in vec3 dirlight_vNormal;

// Returns color attenuated by angle from light source
vec4 dirlight_filterColor(vec4 color) {
  float d = abs(dot(dirlight_vNormal, normalize(dirlight.lightDirection)));
  return vec4(color.rgb * d, color.a);
}
`],[`\\
uniform dirlightUniforms {
  vec3 lightDirection;
} dirlight;

in vec3 dirlight_vNormal;

// Returns color attenuated by angle from light source
vec4 dirlight_filterColor(vec4 color) {
  float d = abs(dot(dirlight_vNormal, normalize(dirlight.lightDirection)));
  return vec4(color.rgb * d, color.a);
}
`]))),An={name:"dirlight",dependencies:[],vs:cl,fs:fl,uniformTypes:{lightDirection:"vec3<f32>"},defaultUniforms:{lightDirection:new Float32Array([1,1,2])},getUniforms:ul};function ul(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:An.defaultUniforms,n={};return e.lightDirection&&(n.dirlight_uLightDirection=e.lightDirection),n}var Mr,Ur;function Dr(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var zr=v(Mr||(Mr=Dr([`uniform materialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;
`],[`\\
uniform materialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;
`]))),Br=v(Ur||(Ur=Dr([`uniform materialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {
  vec3 halfway_direction = normalize(light_direction + view_direction);
  float lambertian = dot(light_direction, normal_worldspace);
  float specular = 0.0;
  if (lambertian > 0.0) {
    float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
    specular = pow(specular_angle, material.shininess);
  }
  lambertian = max(lambertian, 0.0);
  return (lambertian * material.diffuse * surfaceColor + specular * material.specularColor) * color;
}

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = surfaceColor;

  if (lighting.enabled) {
    vec3 view_direction = normalize(cameraPosition - position_worldspace);
    lightColor = material.ambient * surfaceColor * lighting.ambientColor;

    if (lighting.lightType == 0) {
      PointLight pointLight = lighting_getPointLight(0);
      vec3 light_position_worldspace = pointLight.position;
      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
    } else if (lighting.lightType == 1) {
      DirectionalLight directionalLight = lighting_getDirectionalLight(0);
      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
    }
    /*
    for (int i = 0; i < MAX_LIGHTS; i++) {
      if (i >= lighting.pointLightCount) {
        break;
      }
      PointLight pointLight = lighting.pointLight[i];
      vec3 light_position_worldspace = pointLight.position;
      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
    }

    for (int i = 0; i < MAX_LIGHTS; i++) {
      if (i >= lighting.directionalLightCount) {
        break;
      }
      DirectionalLight directionalLight = lighting.directionalLight[i];
      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
    }
    */
  }
  return lightColor;
}

vec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = vec3(0, 0, 0);
  vec3 surfaceColor = vec3(0, 0, 0);

  if (lighting.enabled) {
    vec3 view_direction = normalize(cameraPosition - position_worldspace);

    switch (lighting.lightType) {
      case 0:
        PointLight pointLight = lighting_getPointLight(0);
        vec3 light_position_worldspace = pointLight.position;
        vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
        lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
        break;

      case 1:
        DirectionalLight directionalLight = lighting_getDirectionalLight(0);
        lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
        break;
    }
  }
  return lightColor;
}
`],[`\\
uniform materialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {
  vec3 halfway_direction = normalize(light_direction + view_direction);
  float lambertian = dot(light_direction, normal_worldspace);
  float specular = 0.0;
  if (lambertian > 0.0) {
    float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
    specular = pow(specular_angle, material.shininess);
  }
  lambertian = max(lambertian, 0.0);
  return (lambertian * material.diffuse * surfaceColor + specular * material.specularColor) * color;
}

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = surfaceColor;

  if (lighting.enabled) {
    vec3 view_direction = normalize(cameraPosition - position_worldspace);
    lightColor = material.ambient * surfaceColor * lighting.ambientColor;

    if (lighting.lightType == 0) {
      PointLight pointLight = lighting_getPointLight(0);
      vec3 light_position_worldspace = pointLight.position;
      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
    } else if (lighting.lightType == 1) {
      DirectionalLight directionalLight = lighting_getDirectionalLight(0);
      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
    }
    /*
    for (int i = 0; i < MAX_LIGHTS; i++) {
      if (i >= lighting.pointLightCount) {
        break;
      }
      PointLight pointLight = lighting.pointLight[i];
      vec3 light_position_worldspace = pointLight.position;
      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
    }

    for (int i = 0; i < MAX_LIGHTS; i++) {
      if (i >= lighting.directionalLightCount) {
        break;
      }
      DirectionalLight directionalLight = lighting.directionalLight[i];
      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
    }
    */
  }
  return lightColor;
}

vec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = vec3(0, 0, 0);
  vec3 surfaceColor = vec3(0, 0, 0);

  if (lighting.enabled) {
    vec3 view_direction = normalize(cameraPosition - position_worldspace);

    switch (lighting.lightType) {
      case 0:
        PointLight pointLight = lighting_getPointLight(0);
        vec3 light_position_worldspace = pointLight.position;
        vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
        lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
        break;

      case 1:
        DirectionalLight directionalLight = lighting_getDirectionalLight(0);
        lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
        break;
    }
  }
  return lightColor;
}
`])));function Re(e){return Re=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(n){return typeof n}:function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Re(e)}function jr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),t.push.apply(t,r)}return t}function Gr(e){for(var n=1;n<arguments.length;n++){var t=arguments[n]!=null?arguments[n]:{};n%2?jr(Object(t),!0).forEach(function(r){_l(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):jr(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function _l(e,n,t){return n=pl(n),n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function pl(e){var n=dl(e,"string");return Re(n)==="symbol"?n:String(n)}function dl(e,n){if(Re(e)!=="object"||e===null)return e;var t=e[Symbol.toPrimitive];if(t!==void 0){var r=t.call(e,n||"default");if(Re(r)!=="object")return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return(n==="string"?String:Number)(e)}var Sn={name:"gouraud-lighting",vs:zr,fs:Br,defines:{LIGHTING_VERTEX:1},dependencies:[W],uniformTypes:{ambient:"f32",diffuse:"f32",shininess:"f32",specularColor:"vec3<f32>"},defaultUniforms:{ambient:.35,diffuse:.6,shininess:32,specularColor:[.15,.15,.15]},getUniforms:function(n){return Gr(Gr({},Sn.defaultUniforms),n)}};var Hr,Vr;function Xr(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Wr=v(Hr||(Hr=Xr([`uniform phongMaterialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;
`],[`\\
uniform phongMaterialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;
`]))),qr=v(Vr||(Vr=Xr([`uniform phongMaterialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {
  vec3 halfway_direction = normalize(light_direction + view_direction);
  float lambertian = dot(light_direction, normal_worldspace);
  float specular = 0.0;
  if (lambertian > 0.0) {
    float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
    specular = pow(specular_angle, material.shininess);
  }
  lambertian = max(lambertian, 0.0);
  return (lambertian * material.diffuse * surfaceColor + specular * material.specularColor) * color;
}

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = surfaceColor;

  if (lighting.enabled == 0) {
    return lightColor;
  }

  vec3 view_direction = normalize(cameraPosition - position_worldspace);
  lightColor = material.ambient * surfaceColor * lighting.ambientColor;

  if (lighting.lightType == 0) {
    PointLight pointLight = lighting_getPointLight(0);
    vec3 light_position_worldspace = pointLight.position;
    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
  } else if (lighting.lightType == 1) {
    DirectionalLight directionalLight = lighting_getDirectionalLight(0);
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  
  /*
  for (int i = 0; i < MAX_LIGHTS; i++) {
    if (i >= lighting.pointLightCount) {
      break;
    }
    PointLight pointLight = lighting.pointLight[i];
    vec3 light_position_worldspace = pointLight.position;
    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
  }

  for (int i = 0; i < MAX_LIGHTS; i++) {
    if (i >= lighting.directionalLightCount) {
      break;
    }
    DirectionalLight directionalLight = lighting.directionalLight[i];
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  */
  return lightColor;
}

vec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = vec3(0, 0, 0);
  vec3 surfaceColor = vec3(0, 0, 0);

  if (lighting.enabled == 0) {
    vec3 view_direction = normalize(cameraPosition - position_worldspace);

    switch (lighting.lightType) {
      case 0:
        PointLight pointLight = lighting_getPointLight(0);
        vec3 light_position_worldspace = pointLight.position;
        vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
        lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
        break;

      case 1:
        DirectionalLight directionalLight = lighting_getDirectionalLight(0);
        lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
        break;
    }
  }
  return lightColor;
}
`],[`\\
uniform phongMaterialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {
  vec3 halfway_direction = normalize(light_direction + view_direction);
  float lambertian = dot(light_direction, normal_worldspace);
  float specular = 0.0;
  if (lambertian > 0.0) {
    float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
    specular = pow(specular_angle, material.shininess);
  }
  lambertian = max(lambertian, 0.0);
  return (lambertian * material.diffuse * surfaceColor + specular * material.specularColor) * color;
}

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = surfaceColor;

  if (lighting.enabled == 0) {
    return lightColor;
  }

  vec3 view_direction = normalize(cameraPosition - position_worldspace);
  lightColor = material.ambient * surfaceColor * lighting.ambientColor;

  if (lighting.lightType == 0) {
    PointLight pointLight = lighting_getPointLight(0);
    vec3 light_position_worldspace = pointLight.position;
    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
  } else if (lighting.lightType == 1) {
    DirectionalLight directionalLight = lighting_getDirectionalLight(0);
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  
  /*
  for (int i = 0; i < MAX_LIGHTS; i++) {
    if (i >= lighting.pointLightCount) {
      break;
    }
    PointLight pointLight = lighting.pointLight[i];
    vec3 light_position_worldspace = pointLight.position;
    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
  }

  for (int i = 0; i < MAX_LIGHTS; i++) {
    if (i >= lighting.directionalLightCount) {
      break;
    }
    DirectionalLight directionalLight = lighting.directionalLight[i];
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  */
  return lightColor;
}

vec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = vec3(0, 0, 0);
  vec3 surfaceColor = vec3(0, 0, 0);

  if (lighting.enabled == 0) {
    vec3 view_direction = normalize(cameraPosition - position_worldspace);

    switch (lighting.lightType) {
      case 0:
        PointLight pointLight = lighting_getPointLight(0);
        vec3 light_position_worldspace = pointLight.position;
        vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
        lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
        break;

      case 1:
        DirectionalLight directionalLight = lighting_getDirectionalLight(0);
        lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
        break;
    }
  }
  return lightColor;
}
`])));function ke(e){return ke=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(n){return typeof n}:function(n){return n&&typeof Symbol=="function"&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},ke(e)}function Yr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),t.push.apply(t,r)}return t}function Qr(e){for(var n=1;n<arguments.length;n++){var t=arguments[n]!=null?arguments[n]:{};n%2?Yr(Object(t),!0).forEach(function(r){hl(e,r,t[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Yr(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})}return e}function hl(e,n,t){return n=ml(n),n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ml(e){var n=gl(e,"string");return ke(n)==="symbol"?n:String(n)}function gl(e,n){if(ke(e)!=="object"||e===null)return e;var t=e[Symbol.toPrimitive];if(t!==void 0){var r=t.call(e,n||"default");if(ke(r)!=="object")return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return(n==="string"?String:Number)(e)}var Ln={name:"phong-lighting",vs:Wr,fs:qr,defines:{LIGHTING_FRAGMENT:1},dependencies:[W],uniformTypes:{ambient:"f32",diffuse:"f32",shininess:"f32",specularColor:"vec3<f32>"},defaultUniforms:{ambient:.35,diffuse:.6,shininess:32,specularColor:[.15,.15,.15]},getUniforms:function(n){return Qr(Qr({},Ln.defaultUniforms),n)}};var Kr;function vl(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var $r=v(Kr||(Kr=vl([`uniform projection {
  mat4 u_MVPMatrix;
  mat4 u_ModelMatrix;
  mat4 u_NormalMatrix;
  // Projection
  vec3 u_Camera;
}

varying vec3 pbr_vPosition;
varying vec2 pbr_vUV;

#ifdef HAS_NORMALS
# ifdef HAS_TANGENTS
varying mat3 pbr_vTBN;
# else
varying vec3 pbr_vNormal;
# endif
#endif

void pbr_setPositionNormalTangentUV(vec4 position, vec4 normal, vec4 tangent, vec2 uv)
{
  vec4 pos = u_ModelMatrix * position;
  pbr_vPosition = vec3(pos.xyz) / pos.w;

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
  vec3 normalW = normalize(vec3(u_NormalMatrix * vec4(normal.xyz, 0.0)));
  vec3 tangentW = normalize(vec3(u_ModelMatrix * vec4(tangent.xyz, 0.0)));
  vec3 bitangentW = cross(normalW, tangentW) * tangent.w;
  pbr_vTBN = mat3(tangentW, bitangentW, normalW);
#else // HAS_TANGENTS != 1
  pbr_vNormal = normalize(vec3(u_ModelMatrix * vec4(normal.xyz, 0.0)));
#endif
#endif

#ifdef HAS_UV
  pbr_vUV = uv;
#else
  pbr_vUV = vec2(0.,0.);
#endif
}
`],[`\\
uniform projection {
  mat4 u_MVPMatrix;
  mat4 u_ModelMatrix;
  mat4 u_NormalMatrix;
  // Projection
  vec3 u_Camera;
}

varying vec3 pbr_vPosition;
varying vec2 pbr_vUV;

#ifdef HAS_NORMALS
# ifdef HAS_TANGENTS
varying mat3 pbr_vTBN;
# else
varying vec3 pbr_vNormal;
# endif
#endif

void pbr_setPositionNormalTangentUV(vec4 position, vec4 normal, vec4 tangent, vec2 uv)
{
  vec4 pos = u_ModelMatrix * position;
  pbr_vPosition = vec3(pos.xyz) / pos.w;

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
  vec3 normalW = normalize(vec3(u_NormalMatrix * vec4(normal.xyz, 0.0)));
  vec3 tangentW = normalize(vec3(u_ModelMatrix * vec4(tangent.xyz, 0.0)));
  vec3 bitangentW = cross(normalW, tangentW) * tangent.w;
  pbr_vTBN = mat3(tangentW, bitangentW, normalW);
#else // HAS_TANGENTS != 1
  pbr_vNormal = normalize(vec3(u_ModelMatrix * vec4(normal.xyz, 0.0)));
#endif
#endif

#ifdef HAS_UV
  pbr_vUV = uv;
#else
  pbr_vUV = vec2(0.,0.);
#endif
}
`])));var Zr;function bl(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Jr=v(Zr||(Zr=bl([`#if defined(USE_TEX_LOD) && !defined(FEATURE_GLSL_TEXTURE_LOD)
# error PBR fragment shader: Texture LOD is not available
#endif

#if !defined(HAS_TANGENTS) && !defined(FEATURE_GLSL_DERIVATIVES)
# error PBR fragment shader: Derivatives are not available
#endif

// WebGL 1.0 does not support non-constant in for loops
// This provides an easy way to handle these cases
// and still take advantage of WebGL 2.0
#if (__VERSION__ < 300)
  #define SMART_FOR(INIT, WEBGL1COND, WEBGL2COND, INCR) for (INIT; WEBGL1COND; INCR)
#else
  #define SMART_FOR(INIT, WEBGL1COND, WEBGL2COND, INCR) for (INIT; WEBGL2COND; INCR)
#endif

precision highp float;

uniform Projection {
  // Projection
  uniform vec3 u_Camera;
};

uniform pbrMaterial {
  // Material is unlit
  bool unlit;

  // Base color map
  bool baseColorMapEnabled;
  vec4 baseColorFactor;

  bool normalMapEnabled;  
  float normalScale; // #ifdef HAS_NORMALMAP

  bool emissiveMapEnabled;
  vec3 emissiveFactor; // #ifdef HAS_EMISSIVEMAP

  vec2 metallicRoughnessValues;
  bool metallicRoughnessMapEnabled;

  bool occlusionMapEnabled;
  float occlusionStrength; // #ifdef HAS_OCCLUSIONMAP
  
  bool alphaCutoffEnabled;
  float alphaCutoff; // #ifdef ALPHA_CUTOFF
  
  // IBL
  bool IBLenabled;
  vec2 scaleIBLAmbient; // #ifdef USE_IBL
  
  // debugging flags used for shader output of intermediate PBR variables
  // #ifdef PBR_DEBUG
  vec4 scaleDiffBaseMR;
  vec4 scaleFGDSpec;
  // #endif
} u_pbrMaterial;

// Samplers
#ifdef HAS_BASECOLORMAP
uniform sampler2D u_BaseColorSampler;
#endif
#ifdef HAS_NORMALMAP
uniform sampler2D u_NormalSampler;
#endif
#ifdef HAS_EMISSIVEMAP
uniform sampler2D u_EmissiveSampler;
#endif
#ifdef HAS_METALROUGHNESSMAP
uniform sampler2D u_MetallicRoughnessSampler;
#endif
#ifdef HAS_OCCLUSIONMAP
uniform sampler2D u_OcclusionSampler;
#endif
#ifdef USE_IBL
uniform samplerCube u_DiffuseEnvSampler;
uniform samplerCube u_SpecularEnvSampler;
uniform sampler2D u_brdfLUT;
#endif

// Inputs from vertex shader

varying vec3 pbr_vPosition;
varying vec2 pbr_vUV;

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
varying mat3 pbr_vTBN;
#else
varying vec3 pbr_vNormal;
#endif
#endif

// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo {
  float NdotL;                  // cos angle between normal and light direction
  float NdotV;                  // cos angle between normal and view direction
  float NdotH;                  // cos angle between normal and half vector
  float LdotH;                  // cos angle between light direction and half vector
  float VdotH;                  // cos angle between view direction and half vector
  float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
  float metalness;              // metallic value at the surface
  vec3 reflectance0;            // full reflectance color (normal incidence angle)
  vec3 reflectance90;           // reflectance color at grazing angle
  float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
  vec3 diffuseColor;            // color contribution from diffuse lighting
  vec3 specularColor;           // color contribution from specular lighting
  vec3 n;                       // normal at surface point
  vec3 v;                       // vector from surface point to camera
};

const float M_PI = 3.141592653589793;
const float c_MinRoughness = 0.04;

vec4 SRGBtoLINEAR(vec4 srgbIn)
{
#ifdef MANUAL_SRGB
#ifdef SRGB_FAST_APPROXIMATION
  vec3 linOut = pow(srgbIn.xyz,vec3(2.2));
#else // SRGB_FAST_APPROXIMATION
  vec3 bLess = step(vec3(0.04045),srgbIn.xyz);
  vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );
#endif //SRGB_FAST_APPROXIMATION
  return vec4(linOut,srgbIn.w);;
#else //MANUAL_SRGB
  return srgbIn;
#endif //MANUAL_SRGB
}

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
  // Retrieve the tangent space matrix
#ifndef HAS_TANGENTS
  vec3 pos_dx = dFdx(pbr_vPosition);
  vec3 pos_dy = dFdy(pbr_vPosition);
  vec3 tex_dx = dFdx(vec3(pbr_vUV, 0.0));
  vec3 tex_dy = dFdy(vec3(pbr_vUV, 0.0));
  vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);

#ifdef HAS_NORMALS
  vec3 ng = normalize(pbr_vNormal);
#else
  vec3 ng = cross(pos_dx, pos_dy);
#endif

  t = normalize(t - ng * dot(ng, t));
  vec3 b = normalize(cross(ng, t));
  mat3 tbn = mat3(t, b, ng);
#else // HAS_TANGENTS
  mat3 tbn = pbr_vTBN;
#endif

#ifdef HAS_NORMALMAP
  vec3 n = texture2D(u_NormalSampler, pbr_vUV).rgb;
  n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_pbrMaterial.normalScale, u_pbrMaterial.normalScale, 1.0)));
#else
  // The tbn matrix is linearly interpolated, so we need to re-normalize
  vec3 n = normalize(tbn[2].xyz);
#endif

  return n;
}

// Calculation of the lighting contribution from an optional Image Based Light source.
// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].
// See our README.md on Environment Maps [3] for additional discussion.
#ifdef USE_IBL
vec3 getIBLContribution(PBRInfo pbrInfo, vec3 n, vec3 reflection)
{
  float mipCount = 9.0; // resolution of 512x512
  float lod = (pbrInfo.perceptualRoughness * mipCount);
  // retrieve a scale and bias to F0. See [1], Figure 3
  vec3 brdf = SRGBtoLINEAR(texture2D(u_brdfLUT,
    vec2(pbrInfo.NdotV, 1.0 - pbrInfo.perceptualRoughness))).rgb;
  vec3 diffuseLight = SRGBtoLINEAR(textureCube(u_DiffuseEnvSampler, n)).rgb;

#ifdef USE_TEX_LOD
  vec3 specularLight = SRGBtoLINEAR(textureCubeLod(u_SpecularEnvSampler, reflection, lod)).rgb;
#else
  vec3 specularLight = SRGBtoLINEAR(textureCube(u_SpecularEnvSampler, reflection)).rgb;
#endif

  vec3 diffuse = diffuseLight * pbrInfo.diffuseColor;
  vec3 specular = specularLight * (pbrInfo.specularColor * brdf.x + brdf.y);

  // For presentation, this allows us to disable IBL terms
  diffuse *= u_pbrMaterial.scaleIBLAmbient.x;
  specular *= u_pbrMaterial.scaleIBLAmbient.y;

  return diffuse + specular;
}
#endif

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
vec3 diffuse(PBRInfo pbrInfo)
{
  return pbrInfo.diffuseColor / M_PI;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
vec3 specularReflection(PBRInfo pbrInfo)
{
  return pbrInfo.reflectance0 +
    (pbrInfo.reflectance90 - pbrInfo.reflectance0) *
    pow(clamp(1.0 - pbrInfo.VdotH, 0.0, 1.0), 5.0);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float geometricOcclusion(PBRInfo pbrInfo)
{
  float NdotL = pbrInfo.NdotL;
  float NdotV = pbrInfo.NdotV;
  float r = pbrInfo.alphaRoughness;

  float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
  float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
  return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across
// the area being drawn (aka D())
// Implementation from "Average Irregularity Representation of a Roughened Surface
// for Ray Reflection" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes
// from EPIC Games [1], Equation 3.
float microfacetDistribution(PBRInfo pbrInfo)
{
  float roughnessSq = pbrInfo.alphaRoughness * pbrInfo.alphaRoughness;
  float f = (pbrInfo.NdotH * roughnessSq - pbrInfo.NdotH) * pbrInfo.NdotH + 1.0;
  return roughnessSq / (M_PI * f * f);
}

void PBRInfo_setAmbientLight(inout PBRInfo pbrInfo) {
  pbrInfo.NdotL = 1.0;
  pbrInfo.NdotH = 0.0;
  pbrInfo.LdotH = 0.0;
  pbrInfo.VdotH = 1.0;
}

void PBRInfo_setDirectionalLight(inout PBRInfo pbrInfo, vec3 lightDirection) {
  vec3 n = pbrInfo.n;
  vec3 v = pbrInfo.v;
  vec3 l = normalize(lightDirection);             // Vector from surface point to light
  vec3 h = normalize(l+v);                        // Half vector between both l and v

  pbrInfo.NdotL = clamp(dot(n, l), 0.001, 1.0);
  pbrInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);
  pbrInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);
  pbrInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);
}

void PBRInfo_setPointLight(inout PBRInfo pbrInfo, PointLight pointLight) {
  vec3 light_direction = normalize(pointLight.position - pbr_vPosition);
  PBRInfo_setDirectionalLight(pbrInfo, light_direction);
}

vec3 calculateFinalColor(PBRInfo pbrInfo, vec3 lightColor) {
  // Calculate the shading terms for the microfacet specular shading model
  vec3 F = specularReflection(pbrInfo);
  float G = geometricOcclusion(pbrInfo);
  float D = microfacetDistribution(pbrInfo);

  // Calculation of analytical lighting contribution
  vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInfo);
  vec3 specContrib = F * G * D / (4.0 * pbrInfo.NdotL * pbrInfo.NdotV);
  // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
  return pbrInfo.NdotL * lightColor * (diffuseContrib + specContrib);
}

vec4 pbr_filterColor(vec4 colorUnused)
{
  // The albedo may be defined from a base texture or a flat color
#ifdef HAS_BASECOLORMAP
  vec4 baseColor = SRGBtoLINEAR(texture2D(u_BaseColorSampler, pbr_vUV)) * u_pbrMaterial.baseColorFactor;
#else
  vec4 baseColor = u_pbrMaterial.baseColorFactor;
#endif

#ifdef ALPHA_CUTOFF
  if (baseColor.a < u_pbrMaterial.alphaCutoff) {
    discard;
  }
#endif

  vec3 color = vec3(0, 0, 0);

  if(u_pbrMaterial.unlit){
    color.rgb = baseColor.rgb;
  }
  else{
    // Metallic and Roughness material properties are packed together
    // In glTF, these factors can be specified by fixed scalar values
    // or from a metallic-roughness map
    float perceptualRoughness = u_pbrMaterial.metallicRoughnessValues.y;
    float metallic = u_pbrMaterial.metallicRoughnessValues.x;
#ifdef HAS_METALROUGHNESSMAP
    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.
    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data
    vec4 mrSample = texture2D(u_MetallicRoughnessSampler, pbr_vUV);
    perceptualRoughness = mrSample.g * perceptualRoughness;
    metallic = mrSample.b * metallic;
#endif
    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);
    metallic = clamp(metallic, 0.0, 1.0);
    // Roughness is authored as perceptual roughness; as is convention,
    // convert to material roughness by squaring the perceptual roughness [2].
    float alphaRoughness = perceptualRoughness * perceptualRoughness;

    vec3 f0 = vec3(0.04);
    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
    diffuseColor *= 1.0 - metallic;
    vec3 specularColor = mix(f0, baseColor.rgb, metallic);

    // Compute reflectance.
    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

    // For typical incident reflectance range (between 4% to 100%) set the grazing
    // reflectance to 100% for typical fresnel effect.
    // For very low reflectance range on highly diffuse objects (below 4%),
    // incrementally reduce grazing reflecance to 0%.
    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
    vec3 specularEnvironmentR0 = specularColor.rgb;
    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;

    vec3 n = getNormal();                          // normal at surface point
    vec3 v = normalize(u_Camera - pbr_vPosition);  // Vector from surface point to camera

    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
    vec3 reflection = -normalize(reflect(v, n));

    PBRInfo pbrInfo = PBRInfo(
      0.0, // NdotL
      NdotV,
      0.0, // NdotH
      0.0, // LdotH
      0.0, // VdotH
      perceptualRoughness,
      metallic,
      specularEnvironmentR0,
      specularEnvironmentR90,
      alphaRoughness,
      diffuseColor,
      specularColor,
      n,
      v
    );

#ifdef USE_LIGHTS
    // Apply ambient light
    PBRInfo_setAmbientLight(pbrInfo);
    color += calculateFinalColor(pbrInfo, lighting_uAmbientLight.color);

    // Apply directional light
    SMART_FOR(int i = 0, i < MAX_LIGHTS, i < lighting_uDirectionalLightCount, i++) {
      if (i < lighting_uDirectionalLightCount) {
        PBRInfo_setDirectionalLight(pbrInfo, lighting_uDirectionalLight[i].direction);
        color += calculateFinalColor(pbrInfo, lighting_uDirectionalLight[i].color);
      }
    }

    // Apply point light
    SMART_FOR(int i = 0, i < MAX_LIGHTS, i < lighting_uPointLightCount, i++) {
      if (i < lighting_uPointLightCount) {
        PBRInfo_setPointLight(pbrInfo, lighting_uPointLight[i]);
        float attenuation = getPointLightAttenuation(lighting_uPointLight[i], distance(lighting_uPointLight[i].position, pbr_vPosition));
        color += calculateFinalColor(pbrInfo, lighting_uPointLight[i].color / attenuation);
      }
    }
#endif

    // Calculate lighting contribution from image based lighting source (IBL)
#ifdef USE_IBL
    if (u_pbrMateral.IBLEnabled) {
      color += getIBLContribution(pbrInfo, n, reflection);
    }
#endif

    // Apply optional PBR terms for additional (optional) shading
#ifdef HAS_OCCLUSIONMAP
    if (u_pbrMaterial.occlusionMapEnabled) {
      float ao = texture2D(u_OcclusionSampler, pbr_vUV).r;
      color = mix(color, color * ao, u_pbrMaterial.occlusionStrength);
    }
#endif

#ifdef HAS_EMISSIVEMAP
    if (u_pbrMaterial.emmissiveMapEnabled) {
      vec3 emissive = SRGBtoLINEAR(texture2D(u_EmissiveSampler, pbr_vUV)).rgb * u_pbrMaterial.emissiveFactor;
      color += emissive;
    }
#endif

    // This section uses mix to override final color for reference app visualization
    // of various parameters in the lighting equation.
#ifdef PBR_DEBUG
    // TODO: Figure out how to debug multiple lights

    // color = mix(color, F, u_ScaleFGDSpec.x);
    // color = mix(color, vec3(G), u_ScaleFGDSpec.y);
    // color = mix(color, vec3(D), u_ScaleFGDSpec.z);
    // color = mix(color, specContrib, u_ScaleFGDSpec.w);

    // color = mix(color, diffuseContrib, u_ScaleDiffBaseMR.x);
    color = mix(color, baseColor.rgb, u_pbrMaterial.scaleDiffBaseMR.y);
    color = mix(color, vec3(metallic), u_pbrMaterial.scaleDiffBaseMR.z);
    color = mix(color, vec3(perceptualRoughness), u_pbrMaterial.scaleDiffBaseMR.w);
#endif

  }

  return vec4(pow(color,vec3(1.0/2.2)), baseColor.a);
}
`],[`\\
#if defined(USE_TEX_LOD) && !defined(FEATURE_GLSL_TEXTURE_LOD)
# error PBR fragment shader: Texture LOD is not available
#endif

#if !defined(HAS_TANGENTS) && !defined(FEATURE_GLSL_DERIVATIVES)
# error PBR fragment shader: Derivatives are not available
#endif

// WebGL 1.0 does not support non-constant in for loops
// This provides an easy way to handle these cases
// and still take advantage of WebGL 2.0
#if (__VERSION__ < 300)
  #define SMART_FOR(INIT, WEBGL1COND, WEBGL2COND, INCR) for (INIT; WEBGL1COND; INCR)
#else
  #define SMART_FOR(INIT, WEBGL1COND, WEBGL2COND, INCR) for (INIT; WEBGL2COND; INCR)
#endif

precision highp float;

uniform Projection {
  // Projection
  uniform vec3 u_Camera;
};

uniform pbrMaterial {
  // Material is unlit
  bool unlit;

  // Base color map
  bool baseColorMapEnabled;
  vec4 baseColorFactor;

  bool normalMapEnabled;  
  float normalScale; // #ifdef HAS_NORMALMAP

  bool emissiveMapEnabled;
  vec3 emissiveFactor; // #ifdef HAS_EMISSIVEMAP

  vec2 metallicRoughnessValues;
  bool metallicRoughnessMapEnabled;

  bool occlusionMapEnabled;
  float occlusionStrength; // #ifdef HAS_OCCLUSIONMAP
  
  bool alphaCutoffEnabled;
  float alphaCutoff; // #ifdef ALPHA_CUTOFF
  
  // IBL
  bool IBLenabled;
  vec2 scaleIBLAmbient; // #ifdef USE_IBL
  
  // debugging flags used for shader output of intermediate PBR variables
  // #ifdef PBR_DEBUG
  vec4 scaleDiffBaseMR;
  vec4 scaleFGDSpec;
  // #endif
} u_pbrMaterial;

// Samplers
#ifdef HAS_BASECOLORMAP
uniform sampler2D u_BaseColorSampler;
#endif
#ifdef HAS_NORMALMAP
uniform sampler2D u_NormalSampler;
#endif
#ifdef HAS_EMISSIVEMAP
uniform sampler2D u_EmissiveSampler;
#endif
#ifdef HAS_METALROUGHNESSMAP
uniform sampler2D u_MetallicRoughnessSampler;
#endif
#ifdef HAS_OCCLUSIONMAP
uniform sampler2D u_OcclusionSampler;
#endif
#ifdef USE_IBL
uniform samplerCube u_DiffuseEnvSampler;
uniform samplerCube u_SpecularEnvSampler;
uniform sampler2D u_brdfLUT;
#endif

// Inputs from vertex shader

varying vec3 pbr_vPosition;
varying vec2 pbr_vUV;

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
varying mat3 pbr_vTBN;
#else
varying vec3 pbr_vNormal;
#endif
#endif

// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo {
  float NdotL;                  // cos angle between normal and light direction
  float NdotV;                  // cos angle between normal and view direction
  float NdotH;                  // cos angle between normal and half vector
  float LdotH;                  // cos angle between light direction and half vector
  float VdotH;                  // cos angle between view direction and half vector
  float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
  float metalness;              // metallic value at the surface
  vec3 reflectance0;            // full reflectance color (normal incidence angle)
  vec3 reflectance90;           // reflectance color at grazing angle
  float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
  vec3 diffuseColor;            // color contribution from diffuse lighting
  vec3 specularColor;           // color contribution from specular lighting
  vec3 n;                       // normal at surface point
  vec3 v;                       // vector from surface point to camera
};

const float M_PI = 3.141592653589793;
const float c_MinRoughness = 0.04;

vec4 SRGBtoLINEAR(vec4 srgbIn)
{
#ifdef MANUAL_SRGB
#ifdef SRGB_FAST_APPROXIMATION
  vec3 linOut = pow(srgbIn.xyz,vec3(2.2));
#else // SRGB_FAST_APPROXIMATION
  vec3 bLess = step(vec3(0.04045),srgbIn.xyz);
  vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );
#endif //SRGB_FAST_APPROXIMATION
  return vec4(linOut,srgbIn.w);;
#else //MANUAL_SRGB
  return srgbIn;
#endif //MANUAL_SRGB
}

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
  // Retrieve the tangent space matrix
#ifndef HAS_TANGENTS
  vec3 pos_dx = dFdx(pbr_vPosition);
  vec3 pos_dy = dFdy(pbr_vPosition);
  vec3 tex_dx = dFdx(vec3(pbr_vUV, 0.0));
  vec3 tex_dy = dFdy(vec3(pbr_vUV, 0.0));
  vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);

#ifdef HAS_NORMALS
  vec3 ng = normalize(pbr_vNormal);
#else
  vec3 ng = cross(pos_dx, pos_dy);
#endif

  t = normalize(t - ng * dot(ng, t));
  vec3 b = normalize(cross(ng, t));
  mat3 tbn = mat3(t, b, ng);
#else // HAS_TANGENTS
  mat3 tbn = pbr_vTBN;
#endif

#ifdef HAS_NORMALMAP
  vec3 n = texture2D(u_NormalSampler, pbr_vUV).rgb;
  n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_pbrMaterial.normalScale, u_pbrMaterial.normalScale, 1.0)));
#else
  // The tbn matrix is linearly interpolated, so we need to re-normalize
  vec3 n = normalize(tbn[2].xyz);
#endif

  return n;
}

// Calculation of the lighting contribution from an optional Image Based Light source.
// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].
// See our README.md on Environment Maps [3] for additional discussion.
#ifdef USE_IBL
vec3 getIBLContribution(PBRInfo pbrInfo, vec3 n, vec3 reflection)
{
  float mipCount = 9.0; // resolution of 512x512
  float lod = (pbrInfo.perceptualRoughness * mipCount);
  // retrieve a scale and bias to F0. See [1], Figure 3
  vec3 brdf = SRGBtoLINEAR(texture2D(u_brdfLUT,
    vec2(pbrInfo.NdotV, 1.0 - pbrInfo.perceptualRoughness))).rgb;
  vec3 diffuseLight = SRGBtoLINEAR(textureCube(u_DiffuseEnvSampler, n)).rgb;

#ifdef USE_TEX_LOD
  vec3 specularLight = SRGBtoLINEAR(textureCubeLod(u_SpecularEnvSampler, reflection, lod)).rgb;
#else
  vec3 specularLight = SRGBtoLINEAR(textureCube(u_SpecularEnvSampler, reflection)).rgb;
#endif

  vec3 diffuse = diffuseLight * pbrInfo.diffuseColor;
  vec3 specular = specularLight * (pbrInfo.specularColor * brdf.x + brdf.y);

  // For presentation, this allows us to disable IBL terms
  diffuse *= u_pbrMaterial.scaleIBLAmbient.x;
  specular *= u_pbrMaterial.scaleIBLAmbient.y;

  return diffuse + specular;
}
#endif

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
vec3 diffuse(PBRInfo pbrInfo)
{
  return pbrInfo.diffuseColor / M_PI;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
vec3 specularReflection(PBRInfo pbrInfo)
{
  return pbrInfo.reflectance0 +
    (pbrInfo.reflectance90 - pbrInfo.reflectance0) *
    pow(clamp(1.0 - pbrInfo.VdotH, 0.0, 1.0), 5.0);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float geometricOcclusion(PBRInfo pbrInfo)
{
  float NdotL = pbrInfo.NdotL;
  float NdotV = pbrInfo.NdotV;
  float r = pbrInfo.alphaRoughness;

  float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
  float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
  return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across
// the area being drawn (aka D())
// Implementation from "Average Irregularity Representation of a Roughened Surface
// for Ray Reflection" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes
// from EPIC Games [1], Equation 3.
float microfacetDistribution(PBRInfo pbrInfo)
{
  float roughnessSq = pbrInfo.alphaRoughness * pbrInfo.alphaRoughness;
  float f = (pbrInfo.NdotH * roughnessSq - pbrInfo.NdotH) * pbrInfo.NdotH + 1.0;
  return roughnessSq / (M_PI * f * f);
}

void PBRInfo_setAmbientLight(inout PBRInfo pbrInfo) {
  pbrInfo.NdotL = 1.0;
  pbrInfo.NdotH = 0.0;
  pbrInfo.LdotH = 0.0;
  pbrInfo.VdotH = 1.0;
}

void PBRInfo_setDirectionalLight(inout PBRInfo pbrInfo, vec3 lightDirection) {
  vec3 n = pbrInfo.n;
  vec3 v = pbrInfo.v;
  vec3 l = normalize(lightDirection);             // Vector from surface point to light
  vec3 h = normalize(l+v);                        // Half vector between both l and v

  pbrInfo.NdotL = clamp(dot(n, l), 0.001, 1.0);
  pbrInfo.NdotH = clamp(dot(n, h), 0.0, 1.0);
  pbrInfo.LdotH = clamp(dot(l, h), 0.0, 1.0);
  pbrInfo.VdotH = clamp(dot(v, h), 0.0, 1.0);
}

void PBRInfo_setPointLight(inout PBRInfo pbrInfo, PointLight pointLight) {
  vec3 light_direction = normalize(pointLight.position - pbr_vPosition);
  PBRInfo_setDirectionalLight(pbrInfo, light_direction);
}

vec3 calculateFinalColor(PBRInfo pbrInfo, vec3 lightColor) {
  // Calculate the shading terms for the microfacet specular shading model
  vec3 F = specularReflection(pbrInfo);
  float G = geometricOcclusion(pbrInfo);
  float D = microfacetDistribution(pbrInfo);

  // Calculation of analytical lighting contribution
  vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInfo);
  vec3 specContrib = F * G * D / (4.0 * pbrInfo.NdotL * pbrInfo.NdotV);
  // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
  return pbrInfo.NdotL * lightColor * (diffuseContrib + specContrib);
}

vec4 pbr_filterColor(vec4 colorUnused)
{
  // The albedo may be defined from a base texture or a flat color
#ifdef HAS_BASECOLORMAP
  vec4 baseColor = SRGBtoLINEAR(texture2D(u_BaseColorSampler, pbr_vUV)) * u_pbrMaterial.baseColorFactor;
#else
  vec4 baseColor = u_pbrMaterial.baseColorFactor;
#endif

#ifdef ALPHA_CUTOFF
  if (baseColor.a < u_pbrMaterial.alphaCutoff) {
    discard;
  }
#endif

  vec3 color = vec3(0, 0, 0);

  if(u_pbrMaterial.unlit){
    color.rgb = baseColor.rgb;
  }
  else{
    // Metallic and Roughness material properties are packed together
    // In glTF, these factors can be specified by fixed scalar values
    // or from a metallic-roughness map
    float perceptualRoughness = u_pbrMaterial.metallicRoughnessValues.y;
    float metallic = u_pbrMaterial.metallicRoughnessValues.x;
#ifdef HAS_METALROUGHNESSMAP
    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.
    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data
    vec4 mrSample = texture2D(u_MetallicRoughnessSampler, pbr_vUV);
    perceptualRoughness = mrSample.g * perceptualRoughness;
    metallic = mrSample.b * metallic;
#endif
    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);
    metallic = clamp(metallic, 0.0, 1.0);
    // Roughness is authored as perceptual roughness; as is convention,
    // convert to material roughness by squaring the perceptual roughness [2].
    float alphaRoughness = perceptualRoughness * perceptualRoughness;

    vec3 f0 = vec3(0.04);
    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
    diffuseColor *= 1.0 - metallic;
    vec3 specularColor = mix(f0, baseColor.rgb, metallic);

    // Compute reflectance.
    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

    // For typical incident reflectance range (between 4% to 100%) set the grazing
    // reflectance to 100% for typical fresnel effect.
    // For very low reflectance range on highly diffuse objects (below 4%),
    // incrementally reduce grazing reflecance to 0%.
    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
    vec3 specularEnvironmentR0 = specularColor.rgb;
    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;

    vec3 n = getNormal();                          // normal at surface point
    vec3 v = normalize(u_Camera - pbr_vPosition);  // Vector from surface point to camera

    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
    vec3 reflection = -normalize(reflect(v, n));

    PBRInfo pbrInfo = PBRInfo(
      0.0, // NdotL
      NdotV,
      0.0, // NdotH
      0.0, // LdotH
      0.0, // VdotH
      perceptualRoughness,
      metallic,
      specularEnvironmentR0,
      specularEnvironmentR90,
      alphaRoughness,
      diffuseColor,
      specularColor,
      n,
      v
    );

#ifdef USE_LIGHTS
    // Apply ambient light
    PBRInfo_setAmbientLight(pbrInfo);
    color += calculateFinalColor(pbrInfo, lighting_uAmbientLight.color);

    // Apply directional light
    SMART_FOR(int i = 0, i < MAX_LIGHTS, i < lighting_uDirectionalLightCount, i++) {
      if (i < lighting_uDirectionalLightCount) {
        PBRInfo_setDirectionalLight(pbrInfo, lighting_uDirectionalLight[i].direction);
        color += calculateFinalColor(pbrInfo, lighting_uDirectionalLight[i].color);
      }
    }

    // Apply point light
    SMART_FOR(int i = 0, i < MAX_LIGHTS, i < lighting_uPointLightCount, i++) {
      if (i < lighting_uPointLightCount) {
        PBRInfo_setPointLight(pbrInfo, lighting_uPointLight[i]);
        float attenuation = getPointLightAttenuation(lighting_uPointLight[i], distance(lighting_uPointLight[i].position, pbr_vPosition));
        color += calculateFinalColor(pbrInfo, lighting_uPointLight[i].color / attenuation);
      }
    }
#endif

    // Calculate lighting contribution from image based lighting source (IBL)
#ifdef USE_IBL
    if (u_pbrMateral.IBLEnabled) {
      color += getIBLContribution(pbrInfo, n, reflection);
    }
#endif

    // Apply optional PBR terms for additional (optional) shading
#ifdef HAS_OCCLUSIONMAP
    if (u_pbrMaterial.occlusionMapEnabled) {
      float ao = texture2D(u_OcclusionSampler, pbr_vUV).r;
      color = mix(color, color * ao, u_pbrMaterial.occlusionStrength);
    }
#endif

#ifdef HAS_EMISSIVEMAP
    if (u_pbrMaterial.emmissiveMapEnabled) {
      vec3 emissive = SRGBtoLINEAR(texture2D(u_EmissiveSampler, pbr_vUV)).rgb * u_pbrMaterial.emissiveFactor;
      color += emissive;
    }
#endif

    // This section uses mix to override final color for reference app visualization
    // of various parameters in the lighting equation.
#ifdef PBR_DEBUG
    // TODO: Figure out how to debug multiple lights

    // color = mix(color, F, u_ScaleFGDSpec.x);
    // color = mix(color, vec3(G), u_ScaleFGDSpec.y);
    // color = mix(color, vec3(D), u_ScaleFGDSpec.z);
    // color = mix(color, specContrib, u_ScaleFGDSpec.w);

    // color = mix(color, diffuseContrib, u_ScaleDiffBaseMR.x);
    color = mix(color, baseColor.rgb, u_pbrMaterial.scaleDiffBaseMR.y);
    color = mix(color, vec3(metallic), u_pbrMaterial.scaleDiffBaseMR.z);
    color = mix(color, vec3(perceptualRoughness), u_pbrMaterial.scaleDiffBaseMR.w);
#endif

  }

  return vec4(pow(color,vec3(1.0/2.2)), baseColor.a);
}
`])));var ei={name:"pbr",vs:$r,fs:Jr,defines:{LIGHTING_FRAGMENT:1,HAS_NORMALMAP:0,HAS_EMISSIVEMAP:0,HAS_OCCLUSIONMAP:0,HAS_BASECOLORMAP:0,HAS_METALROUGHNESSMAP:0,ALPHA_CUTOFF:0,USE_IBL:0,PBR_DEBUG:0},uniformTypes:{unlit:"i32",baseColorMapEnabled:"i32",baseColorFactor:"vec4<f32>",normalMapEnabled:"i32",normalScale:"f32",emissiveMapEnabled:"i32",emissiveFactor:"vec3<f32>",metallicRoughnessValues:"vec2<f32>",metallicRoughnessMapEnabled:"i32",occlusionMapEnabled:"i32",occlusionStrength:"f32",alphaCutoffEnabled:"i32",alphaCutoff:"f32",IBLenabled:"i32",scaleIBLAmbient:"vec2<f32>",scaleDiffBaseMR:"vec4<f32>",scaleFGDSpec:"vec4<f32>"},bindings:{baseColorSampler:{type:"texture",location:8},normalSampler:{type:"texture",location:9},emissiveSampler:{type:"texture",location:10},metallicRoughnessSampler:{type:"texture",location:11},occlusionSampler:{type:"texture",location:12},diffuseEnvSampler:{type:"texture",location:13},specularEnvSampler:{type:"texture",location:14},brdfLUT:{type:"texture",location:15}},dependencies:[W]};var ni;function xl(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var yl=v(ni||(ni=xl([`
uniform brightnessContrastUniforms {
  float brightness;
  float contrast;
} brightnessContrast;

vec4 brightnessContrast_filterColor(vec4 color) {
  color.rgb += brightnessContrast.brightness;
  if (brightnessContrast.contrast > 0.0) {
    color.rgb = (color.rgb - 0.5) / (1.0 - brightnessContrast.contrast) + 0.5;
  } else {
    color.rgb = (color.rgb - 0.5) * (1.0 + brightnessContrast.contrast) + 0.5;
  }
  return color;
}

vec4 brightnessContrast_filterColor(vec4 color, vec2 texSize, vec2 texCoords) {
  return brightnessContrast_filterColor(color);
}
`],[`\\

uniform brightnessContrastUniforms {
  float brightness;
  float contrast;
} brightnessContrast;

vec4 brightnessContrast_filterColor(vec4 color) {
  color.rgb += brightnessContrast.brightness;
  if (brightnessContrast.contrast > 0.0) {
    color.rgb = (color.rgb - 0.5) / (1.0 - brightnessContrast.contrast) + 0.5;
  } else {
    color.rgb = (color.rgb - 0.5) * (1.0 + brightnessContrast.contrast) + 0.5;
  }
  return color;
}

vec4 brightnessContrast_filterColor(vec4 color, vec2 texSize, vec2 texCoords) {
  return brightnessContrast_filterColor(color);
}
`]))),ti={name:"brightnessContrast",uniformTypes:{brightness:"f32",contrast:"f32"},uniformPropTypes:{brightness:{format:"f32",value:0,min:-1,max:1},contrast:{format:"f32",value:0,min:-1,max:1}},fs:yl,passes:[{filter:!0}]};var ri;function Al(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Sl=v(ri||(ri=Al([`uniform denoiseUniforms {
  float strength;
} noise;

vec4 denoise_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  float adjustedExponent = 3. + 200. * pow(1. - noise.strength, 4.);

  vec4 center = texture(source, texCoord);
  vec4 color = vec4(0.0);
  float total = 0.0;
  for (float x = -4.0; x <= 4.0; x += 1.0) {
    for (float y = -4.0; y <= 4.0; y += 1.0) {
      vec4 offsetColor = texture(source, texCoord + vec2(x, y) / texSize);
      float weight = 1.0 - abs(dot(offsetColor.rgb - center.rgb, vec3(0.25)));
      weight = pow(weight, adjustedExponent);
      color += offsetColor * weight;
      total += weight;
    }
  }

  return color / total;
}
`],[`\\
uniform denoiseUniforms {
  float strength;
} noise;

vec4 denoise_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  float adjustedExponent = 3. + 200. * pow(1. - noise.strength, 4.);

  vec4 center = texture(source, texCoord);
  vec4 color = vec4(0.0);
  float total = 0.0;
  for (float x = -4.0; x <= 4.0; x += 1.0) {
    for (float y = -4.0; y <= 4.0; y += 1.0) {
      vec4 offsetColor = texture(source, texCoord + vec2(x, y) / texSize);
      float weight = 1.0 - abs(dot(offsetColor.rgb - center.rgb, vec3(0.25)));
      weight = pow(weight, adjustedExponent);
      color += offsetColor * weight;
      total += weight;
    }
  }

  return color / total;
}
`]))),ii={name:"denoise",uniformTypes:{strength:"f32"},uniformPropTypes:{strength:{format:"f32",value:.5,min:0,max:1}},fs:Sl,passes:[{sampler:!0},{sampler:!0}]};var oi;function Ll(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Pl=v(oi||(oi=Ll([`uniform hueSaturationUniforms {
  float hue;
  float saturation;
} hueSaturation;

vec4 hueSaturation_filterColor(vec4 color) {
  // hue adjustment, wolfram alpha: RotationTransform[angle, {1, 1, 1}][{x, y, z}]
  float angle = hueSaturation.hue * 3.14159265;
  float s = sin(angle), c = cos(angle);
  vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;
  float len = length(color.rgb);
  color.rgb = vec3(
    dot(color.rgb, weights.xyz),
    dot(color.rgb, weights.zxy),
    dot(color.rgb, weights.yzx)
  );

  // saturation adjustment
  float average = (color.r + color.g + color.b) / 3.0;
  if (hueSaturation.saturation > 0.0) {
    color.rgb += (average - color.rgb) * (1.0 - 1.0 / (1.001 - hueSaturation.saturation));
  } else {
    color.rgb += (average - color.rgb) * (-hueSaturation.saturation);
  }

  return color;
}

vec4 hueSaturation_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  return hueSaturation_filterColor(color);
}
`],[`\\
uniform hueSaturationUniforms {
  float hue;
  float saturation;
} hueSaturation;

vec4 hueSaturation_filterColor(vec4 color) {
  // hue adjustment, wolfram alpha: RotationTransform[angle, {1, 1, 1}][{x, y, z}]
  float angle = hueSaturation.hue * 3.14159265;
  float s = sin(angle), c = cos(angle);
  vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;
  float len = length(color.rgb);
  color.rgb = vec3(
    dot(color.rgb, weights.xyz),
    dot(color.rgb, weights.zxy),
    dot(color.rgb, weights.yzx)
  );

  // saturation adjustment
  float average = (color.r + color.g + color.b) / 3.0;
  if (hueSaturation.saturation > 0.0) {
    color.rgb += (average - color.rgb) * (1.0 - 1.0 / (1.001 - hueSaturation.saturation));
  } else {
    color.rgb += (average - color.rgb) * (-hueSaturation.saturation);
  }

  return color;
}

vec4 hueSaturation_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  return hueSaturation_filterColor(color);
}
`]))),ai={name:"hueSaturation",uniformTypes:{hue:"f32",saturation:"f32"},uniformPropTypes:{hue:{value:0,min:-1,max:1},saturation:{value:0,min:-1,max:1}},fs:Pl,passes:[{filter:!0}]};var si;function El(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var wl=v(si||(si=El([`uniform noiseUniforms {
  float amount;
} noise;

float rand(vec2 co) {
  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec4 noise_filterColor(vec4 color, vec2 texCoord) {
  float diff = (rand(texCoord) - 0.5) * noise.amount;
  color.r += diff;
  color.g += diff;
  color.b += diff;
  return color;
}

vec4 noise_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  return noise_filterColor(color, texCoord);
}
`],[`\\
uniform noiseUniforms {
  float amount;
} noise;

float rand(vec2 co) {
  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec4 noise_filterColor(vec4 color, vec2 texCoord) {
  float diff = (rand(texCoord) - 0.5) * noise.amount;
  color.r += diff;
  color.g += diff;
  color.b += diff;
  return color;
}

vec4 noise_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  return noise_filterColor(color, texCoord);
}
`]))),li={name:"noise",uniformTypes:{amount:"f32"},uniformPropTypes:{amount:{value:.5,min:0,max:1}},fs:wl,passes:[{filter:!0}]};var ci;function Il(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Tl=v(ci||(ci=Il([`uniform sepiaUniforms {
  float amount;
} sepia;

vec4 sepia_filterColor(vec4 color) {
  float r = color.r;
  float g = color.g;
  float b = color.b;

  color.r =
    min(1.0, (r * (1.0 - (0.607 * sepia.amount))) + (g * (0.769 * sepia.amount)) + (b * (0.189 * sepia.amount)));
  color.g = min(1.0, (r * 0.349 * sepia.amount) + (g * (1.0 - (0.314 * sepia.amount))) + (b * 0.168 * sepia.amount));
  color.b = min(1.0, (r * 0.272 * sepia.amount) + (g * 0.534 * sepia.amount) + (b * (1.0 - (0.869 * sepia.amount))));

  return color;
}

vec4 sepia_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  return sepia_filterColor(color);
}
`],[`\\
uniform sepiaUniforms {
  float amount;
} sepia;

vec4 sepia_filterColor(vec4 color) {
  float r = color.r;
  float g = color.g;
  float b = color.b;

  color.r =
    min(1.0, (r * (1.0 - (0.607 * sepia.amount))) + (g * (0.769 * sepia.amount)) + (b * (0.189 * sepia.amount)));
  color.g = min(1.0, (r * 0.349 * sepia.amount) + (g * (1.0 - (0.314 * sepia.amount))) + (b * 0.168 * sepia.amount));
  color.b = min(1.0, (r * 0.272 * sepia.amount) + (g * 0.534 * sepia.amount) + (b * (1.0 - (0.869 * sepia.amount))));

  return color;
}

vec4 sepia_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  return sepia_filterColor(color);
}
`]))),fi={name:"sepia",uniformTypes:{amount:"f32"},uniformPropTypes:{amount:{value:.5,min:0,max:1}},fs:Tl,passes:[{filter:!0}]};var ui;function Nl(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Ol=v(ui||(ui=Nl([`uniform vibranceUniforms {
  float amount;
} vibrance;

vec4 vibrance_filterColor(vec4 color) {
  float average = (color.r + color.g + color.b) / 3.0;
  float mx = max(color.r, max(color.g, color.b));
  float amt = (mx - average) * (-vibrance.amount * 3.0);
  color.rgb = mix(color.rgb, vec3(mx), amt);
  return color;
}

vec4 vibrance_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  return vibrance_filterColor(color);
}
`],[`\\
uniform vibranceUniforms {
  float amount;
} vibrance;

vec4 vibrance_filterColor(vec4 color) {
  float average = (color.r + color.g + color.b) / 3.0;
  float mx = max(color.r, max(color.g, color.b));
  float amt = (mx - average) * (-vibrance.amount * 3.0);
  color.rgb = mix(color.rgb, vec3(mx), amt);
  return color;
}

vec4 vibrance_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  return vibrance_filterColor(color);
}
`]))),_i={name:"vibrance",uniformPropTypes:{amount:{value:0,min:-1,max:1}},fs:Ol,passes:[{filter:!0}]};var pi;function Cl(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Fl=v(pi||(pi=Cl([`uniform vignetteUniforms {
  float radius;
  float amount;
} vignette;

vec4 vignette_filterColor(vec4 color, vec2 texCoord) {
  float dist = distance(texCoord, vec2(0.5, 0.5));
  float ratio = smoothstep(0.8, vignette.radius * 0.799, dist * (vignette.amount + vignette.radius));
  return color.rgba * ratio + (1.0 - ratio)*vec4(0.0, 0.0, 0.0, 1.0);
}

vec4 vignette_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  return vignette_filterColor(color, texCoord);
}
`],[`\\
uniform vignetteUniforms {
  float radius;
  float amount;
} vignette;

vec4 vignette_filterColor(vec4 color, vec2 texCoord) {
  float dist = distance(texCoord, vec2(0.5, 0.5));
  float ratio = smoothstep(0.8, vignette.radius * 0.799, dist * (vignette.amount + vignette.radius));
  return color.rgba * ratio + (1.0 - ratio)*vec4(0.0, 0.0, 0.0, 1.0);
}

vec4 vignette_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  return vignette_filterColor(color, texCoord);
}
`]))),di={name:"vignette",fs:Fl,uniformTypes:{radius:"f32",amount:"f32"},uniformPropTypes:{radius:{value:.5,min:0,max:1},amount:{value:.5,min:0,max:1}},passes:[{filter:!0}]};var hi;function Rl(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var kl=v(hi||(hi=Rl([`uniform tiltShiftUniforms {
  float blurRadius;
  float gradientRadius;
  vec2 start;
  vec2 end;
  bool invert;
} tiltShift;

vec2 tiltShift_getDelta(vec2 texSize) {
  vec2 vector = normalize((tiltShift.end - tiltShift.start) * texSize);
  return tiltShift.invert ? vec2(-vector.y, vector.x) : vector;
}

vec4 tiltShift_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec4 color = vec4(0.0);
  float total = 0.0;

  /* randomize the lookup values to hide the fixed number of samples */
  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);

  vec2 normal = normalize(vec2((tiltShift.start.y - tiltShift.end.y) * texSize.y, (tiltShift.end.x - tiltShift.start.x) * texSize.x));
  float radius = smoothstep(0.0, 1.0,
    abs(dot(texCoord * texSize - tiltShift.start * texSize, normal)) / tiltShift.gradientRadius) * tiltShift.blurRadius;

  for (float t = -30.0; t <= 30.0; t++) {
    float percent = (t + offset - 0.5) / 30.0;
    float weight = 1.0 - abs(percent);
    vec4 offsetColor = texture(source, texCoord + tiltShift_getDelta(texSize) / texSize * percent * radius);

    /* switch to pre-multiplied alpha to correctly blur transparent images */
    offsetColor.rgb *= offsetColor.a;

    color += offsetColor * weight;
    total += weight;
  }

  color = color / total;

  /* switch back from pre-multiplied alpha */
  color.rgb /= color.a + 0.00001;

  return color;
}
`],[`\\
uniform tiltShiftUniforms {
  float blurRadius;
  float gradientRadius;
  vec2 start;
  vec2 end;
  bool invert;
} tiltShift;

vec2 tiltShift_getDelta(vec2 texSize) {
  vec2 vector = normalize((tiltShift.end - tiltShift.start) * texSize);
  return tiltShift.invert ? vec2(-vector.y, vector.x) : vector;
}

vec4 tiltShift_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec4 color = vec4(0.0);
  float total = 0.0;

  /* randomize the lookup values to hide the fixed number of samples */
  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);

  vec2 normal = normalize(vec2((tiltShift.start.y - tiltShift.end.y) * texSize.y, (tiltShift.end.x - tiltShift.start.x) * texSize.x));
  float radius = smoothstep(0.0, 1.0,
    abs(dot(texCoord * texSize - tiltShift.start * texSize, normal)) / tiltShift.gradientRadius) * tiltShift.blurRadius;

  for (float t = -30.0; t <= 30.0; t++) {
    float percent = (t + offset - 0.5) / 30.0;
    float weight = 1.0 - abs(percent);
    vec4 offsetColor = texture(source, texCoord + tiltShift_getDelta(texSize) / texSize * percent * radius);

    /* switch to pre-multiplied alpha to correctly blur transparent images */
    offsetColor.rgb *= offsetColor.a;

    color += offsetColor * weight;
    total += weight;
  }

  color = color / total;

  /* switch back from pre-multiplied alpha */
  color.rgb /= color.a + 0.00001;

  return color;
}
`]))),mi={name:"tiltShift",uniformTypes:{blurRadius:"f32",gradientRadius:"f32",start:"vec2<f32>",end:"vec2<f32>",invert:"i32"},uniformPropTypes:{blurRadius:{value:15,min:0,max:50},gradientRadius:{value:200,min:0,max:400},start:{value:[0,0]},end:{value:[1,1]},invert:{value:!1,private:!0}},passes:[{sampler:!0,uniforms:{invert:!1}},{sampler:!0,uniforms:{invert:!0}}],dependencies:[K],fs:kl};var gi;function Ml(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Ul=v(gi||(gi=Ml([`uniform triangleBlurUniforms {
  float radius;
  vec2 delta;
} triangleBlur;

vec4 triangleBlur_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 adjustedDelta = triangleBlur.delta * triangleBlur.radius / texSize;

  vec4 color = vec4(0.0);
  float total = 0.0;

  /* randomize the lookup values to hide the fixed number of samples */
  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);

  for (float t = -30.0; t <= 30.0; t++) {
    float percent = (t + offset - 0.5) / 30.0;
    float weight = 1.0 - abs(percent);
    vec4 offsetColor = texture(source, texCoord + adjustedDelta * percent);

    /* switch to pre-multiplied alpha to correctly blur transparent images */
    offsetColor.rgb *= offsetColor.a;

    color += offsetColor * weight;
    total += weight;
  }

  color = color / total;

  /* switch back from pre-multiplied alpha */
  color.rgb /= color.a + 0.00001;

  return color;
}
`],[`\\
uniform triangleBlurUniforms {
  float radius;
  vec2 delta;
} triangleBlur;

vec4 triangleBlur_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 adjustedDelta = triangleBlur.delta * triangleBlur.radius / texSize;

  vec4 color = vec4(0.0);
  float total = 0.0;

  /* randomize the lookup values to hide the fixed number of samples */
  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);

  for (float t = -30.0; t <= 30.0; t++) {
    float percent = (t + offset - 0.5) / 30.0;
    float weight = 1.0 - abs(percent);
    vec4 offsetColor = texture(source, texCoord + adjustedDelta * percent);

    /* switch to pre-multiplied alpha to correctly blur transparent images */
    offsetColor.rgb *= offsetColor.a;

    color += offsetColor * weight;
    total += weight;
  }

  color = color / total;

  /* switch back from pre-multiplied alpha */
  color.rgb /= color.a + 0.00001;

  return color;
}
`]))),vi={name:"triangleBlur",uniformTypes:{radius:"f32",delta:"vec2<f32>"},uniformPropTypes:{radius:{value:20,min:0,softMax:100},delta:{value:[1,0],private:!0}},fs:Ul,dependencies:[K],passes:[{sampler:!0,uniforms:{delta:[1,0]}},{sampler:!0,uniforms:{delta:[0,1]}}]};var Dl=`
uniform zoomBlurUniforms {
  vec2 center;
  float strength;
} zoomBlur;

vec4 zoomBlur_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec4 color = vec4(0.0);
  float total = 0.0;
  vec2 toCenter = zoomBlur.center * texSize - texCoord * texSize;

  /* randomize the lookup values to hide the fixed number of samples */
  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);

  for (float t = 0.0; t <= 40.0; t++) {
    float percent = (t + offset) / 40.0;
    float weight = 4.0 * (percent - percent * percent);
    vec4 offsetColor = texture(source, texCoord + toCenter * percent * zoomBlur.strength / texSize);

    /* switch to pre-multiplied alpha to correctly blur transparent images */
    offsetColor.rgb *= offsetColor.a;

    color += offsetColor * weight;
    total += weight;
  }

  color = color / total;

  /* switch back from pre-multiplied alpha */
  color.rgb /= color.a + 0.00001;

  return color;
}
`,bi={name:"zoomBlur",uniformTypes:{center:"vec2<f32>",strength:"f32"},uniformPropTypes:{center:{value:[.5,.5]},strength:{value:.3,min:0,softMax:1}},fs:Dl,dependencies:[K],passes:[{sampler:!0}]};var xi;function zl(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Bl=v(xi||(xi=zl([`uniform colorHalftoneUniforms {
  vec2 center;
  float angle;
  float size;
} colorHalftone;

float pattern(float angle, float scale, vec2 texSize, vec2 texCoord) {
  float s = sin(angle), c = cos(angle);
  vec2 tex = texCoord * texSize - colorHalftone.center * texSize;
  vec2 point = vec2(
	c * tex.x - s * tex.y,
	s * tex.x + c * tex.y
  ) * scale;
  return (sin(point.x) * sin(point.y)) * 4.0;
}

vec4 colorHalftone_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  float scale = 3.1514 / colorHalftone.size;
  vec3 cmy = 1.0 - color.rgb;
  float k = min(cmy.x, min(cmy.y, cmy.z));

  cmy = (cmy - k) / (1.0 - k);
  cmy = clamp(
	  cmy * 10.0 - 3.0 + vec3(
      pattern(colorHalftone.angle + 0.26179, scale, texSize, texCoord),
	    pattern(colorHalftone.angle + 1.30899, scale, texSize, texCoord),
      pattern(colorHalftone.angle, scale, texSize, texCoord)
    ),
	  0.0,
	  1.0
  );
  k = clamp(k * 10.0 - 5.0 + pattern(colorHalftone.angle + 0.78539, scale, texSize, texCoord), 0.0, 1.0);
  return vec4(1.0 - cmy - k, color.a);
}
`],[`\\
uniform colorHalftoneUniforms {
  vec2 center;
  float angle;
  float size;
} colorHalftone;

float pattern(float angle, float scale, vec2 texSize, vec2 texCoord) {
  float s = sin(angle), c = cos(angle);
  vec2 tex = texCoord * texSize - colorHalftone.center * texSize;
  vec2 point = vec2(
	c * tex.x - s * tex.y,
	s * tex.x + c * tex.y
  ) * scale;
  return (sin(point.x) * sin(point.y)) * 4.0;
}

vec4 colorHalftone_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  float scale = 3.1514 / colorHalftone.size;
  vec3 cmy = 1.0 - color.rgb;
  float k = min(cmy.x, min(cmy.y, cmy.z));

  cmy = (cmy - k) / (1.0 - k);
  cmy = clamp(
	  cmy * 10.0 - 3.0 + vec3(
      pattern(colorHalftone.angle + 0.26179, scale, texSize, texCoord),
	    pattern(colorHalftone.angle + 1.30899, scale, texSize, texCoord),
      pattern(colorHalftone.angle, scale, texSize, texCoord)
    ),
	  0.0,
	  1.0
  );
  k = clamp(k * 10.0 - 5.0 + pattern(colorHalftone.angle + 0.78539, scale, texSize, texCoord), 0.0, 1.0);
  return vec4(1.0 - cmy - k, color.a);
}
`]))),yi={name:"colorHalftone",uniformTypes:{center:"vec2<f32>",angle:"f32",size:"f32"},uniformPropTypes:{center:{value:[.5,.5]},angle:{value:1.1,softMin:0,softMax:Math.PI/2},size:{value:4,min:1,softMin:3,softMax:20}},fs:Bl,passes:[{filter:!0}]};var Ai;function jl(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Gl=v(Ai||(Ai=jl([`uniform dotScreenUniforms {
  vec2 center;
  float angle;
  float size;
} dotScreen;

float pattern(vec2 texSize, vec2 texCoord) {
  float scale = 3.1415 / dotScreen.size;

  float s = sin(dotScreen.angle), c = cos(dotScreen.angle);
  vec2 tex = texCoord * texSize - dotScreen.center * texSize;
  vec2 point = vec2(
    c * tex.x - s * tex.y,
    s * tex.x + c * tex.y
  ) * scale;
  return (sin(point.x) * sin(point.y)) * 4.0;
}

vec4 dotScreen_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  float average = (color.r + color.g + color.b) / 3.0;
  return vec4(vec3(average * 10.0 - 5.0 + pattern(texSize, texCoord)), color.a);
}
`],[`\\
uniform dotScreenUniforms {
  vec2 center;
  float angle;
  float size;
} dotScreen;

float pattern(vec2 texSize, vec2 texCoord) {
  float scale = 3.1415 / dotScreen.size;

  float s = sin(dotScreen.angle), c = cos(dotScreen.angle);
  vec2 tex = texCoord * texSize - dotScreen.center * texSize;
  vec2 point = vec2(
    c * tex.x - s * tex.y,
    s * tex.x + c * tex.y
  ) * scale;
  return (sin(point.x) * sin(point.y)) * 4.0;
}

vec4 dotScreen_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {
  float average = (color.r + color.g + color.b) / 3.0;
  return vec4(vec3(average * 10.0 - 5.0 + pattern(texSize, texCoord)), color.a);
}
`]))),Si={name:"dotScreen",uniformTypes:{center:"vec2<f32>",angle:"f32",size:"f32"},uniformPropTypes:{center:{value:[.5,.5]},angle:{value:1.1,softMin:0,softMax:Math.PI/2},size:{value:3,min:1,softMin:3,softMax:20}},fs:Gl,passes:[{filter:!0}]};var Li;function Hl(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Vl=v(Li||(Li=Hl([`uniform edgeWorkUniforms {
  float radius;
  vec2 delta;
} edgeWork;

vec4 edgeWork_sampleColor1(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 relativeDelta = edgeWork.radius * edgeWork.delta / texSize;

  vec2 color = vec2(0.0);
  vec2 total = vec2(0.0);

  /* randomize the lookup values to hide the fixed number of samples */
  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);

  for (float t = -30.0; t <= 30.0; t++) {
    float percent = (t + offset - 0.5) / 30.0;
    float weight = 1.0 - abs(percent);
    vec3 sampleColor = texture(source, texCoord + relativeDelta * percent).rgb;
    float average = (sampleColor.r + sampleColor.g + sampleColor.b) / 3.0;
    color.x += average * weight;
    total.x += weight;
    if (abs(t) < 15.0) {
      weight = weight * 2.0 - 1.0;
      color.y += average * weight;
      total.y += weight;
    }
  }
  return vec4(color / total, 0.0, 1.0);
}

vec4 edgeWork_sampleColor2(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 relativeDelta = edgeWork.radius * edgeWork.delta / texSize;

  vec2 color = vec2(0.0);
  vec2 total = vec2(0.0);

  /* randomize the lookup values to hide the fixed number of samples */
  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);

  for (float t = -30.0; t <= 30.0; t++) {
    float percent = (t + offset - 0.5) / 30.0;
    float weight = 1.0 - abs(percent);
    vec2 sampleColor = texture(source, texCoord + relativeDelta * percent).xy;
    color.x += sampleColor.x * weight;
    total.x += weight;
    if (abs(t) < 15.0) {
      weight = weight * 2.0 - 1.0;
      color.y += sampleColor.y * weight;
      total.y += weight;
    }
  }
  float c = clamp(10000.0 * (color.y / total.y - color.x / total.x) + 0.5, 0.0, 1.0);
  return vec4(c, c, c, 1.0);
}
`],[`\\
uniform edgeWorkUniforms {
  float radius;
  vec2 delta;
} edgeWork;

vec4 edgeWork_sampleColor1(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 relativeDelta = edgeWork.radius * edgeWork.delta / texSize;

  vec2 color = vec2(0.0);
  vec2 total = vec2(0.0);

  /* randomize the lookup values to hide the fixed number of samples */
  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);

  for (float t = -30.0; t <= 30.0; t++) {
    float percent = (t + offset - 0.5) / 30.0;
    float weight = 1.0 - abs(percent);
    vec3 sampleColor = texture(source, texCoord + relativeDelta * percent).rgb;
    float average = (sampleColor.r + sampleColor.g + sampleColor.b) / 3.0;
    color.x += average * weight;
    total.x += weight;
    if (abs(t) < 15.0) {
      weight = weight * 2.0 - 1.0;
      color.y += average * weight;
      total.y += weight;
    }
  }
  return vec4(color / total, 0.0, 1.0);
}

vec4 edgeWork_sampleColor2(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 relativeDelta = edgeWork.radius * edgeWork.delta / texSize;

  vec2 color = vec2(0.0);
  vec2 total = vec2(0.0);

  /* randomize the lookup values to hide the fixed number of samples */
  float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);

  for (float t = -30.0; t <= 30.0; t++) {
    float percent = (t + offset - 0.5) / 30.0;
    float weight = 1.0 - abs(percent);
    vec2 sampleColor = texture(source, texCoord + relativeDelta * percent).xy;
    color.x += sampleColor.x * weight;
    total.x += weight;
    if (abs(t) < 15.0) {
      weight = weight * 2.0 - 1.0;
      color.y += sampleColor.y * weight;
      total.y += weight;
    }
  }
  float c = clamp(10000.0 * (color.y / total.y - color.x / total.x) + 0.5, 0.0, 1.0);
  return vec4(c, c, c, 1.0);
}
`]))),Pi={name:"edgeWork",uniformPropTypes:{radius:{value:2,min:1,softMax:50},delta:{value:[1,0],private:!0}},fs:Vl,dependencies:[K],passes:[{sampler:"edgeWork_sampleColor1",uniformPropTypes:{delta:[1,0]}},{sampler:"edgeWork_sampleColor2",uniformPropTypes:{delta:[0,1]}}]};var Ei;function Xl(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Wl=v(Ei||(Ei=Xl([`uniform hexagonalPixelateUniforms {
  vec2 center;
  float scale;
} hexagonalPixelate;

vec4 hexagonalPixelate_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 tex = (texCoord * texSize - hexagonalPixelate.center * texSize) / hexagonalPixelate.scale;
  tex.y /= 0.866025404;
  tex.x -= tex.y * 0.5;

  vec2 a;
  if (tex.x + tex.y - floor(tex.x) - floor(tex.y) < 1.0) {
    a = vec2(floor(tex.x), floor(tex.y));
  }
  else a = vec2(ceil(tex.x), ceil(tex.y));
  vec2 b = vec2(ceil(tex.x), floor(tex.y));
  vec2 c = vec2(floor(tex.x), ceil(tex.y));

  vec3 TEX = vec3(tex.x, tex.y, 1.0 - tex.x - tex.y);
  vec3 A = vec3(a.x, a.y, 1.0 - a.x - a.y);
  vec3 B = vec3(b.x, b.y, 1.0 - b.x - b.y);
  vec3 C = vec3(c.x, c.y, 1.0 - c.x - c.y);

  float alen = length(TEX - A);
  float blen = length(TEX - B);
  float clen = length(TEX - C);

  vec2 choice;
  if (alen < blen) {
    if (alen < clen) choice = a;
    else choice = c;
  } else {
    if (blen < clen) choice = b;
    else choice = c;
  }

  choice.x += choice.y * 0.5;
  choice.y *= 0.866025404;
  choice *= hexagonalPixelate.scale / texSize;

  return texture(source, choice + hexagonalPixelate.center);
}
`],[`\\
uniform hexagonalPixelateUniforms {
  vec2 center;
  float scale;
} hexagonalPixelate;

vec4 hexagonalPixelate_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 tex = (texCoord * texSize - hexagonalPixelate.center * texSize) / hexagonalPixelate.scale;
  tex.y /= 0.866025404;
  tex.x -= tex.y * 0.5;

  vec2 a;
  if (tex.x + tex.y - floor(tex.x) - floor(tex.y) < 1.0) {
    a = vec2(floor(tex.x), floor(tex.y));
  }
  else a = vec2(ceil(tex.x), ceil(tex.y));
  vec2 b = vec2(ceil(tex.x), floor(tex.y));
  vec2 c = vec2(floor(tex.x), ceil(tex.y));

  vec3 TEX = vec3(tex.x, tex.y, 1.0 - tex.x - tex.y);
  vec3 A = vec3(a.x, a.y, 1.0 - a.x - a.y);
  vec3 B = vec3(b.x, b.y, 1.0 - b.x - b.y);
  vec3 C = vec3(c.x, c.y, 1.0 - c.x - c.y);

  float alen = length(TEX - A);
  float blen = length(TEX - B);
  float clen = length(TEX - C);

  vec2 choice;
  if (alen < blen) {
    if (alen < clen) choice = a;
    else choice = c;
  } else {
    if (blen < clen) choice = b;
    else choice = c;
  }

  choice.x += choice.y * 0.5;
  choice.y *= 0.866025404;
  choice *= hexagonalPixelate.scale / texSize;

  return texture(source, choice + hexagonalPixelate.center);
}
`]))),wi={name:"hexagonalPixelate",uniformTypes:{center:"vec2<f32>",scale:"f32"},uniformPropTypes:{center:{value:[.5,.5],hint:"screenspace"},scale:{value:10,min:1,softMin:5,softMax:50}},fs:Wl,passes:[{sampler:!0}]};var Ii;function ql(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Yl=v(Ii||(Ii=ql([`uniform inkUniforms {
  float strength;
} ink;

vec4 ink_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 dx = vec2(1.0 / texSize.x, 0.0);
  vec2 dy = vec2(0.0, 1.0 / texSize.y);
  vec4 color = texture(source, texCoord);
  float bigTotal = 0.0;
  float smallTotal = 0.0;
  vec3 bigAverage = vec3(0.0);
  vec3 smallAverage = vec3(0.0);
  for (float x = -2.0; x <= 2.0; x += 1.0) {
    for (float y = -2.0; y <= 2.0; y += 1.0) {
      vec3 offsetColor = texture(source, texCoord + dx * x + dy * y).rgb;
      bigAverage += offsetColor;
      bigTotal += 1.0;
      if (abs(x) + abs(y) < 2.0) {
        smallAverage += offsetColor;
        smallTotal += 1.0;
      }
    }
  }
  vec3 edge = max(vec3(0.0), bigAverage / bigTotal - smallAverage / smallTotal);
  float power = ink.strength * ink.strength * ink.strength * ink.strength * ink.strength;
  return vec4(color.rgb - dot(edge, edge) * power * 100000.0, color.a);
}
`],[`\\
uniform inkUniforms {
  float strength;
} ink;

vec4 ink_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 dx = vec2(1.0 / texSize.x, 0.0);
  vec2 dy = vec2(0.0, 1.0 / texSize.y);
  vec4 color = texture(source, texCoord);
  float bigTotal = 0.0;
  float smallTotal = 0.0;
  vec3 bigAverage = vec3(0.0);
  vec3 smallAverage = vec3(0.0);
  for (float x = -2.0; x <= 2.0; x += 1.0) {
    for (float y = -2.0; y <= 2.0; y += 1.0) {
      vec3 offsetColor = texture(source, texCoord + dx * x + dy * y).rgb;
      bigAverage += offsetColor;
      bigTotal += 1.0;
      if (abs(x) + abs(y) < 2.0) {
        smallAverage += offsetColor;
        smallTotal += 1.0;
      }
    }
  }
  vec3 edge = max(vec3(0.0), bigAverage / bigTotal - smallAverage / smallTotal);
  float power = ink.strength * ink.strength * ink.strength * ink.strength * ink.strength;
  return vec4(color.rgb - dot(edge, edge) * power * 100000.0, color.a);
}
`]))),Ti={name:"ink",uniformTypes:{strength:"f32"},uniformPropTypes:{strength:{value:.25,min:0,softMax:1}},fs:Yl,passes:[{sampler:!0}]};var Ni;function Ql(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Kl=v(Ni||(Ni=Ql([`uniform magnifyUniforms {
  vec2 screenXY;
  float radiusPixels;
  float zoom;
  float borderWidthPixels;
  vec4 borderColor;
} magnify;

vec4 magnify_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 pos = vec2(magnify.screenXY.x, 1.0 - magnify.screenXY.y);
  float dist = distance(texCoord * texSize, pos * texSize);
  if (dist < magnify.radiusPixels) {
    return texture(source, (texCoord - pos) / magnify.zoom + pos);
  }

  if (dist <= magnify.radiusPixels + magnify.borderWidthPixels) {
    return magnify.borderColor;
  }
  return texture(source, texCoord);
}
`],[`\\
uniform magnifyUniforms {
  vec2 screenXY;
  float radiusPixels;
  float zoom;
  float borderWidthPixels;
  vec4 borderColor;
} magnify;

vec4 magnify_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 pos = vec2(magnify.screenXY.x, 1.0 - magnify.screenXY.y);
  float dist = distance(texCoord * texSize, pos * texSize);
  if (dist < magnify.radiusPixels) {
    return texture(source, (texCoord - pos) / magnify.zoom + pos);
  }

  if (dist <= magnify.radiusPixels + magnify.borderWidthPixels) {
    return magnify.borderColor;
  }
  return texture(source, texCoord);
}
`]))),Oi={name:"magnify",uniformTypes:{screenXY:"vec2<f32>",radiusPixels:"f32",zoom:"f32",borderWidthPixels:"f32",borderColor:"vec4<f32>"},uniformPropTypes:{screenXY:{value:[0,0]},radiusPixels:200,zoom:2,borderWidthPixels:0,borderColor:{value:[255,255,255,255]}},fs:Kl,passes:[{sampler:!0}]};var Ci;function $l(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Zl=v(Ci||(Ci=$l([`vec4 warp_sampleColor(sampler2D source, vec2 texSize, vec2 coord) {
  vec4 color = texture(source, coord / texSize);
  vec2 clampedCoord = clamp(coord, vec2(0.0), texSize);
  if (coord != clampedCoord) {
    /* fade to transparent if we are outside the image */
    color.a *= max(0.0, 1.0 - length(coord - clampedCoord));
  }

  return color;
}
`],[`\\
vec4 warp_sampleColor(sampler2D source, vec2 texSize, vec2 coord) {
  vec4 color = texture(source, coord / texSize);
  vec2 clampedCoord = clamp(coord, vec2(0.0), texSize);
  if (coord != clampedCoord) {
    /* fade to transparent if we are outside the image */
    color.a *= max(0.0, 1.0 - length(coord - clampedCoord));
  }

  return color;
}
`]))),ve={name:"warp",passes:[],fs:Zl};var Fi;function Jl(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var ec=v(Fi||(Fi=Jl([`uniform bulgePinchUniforms {
  float radius;
  float strength;
  vec2 center;
} bulgePinch;

vec2 bulgePinch_warp(vec2 coord, vec2 texCenter) {
  coord -= texCenter;
  float distance = length(coord);
  if (distance < bulgePinch.radius) {
    float percent = distance / bulgePinch.radius;
    if (bulgePinch.strength > 0.0) {
      coord *= mix(1.0, smoothstep(0.0, bulgePinch.radius / distance, percent), bulgePinch.strength * 0.75);
    } else {
      coord *= mix(1.0, pow(percent, 1.0 + bulgePinch.strength * 0.75) * bulgePinch.radius / distance, 1.0 - percent);
    }
  }
  coord += texCenter;
  return coord;
}

vec4 bulgePinch_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 coord = texCoord * texSize;
  coord = bulgePinch_warp(coord, bulgePinch.center * texSize);

  return warp_sampleColor(source, texSize, coord);
}
`],[`\\
uniform bulgePinchUniforms {
  float radius;
  float strength;
  vec2 center;
} bulgePinch;

vec2 bulgePinch_warp(vec2 coord, vec2 texCenter) {
  coord -= texCenter;
  float distance = length(coord);
  if (distance < bulgePinch.radius) {
    float percent = distance / bulgePinch.radius;
    if (bulgePinch.strength > 0.0) {
      coord *= mix(1.0, smoothstep(0.0, bulgePinch.radius / distance, percent), bulgePinch.strength * 0.75);
    } else {
      coord *= mix(1.0, pow(percent, 1.0 + bulgePinch.strength * 0.75) * bulgePinch.radius / distance, 1.0 - percent);
    }
  }
  coord += texCenter;
  return coord;
}

vec4 bulgePinch_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 coord = texCoord * texSize;
  coord = bulgePinch_warp(coord, bulgePinch.center * texSize);

  return warp_sampleColor(source, texSize, coord);
}
`]))),Ri={name:"bulgePinch",fs:ec,uniformTypes:{center:"vec2<f32>",radius:"f32",strength:"f32"},uniformPropTypes:{center:{value:[.5,.5]},radius:{value:200,min:1,softMax:600},strength:{value:.5,min:-1,max:1}},dependencies:[ve],passes:[{sampler:!0}]};var ki;function nc(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var tc=v(ki||(ki=nc([`uniform swirlUniforms {
  float radius;
  float angle;
  vec2 center;
} swirl;

vec2 swirl_warp(vec2 coord, vec2 texCenter) {
  coord -= texCenter;
  float distance = length(coord);
  if (distance < swirl.radius) {
    float percent = (swirl.radius - distance) / swirl.radius;
    float theta = percent * percent * swirl.angle;
    float s = sin(theta);
    float c = cos(theta);
    coord = vec2(
      coord.x * c - coord.y * s,
      coord.x * s + coord.y * c
    );
  }
  coord += texCenter;
  return coord;
}

vec4 swirl_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 coord = texCoord * texSize;
  coord = swirl_warp(coord, swirl.center * texSize);

  return warp_sampleColor(source, texSize, coord);
}
`],[`\\
uniform swirlUniforms {
  float radius;
  float angle;
  vec2 center;
} swirl;

vec2 swirl_warp(vec2 coord, vec2 texCenter) {
  coord -= texCenter;
  float distance = length(coord);
  if (distance < swirl.radius) {
    float percent = (swirl.radius - distance) / swirl.radius;
    float theta = percent * percent * swirl.angle;
    float s = sin(theta);
    float c = cos(theta);
    coord = vec2(
      coord.x * c - coord.y * s,
      coord.x * s + coord.y * c
    );
  }
  coord += texCenter;
  return coord;
}

vec4 swirl_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
  vec2 coord = texCoord * texSize;
  coord = swirl_warp(coord, swirl.center * texSize);

  return warp_sampleColor(source, texSize, coord);
}
`]))),Mi={name:"swirl",fs:tc,uniformTypes:{center:"vec2<f32>",radius:"f32",angle:"f32"},uniformPropTypes:{center:{value:[.5,.5]},radius:{value:200,min:1,softMax:600},angle:{value:3,softMin:-25,softMax:25}},dependencies:[ve],passes:[{sampler:!0}]};var rc=`
#define FXAA_QUALITY_PRESET 29

#if (FXAA_QUALITY_PRESET == 10)
    #define FXAA_QUALITY_PS 3
    #define FXAA_QUALITY_P0 1.5
    #define FXAA_QUALITY_P1 3.0
    #define FXAA_QUALITY_P2 12.0
#endif
#if (FXAA_QUALITY_PRESET == 11)
    #define FXAA_QUALITY_PS 4
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 3.0
    #define FXAA_QUALITY_P3 12.0
#endif
#if (FXAA_QUALITY_PRESET == 12)
    #define FXAA_QUALITY_PS 5
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 4.0
    #define FXAA_QUALITY_P4 12.0
#endif
#if (FXAA_QUALITY_PRESET == 13)
    #define FXAA_QUALITY_PS 6
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 2.0
    #define FXAA_QUALITY_P4 4.0
    #define FXAA_QUALITY_P5 12.0
#endif
#if (FXAA_QUALITY_PRESET == 14)
    #define FXAA_QUALITY_PS 7
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 2.0
    #define FXAA_QUALITY_P4 2.0
    #define FXAA_QUALITY_P5 4.0
    #define FXAA_QUALITY_P6 12.0
#endif
#if (FXAA_QUALITY_PRESET == 15)
    #define FXAA_QUALITY_PS 8
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 2.0
    #define FXAA_QUALITY_P4 2.0
    #define FXAA_QUALITY_P5 2.0
    #define FXAA_QUALITY_P6 4.0
    #define FXAA_QUALITY_P7 12.0
#endif
#if (FXAA_QUALITY_PRESET == 20)
    #define FXAA_QUALITY_PS 3
    #define FXAA_QUALITY_P0 1.5
    #define FXAA_QUALITY_P1 2.0
    #define FXAA_QUALITY_P2 8.0
#endif
#if (FXAA_QUALITY_PRESET == 21)
    #define FXAA_QUALITY_PS 4
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 8.0
#endif
#if (FXAA_QUALITY_PRESET == 22)
    #define FXAA_QUALITY_PS 5
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 2.0
    #define FXAA_QUALITY_P4 8.0
#endif
#if (FXAA_QUALITY_PRESET == 23)
    #define FXAA_QUALITY_PS 6
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 2.0
    #define FXAA_QUALITY_P4 2.0
    #define FXAA_QUALITY_P5 8.0
#endif
#if (FXAA_QUALITY_PRESET == 24)
    #define FXAA_QUALITY_PS 7
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 2.0
    #define FXAA_QUALITY_P4 2.0
    #define FXAA_QUALITY_P5 3.0
    #define FXAA_QUALITY_P6 8.0
#endif
#if (FXAA_QUALITY_PRESET == 25)
    #define FXAA_QUALITY_PS 8
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 2.0
    #define FXAA_QUALITY_P4 2.0
    #define FXAA_QUALITY_P5 2.0
    #define FXAA_QUALITY_P6 4.0
    #define FXAA_QUALITY_P7 8.0
#endif
#if (FXAA_QUALITY_PRESET == 26)
    #define FXAA_QUALITY_PS 9
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 2.0
    #define FXAA_QUALITY_P4 2.0
    #define FXAA_QUALITY_P5 2.0
    #define FXAA_QUALITY_P6 2.0
    #define FXAA_QUALITY_P7 4.0
    #define FXAA_QUALITY_P8 8.0
#endif
#if (FXAA_QUALITY_PRESET == 27)
    #define FXAA_QUALITY_PS 10
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 2.0
    #define FXAA_QUALITY_P4 2.0
    #define FXAA_QUALITY_P5 2.0
    #define FXAA_QUALITY_P6 2.0
    #define FXAA_QUALITY_P7 2.0
    #define FXAA_QUALITY_P8 4.0
    #define FXAA_QUALITY_P9 8.0
#endif
#if (FXAA_QUALITY_PRESET == 28)
    #define FXAA_QUALITY_PS 11
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 2.0
    #define FXAA_QUALITY_P4 2.0
    #define FXAA_QUALITY_P5 2.0
    #define FXAA_QUALITY_P6 2.0
    #define FXAA_QUALITY_P7 2.0
    #define FXAA_QUALITY_P8 2.0
    #define FXAA_QUALITY_P9 4.0
    #define FXAA_QUALITY_P10 8.0
#endif
#if (FXAA_QUALITY_PRESET == 29)
    #define FXAA_QUALITY_PS 12
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.5
    #define FXAA_QUALITY_P2 2.0
    #define FXAA_QUALITY_P3 2.0
    #define FXAA_QUALITY_P4 2.0
    #define FXAA_QUALITY_P5 2.0
    #define FXAA_QUALITY_P6 2.0
    #define FXAA_QUALITY_P7 2.0
    #define FXAA_QUALITY_P8 2.0
    #define FXAA_QUALITY_P9 2.0
    #define FXAA_QUALITY_P10 4.0
    #define FXAA_QUALITY_P11 8.0
#endif
#if (FXAA_QUALITY_PRESET == 39)
    #define FXAA_QUALITY_PS 12
    #define FXAA_QUALITY_P0 1.0
    #define FXAA_QUALITY_P1 1.0
    #define FXAA_QUALITY_P2 1.0
    #define FXAA_QUALITY_P3 1.0
    #define FXAA_QUALITY_P4 1.0
    #define FXAA_QUALITY_P5 1.5
    #define FXAA_QUALITY_P6 2.0
    #define FXAA_QUALITY_P7 2.0
    #define FXAA_QUALITY_P8 2.0
    #define FXAA_QUALITY_P9 2.0
    #define FXAA_QUALITY_P10 4.0
    #define FXAA_QUALITY_P11 8.0
#endif

#define FxaaBool bool
#define FxaaFloat float
#define FxaaFloat2 vec2
#define FxaaFloat3 vec3
#define FxaaFloat4 vec4
#define FxaaHalf float
#define FxaaHalf2 vec2
#define FxaaHalf3 vec3
#define FxaaHalf4 vec4
#define FxaaInt2 vec2
#define FxaaTex sampler2D

#define FxaaSat(x) clamp(x, 0.0, 1.0)
#define FxaaTexTop(t, p) texture(t, p)
#define FxaaTexOff(t, p, o, r) texture(t, p + (o * r))

FxaaFloat FxaaLuma_(FxaaFloat4 rgba) { return dot(rgba.rgb, vec3(0.2126, 0.7152, 0.0722)); }

FxaaFloat4 FxaaPixelShader_(
    //
    // Use noperspective interpolation here (turn off perspective interpolation).
    // {xy} = center of pixel
    FxaaFloat2 pos,
    //
    // Input color texture.
    // {rgb_} = color in linear or perceptual color space
    // if (FXAA_GREEN_AS_LUMA == 0)
    //     {___a} = luma in perceptual color space (not linear)
    FxaaTex tex,
    //
    // Only used on FXAA Quality.
    // This must be from a constant/uniform.
    // {x_} = 1.0/screenWidthInPixels
    // {_y} = 1.0/screenHeightInPixels
    FxaaFloat2 fxaaQualityRcpFrame,
    //
    // Only used on FXAA Quality.
    // This used to be the FXAA_QUALITY_SUBPIX define.
    // It is here now to allow easier tuning.
    // Choose the amount of sub-pixel aliasing removal.
    // This can effect sharpness.
    //   1.00 - upper limit (softer)
    //   0.75 - default amount of filtering
    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)
    //   0.25 - almost off
    //   0.00 - completely off
    FxaaFloat fxaaQualitySubpix,
    //
    // Only used on FXAA Quality.
    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.
    // It is here now to allow easier tuning.
    // The minimum amount of local contrast required to apply algorithm.
    //   0.333 - too little (faster)
    //   0.250 - low quality
    //   0.166 - default
    //   0.125 - high quality
    //   0.063 - overkill (slower)
    FxaaFloat fxaaQualityEdgeThreshold,
    //
    // Only used on FXAA Quality.
    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.
    // It is here now to allow easier tuning.
    // Trims the algorithm from processing darks.
    //   0.0833 - upper limit (default, the start of visible unfiltered edges)
    //   0.0625 - high quality (faster)
    //   0.0312 - visible limit (slower)
    // Special notes when using FXAA_GREEN_AS_LUMA,
    //   Likely want to set this to zero.
    //   As colors that are mostly not-green
    //   will appear very dark in the green channel!
    //   Tune by looking at mostly non-green content,
    //   then start at zero and increase until aliasing is a problem.
    FxaaFloat fxaaQualityEdgeThresholdMin
) {
/*--------------------------------------------------------------------------*/
    FxaaFloat2 posM;
    posM.x = pos.x;
    posM.y = pos.y;
    FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);
    #define lumaM rgbyM.y
    FxaaFloat lumaS = FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));
    FxaaFloat lumaE = FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));
    FxaaFloat lumaN = FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));
    FxaaFloat lumaW = FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));
/*--------------------------------------------------------------------------*/
    FxaaFloat maxSM = max(lumaS, lumaM);
    FxaaFloat minSM = min(lumaS, lumaM);
    FxaaFloat maxESM = max(lumaE, maxSM);
    FxaaFloat minESM = min(lumaE, minSM);
    FxaaFloat maxWN = max(lumaN, lumaW);
    FxaaFloat minWN = min(lumaN, lumaW);
    FxaaFloat rangeMax = max(maxWN, maxESM);
    FxaaFloat rangeMin = min(minWN, minESM);
    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;
    FxaaFloat range = rangeMax - rangeMin;
    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);
    FxaaBool earlyExit = range < rangeMaxClamped;
/*--------------------------------------------------------------------------*/
    if(earlyExit)
        return rgbyM;
/*--------------------------------------------------------------------------*/
    FxaaFloat lumaNW = FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));
    FxaaFloat lumaSE = FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));
    FxaaFloat lumaNE = FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));
    FxaaFloat lumaSW = FxaaLuma_(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));
/*--------------------------------------------------------------------------*/
    FxaaFloat lumaNS = lumaN + lumaS;
    FxaaFloat lumaWE = lumaW + lumaE;
    FxaaFloat subpixRcpRange = 1.0/range;
    FxaaFloat subpixNSWE = lumaNS + lumaWE;
    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;
    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;
/*--------------------------------------------------------------------------*/
    FxaaFloat lumaNESE = lumaNE + lumaSE;
    FxaaFloat lumaNWNE = lumaNW + lumaNE;
    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;
    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;
/*--------------------------------------------------------------------------*/
    FxaaFloat lumaNWSW = lumaNW + lumaSW;
    FxaaFloat lumaSWSE = lumaSW + lumaSE;
    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);
    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);
    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;
    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;
    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;
    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;
/*--------------------------------------------------------------------------*/
    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;
    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;
    FxaaBool horzSpan = edgeHorz >= edgeVert;
    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;
/*--------------------------------------------------------------------------*/
    if(!horzSpan) lumaN = lumaW;
    if(!horzSpan) lumaS = lumaE;
    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;
    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;
/*--------------------------------------------------------------------------*/
    FxaaFloat gradientN = lumaN - lumaM;
    FxaaFloat gradientS = lumaS - lumaM;
    FxaaFloat lumaNN = lumaN + lumaM;
    FxaaFloat lumaSS = lumaS + lumaM;
    FxaaBool pairN = abs(gradientN) >= abs(gradientS);
    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));
    if(pairN) lengthSign = -lengthSign;
    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);
/*--------------------------------------------------------------------------*/
    FxaaFloat2 posB;
    posB.x = posM.x;
    posB.y = posM.y;
    FxaaFloat2 offNP;
    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;
    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;
    if(!horzSpan) posB.x += lengthSign * 0.5;
    if( horzSpan) posB.y += lengthSign * 0.5;
/*--------------------------------------------------------------------------*/
    FxaaFloat2 posN;
    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;
    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;
    FxaaFloat2 posP;
    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;
    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;
    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;
    FxaaFloat lumaEndN = FxaaLuma_(FxaaTexTop(tex, posN));
    FxaaFloat subpixE = subpixC * subpixC;
    FxaaFloat lumaEndP = FxaaLuma_(FxaaTexTop(tex, posP));
/*--------------------------------------------------------------------------*/
    if(!pairN) lumaNN = lumaSS;
    FxaaFloat gradientScaled = gradient * 1.0/4.0;
    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;
    FxaaFloat subpixF = subpixD * subpixE;
    FxaaBool lumaMLTZero = lumaMM < 0.0;
/*--------------------------------------------------------------------------*/
    lumaEndN -= lumaNN * 0.5;
    lumaEndP -= lumaNN * 0.5;
    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;
    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;
    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;
    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;
    FxaaBool doneNP = (!doneN) || (!doneP);
    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;
    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;
/*--------------------------------------------------------------------------*/
    if(doneNP) {
        if(!doneN) lumaEndN = FxaaLuma_(FxaaTexTop(tex, posN.xy));
        if(!doneP) lumaEndP = FxaaLuma_(FxaaTexTop(tex, posP.xy));
        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
        doneN = abs(lumaEndN) >= gradientScaled;
        doneP = abs(lumaEndP) >= gradientScaled;
        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;
        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;
        doneNP = (!doneN) || (!doneP);
        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;
        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;
/*--------------------------------------------------------------------------*/
        #if (FXAA_QUALITY_PS > 3)
        if(doneNP) {
            if(!doneN) lumaEndN = FxaaLuma_(FxaaTexTop(tex, posN.xy));
            if(!doneP) lumaEndP = FxaaLuma_(FxaaTexTop(tex, posP.xy));
            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
            doneN = abs(lumaEndN) >= gradientScaled;
            doneP = abs(lumaEndP) >= gradientScaled;
            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;
            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;
            doneNP = (!doneN) || (!doneP);
            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;
            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;
/*--------------------------------------------------------------------------*/
            #if (FXAA_QUALITY_PS > 4)
            if(doneNP) {
                if(!doneN) lumaEndN = FxaaLuma_(FxaaTexTop(tex, posN.xy));
                if(!doneP) lumaEndP = FxaaLuma_(FxaaTexTop(tex, posP.xy));
                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
                doneN = abs(lumaEndN) >= gradientScaled;
                doneP = abs(lumaEndP) >= gradientScaled;
                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;
                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;
                doneNP = (!doneN) || (!doneP);
                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;
                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;
/*--------------------------------------------------------------------------*/
                #if (FXAA_QUALITY_PS > 5)
                if(doneNP) {
                    if(!doneN) lumaEndN = FxaaLuma_(FxaaTexTop(tex, posN.xy));
                    if(!doneP) lumaEndP = FxaaLuma_(FxaaTexTop(tex, posP.xy));
                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
                    doneN = abs(lumaEndN) >= gradientScaled;
                    doneP = abs(lumaEndP) >= gradientScaled;
                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;
                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;
                    doneNP = (!doneN) || (!doneP);
                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;
                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;
/*--------------------------------------------------------------------------*/
                    #if (FXAA_QUALITY_PS > 6)
                    if(doneNP) {
                        if(!doneN) lumaEndN = FxaaLuma_(FxaaTexTop(tex, posN.xy));
                        if(!doneP) lumaEndP = FxaaLuma_(FxaaTexTop(tex, posP.xy));
                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
                        doneN = abs(lumaEndN) >= gradientScaled;
                        doneP = abs(lumaEndP) >= gradientScaled;
                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;
                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;
                        doneNP = (!doneN) || (!doneP);
                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;
                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;
/*--------------------------------------------------------------------------*/
                        #if (FXAA_QUALITY_PS > 7)
                        if(doneNP) {
                            if(!doneN) lumaEndN = FxaaLuma_(FxaaTexTop(tex, posN.xy));
                            if(!doneP) lumaEndP = FxaaLuma_(FxaaTexTop(tex, posP.xy));
                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
                            doneN = abs(lumaEndN) >= gradientScaled;
                            doneP = abs(lumaEndP) >= gradientScaled;
                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;
                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;
                            doneNP = (!doneN) || (!doneP);
                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;
                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;
/*--------------------------------------------------------------------------*/
    #if (FXAA_QUALITY_PS > 8)
    if(doneNP) {
        if(!doneN) lumaEndN = FxaaLuma_(FxaaTexTop(tex, posN.xy));
        if(!doneP) lumaEndP = FxaaLuma_(FxaaTexTop(tex, posP.xy));
        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
        doneN = abs(lumaEndN) >= gradientScaled;
        doneP = abs(lumaEndP) >= gradientScaled;
        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;
        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;
        doneNP = (!doneN) || (!doneP);
        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;
        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;
/*--------------------------------------------------------------------------*/
        #if (FXAA_QUALITY_PS > 9)
        if(doneNP) {
            if(!doneN) lumaEndN = FxaaLuma_(FxaaTexTop(tex, posN.xy));
            if(!doneP) lumaEndP = FxaaLuma_(FxaaTexTop(tex, posP.xy));
            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
            doneN = abs(lumaEndN) >= gradientScaled;
            doneP = abs(lumaEndP) >= gradientScaled;
            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;
            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;
            doneNP = (!doneN) || (!doneP);
            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;
            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;
/*--------------------------------------------------------------------------*/
            #if (FXAA_QUALITY_PS > 10)
            if(doneNP) {
                if(!doneN) lumaEndN = FxaaLuma_(FxaaTexTop(tex, posN.xy));
                if(!doneP) lumaEndP = FxaaLuma_(FxaaTexTop(tex, posP.xy));
                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
                doneN = abs(lumaEndN) >= gradientScaled;
                doneP = abs(lumaEndP) >= gradientScaled;
                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;
                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;
                doneNP = (!doneN) || (!doneP);
                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;
                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;
/*--------------------------------------------------------------------------*/
                #if (FXAA_QUALITY_PS > 11)
                if(doneNP) {
                    if(!doneN) lumaEndN = FxaaLuma_(FxaaTexTop(tex, posN.xy));
                    if(!doneP) lumaEndP = FxaaLuma_(FxaaTexTop(tex, posP.xy));
                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
                    doneN = abs(lumaEndN) >= gradientScaled;
                    doneP = abs(lumaEndP) >= gradientScaled;
                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;
                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;
                    doneNP = (!doneN) || (!doneP);
                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;
                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;
/*--------------------------------------------------------------------------*/
                    #if (FXAA_QUALITY_PS > 12)
                    if(doneNP) {
                        if(!doneN) lumaEndN = FxaaLuma_(FxaaTexTop(tex, posN.xy));
                        if(!doneP) lumaEndP = FxaaLuma_(FxaaTexTop(tex, posP.xy));
                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
                        doneN = abs(lumaEndN) >= gradientScaled;
                        doneP = abs(lumaEndP) >= gradientScaled;
                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;
                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;
                        doneNP = (!doneN) || (!doneP);
                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;
                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;
/*--------------------------------------------------------------------------*/
                    }
                    #endif
/*--------------------------------------------------------------------------*/
                }
                #endif
/*--------------------------------------------------------------------------*/
            }
            #endif
/*--------------------------------------------------------------------------*/
        }
        #endif
/*--------------------------------------------------------------------------*/
    }
    #endif
/*--------------------------------------------------------------------------*/
                        }
                        #endif
/*--------------------------------------------------------------------------*/
                    }
                    #endif
/*--------------------------------------------------------------------------*/
                }
                #endif
/*--------------------------------------------------------------------------*/
            }
            #endif
/*--------------------------------------------------------------------------*/
        }
        #endif
/*--------------------------------------------------------------------------*/
    }
/*--------------------------------------------------------------------------*/
    FxaaFloat dstN = posM.x - posN.x;
    FxaaFloat dstP = posP.x - posM.x;
    if(!horzSpan) dstN = posM.y - posN.y;
    if(!horzSpan) dstP = posP.y - posM.y;
/*--------------------------------------------------------------------------*/
    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;
    FxaaFloat spanLength = (dstP + dstN);
    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;
    FxaaFloat spanLengthRcp = 1.0/spanLength;
/*--------------------------------------------------------------------------*/
    FxaaBool directionN = dstN < dstP;
    FxaaFloat dst = min(dstN, dstP);
    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;
    FxaaFloat subpixG = subpixF * subpixF;
    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;
    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;
/*--------------------------------------------------------------------------*/
    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;
    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);
    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;
    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;
    return FxaaTexTop(tex, posM);
}

vec4 fxaa_sampleColor(sampler2D source, vec2 texSize, vec2 texCoord) {
    const float fxaa_QualitySubpix = 0.5;
    const float fxaa_QualityEdgeThreshold = 0.125;
    const float fxaa_QualityEdgeThresholdMin = 0.0833;

    return FxaaPixelShader_(
        texCoord,
        source,
        vec2(1.0) / texSize,
        fxaa_QualitySubpix,
        fxaa_QualityEdgeThreshold,
        fxaa_QualityEdgeThresholdMin
    );
}
`,Ui={name:"fxaa",uniformPropTypes:{},fs:rc,passes:[{sampler:!0}]};function Ye(e){var n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[],t=arguments.length>2&&arguments[2]!==void 0?arguments[2]:0,r=Math.fround(e),i=e-r;return n[t]=r,n[t+1]=i,n}function Pn(e){return e-Math.fround(e)}function En(e){for(var n=new Float32Array(32),t=0;t<4;++t)for(var r=0;r<4;++r){var i=t*4+r;Ye(e[r*4+t],n,i*2)}return n}var Di;function ic(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var zi=v(Di||(Di=ic([`uniform float ONE;

/*
About LUMA_FP64_CODE_ELIMINATION_WORKAROUND

The purpose of this workaround is to prevent shader compilers from
optimizing away necessary arithmetic operations by swapping their sequences
or transform the equation to some 'equivalent' form.

The method is to multiply an artifical variable, ONE, which will be known to
the compiler to be 1 only at runtime. The whole expression is then represented
as a polynomial with respective to ONE. In the coefficients of all terms, only one a
and one b should appear

err = (a + b) * ONE^6 - a * ONE^5 - (a + b) * ONE^4 + a * ONE^3 - b - (a + b) * ONE^2 + a * ONE
*/

// Divide float number to high and low floats to extend fraction bits
vec2 split(float a) {
  const float SPLIT = 4097.0;
  float t = a * SPLIT;
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float a_hi = t * ONE - (t - a);
  float a_lo = a * ONE - a_hi;
#else
  float a_hi = t - (t - a);
  float a_lo = a - a_hi;
#endif
  return vec2(a_hi, a_lo);
}

// Divide float number again when high float uses too many fraction bits
vec2 split2(vec2 a) {
  vec2 b = split(a.x);
  b.y += a.y;
  return b;
}

// Special sum operation when a > b
vec2 quickTwoSum(float a, float b) {
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float sum = (a + b) * ONE;
  float err = b - (sum - a) * ONE;
#else
  float sum = a + b;
  float err = b - (sum - a);
#endif
  return vec2(sum, err);
}

// General sum operation
vec2 twoSum(float a, float b) {
  float s = (a + b);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float v = (s * ONE - a) * ONE;
  float err = (a - (s - v) * ONE) * ONE * ONE * ONE + (b - v);
#else
  float v = s - a;
  float err = (a - (s - v)) + (b - v);
#endif
  return vec2(s, err);
}

vec2 twoSub(float a, float b) {
  float s = (a - b);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float v = (s * ONE - a) * ONE;
  float err = (a - (s - v) * ONE) * ONE * ONE * ONE - (b + v);
#else
  float v = s - a;
  float err = (a - (s - v)) - (b + v);
#endif
  return vec2(s, err);
}

vec2 twoSqr(float a) {
  float prod = a * a;
  vec2 a_fp64 = split(a);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float err = ((a_fp64.x * a_fp64.x - prod) * ONE + 2.0 * a_fp64.x *
    a_fp64.y * ONE * ONE) + a_fp64.y * a_fp64.y * ONE * ONE * ONE;
#else
  float err = ((a_fp64.x * a_fp64.x - prod) + 2.0 * a_fp64.x * a_fp64.y) + a_fp64.y * a_fp64.y;
#endif
  return vec2(prod, err);
}

vec2 twoProd(float a, float b) {
  float prod = a * b;
  vec2 a_fp64 = split(a);
  vec2 b_fp64 = split(b);
  float err = ((a_fp64.x * b_fp64.x - prod) + a_fp64.x * b_fp64.y +
    a_fp64.y * b_fp64.x) + a_fp64.y * b_fp64.y;
  return vec2(prod, err);
}

vec2 sum_fp64(vec2 a, vec2 b) {
  vec2 s, t;
  s = twoSum(a.x, b.x);
  t = twoSum(a.y, b.y);
  s.y += t.x;
  s = quickTwoSum(s.x, s.y);
  s.y += t.y;
  s = quickTwoSum(s.x, s.y);
  return s;
}

vec2 sub_fp64(vec2 a, vec2 b) {
  vec2 s, t;
  s = twoSub(a.x, b.x);
  t = twoSub(a.y, b.y);
  s.y += t.x;
  s = quickTwoSum(s.x, s.y);
  s.y += t.y;
  s = quickTwoSum(s.x, s.y);
  return s;
}

vec2 mul_fp64(vec2 a, vec2 b) {
  vec2 prod = twoProd(a.x, b.x);
  // y component is for the error
  prod.y += a.x * b.y;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  prod = split2(prod);
#endif
  prod = quickTwoSum(prod.x, prod.y);
  prod.y += a.y * b.x;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  prod = split2(prod);
#endif
  prod = quickTwoSum(prod.x, prod.y);
  return prod;
}

vec2 div_fp64(vec2 a, vec2 b) {
  float xn = 1.0 / b.x;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  vec2 yn = mul_fp64(a, vec2(xn, 0));
#else
  vec2 yn = a * xn;
#endif
  float diff = (sub_fp64(a, mul_fp64(b, yn))).x;
  vec2 prod = twoProd(xn, diff);
  return sum_fp64(yn, prod);
}

vec2 sqrt_fp64(vec2 a) {
  if (a.x == 0.0 && a.y == 0.0) return vec2(0.0, 0.0);
  if (a.x < 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);

  float x = 1.0 / sqrt(a.x);
  float yn = a.x * x;
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  vec2 yn_sqr = twoSqr(yn) * ONE;
#else
  vec2 yn_sqr = twoSqr(yn);
#endif
  float diff = sub_fp64(a, yn_sqr).x;
  vec2 prod = twoProd(x * 0.5, diff);
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  return sum_fp64(split(yn), prod);
#else
  return sum_fp64(vec2(yn, 0.0), prod);
#endif
}
`],[`\\
uniform float ONE;

/*
About LUMA_FP64_CODE_ELIMINATION_WORKAROUND

The purpose of this workaround is to prevent shader compilers from
optimizing away necessary arithmetic operations by swapping their sequences
or transform the equation to some 'equivalent' form.

The method is to multiply an artifical variable, ONE, which will be known to
the compiler to be 1 only at runtime. The whole expression is then represented
as a polynomial with respective to ONE. In the coefficients of all terms, only one a
and one b should appear

err = (a + b) * ONE^6 - a * ONE^5 - (a + b) * ONE^4 + a * ONE^3 - b - (a + b) * ONE^2 + a * ONE
*/

// Divide float number to high and low floats to extend fraction bits
vec2 split(float a) {
  const float SPLIT = 4097.0;
  float t = a * SPLIT;
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float a_hi = t * ONE - (t - a);
  float a_lo = a * ONE - a_hi;
#else
  float a_hi = t - (t - a);
  float a_lo = a - a_hi;
#endif
  return vec2(a_hi, a_lo);
}

// Divide float number again when high float uses too many fraction bits
vec2 split2(vec2 a) {
  vec2 b = split(a.x);
  b.y += a.y;
  return b;
}

// Special sum operation when a > b
vec2 quickTwoSum(float a, float b) {
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float sum = (a + b) * ONE;
  float err = b - (sum - a) * ONE;
#else
  float sum = a + b;
  float err = b - (sum - a);
#endif
  return vec2(sum, err);
}

// General sum operation
vec2 twoSum(float a, float b) {
  float s = (a + b);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float v = (s * ONE - a) * ONE;
  float err = (a - (s - v) * ONE) * ONE * ONE * ONE + (b - v);
#else
  float v = s - a;
  float err = (a - (s - v)) + (b - v);
#endif
  return vec2(s, err);
}

vec2 twoSub(float a, float b) {
  float s = (a - b);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float v = (s * ONE - a) * ONE;
  float err = (a - (s - v) * ONE) * ONE * ONE * ONE - (b + v);
#else
  float v = s - a;
  float err = (a - (s - v)) - (b + v);
#endif
  return vec2(s, err);
}

vec2 twoSqr(float a) {
  float prod = a * a;
  vec2 a_fp64 = split(a);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float err = ((a_fp64.x * a_fp64.x - prod) * ONE + 2.0 * a_fp64.x *
    a_fp64.y * ONE * ONE) + a_fp64.y * a_fp64.y * ONE * ONE * ONE;
#else
  float err = ((a_fp64.x * a_fp64.x - prod) + 2.0 * a_fp64.x * a_fp64.y) + a_fp64.y * a_fp64.y;
#endif
  return vec2(prod, err);
}

vec2 twoProd(float a, float b) {
  float prod = a * b;
  vec2 a_fp64 = split(a);
  vec2 b_fp64 = split(b);
  float err = ((a_fp64.x * b_fp64.x - prod) + a_fp64.x * b_fp64.y +
    a_fp64.y * b_fp64.x) + a_fp64.y * b_fp64.y;
  return vec2(prod, err);
}

vec2 sum_fp64(vec2 a, vec2 b) {
  vec2 s, t;
  s = twoSum(a.x, b.x);
  t = twoSum(a.y, b.y);
  s.y += t.x;
  s = quickTwoSum(s.x, s.y);
  s.y += t.y;
  s = quickTwoSum(s.x, s.y);
  return s;
}

vec2 sub_fp64(vec2 a, vec2 b) {
  vec2 s, t;
  s = twoSub(a.x, b.x);
  t = twoSub(a.y, b.y);
  s.y += t.x;
  s = quickTwoSum(s.x, s.y);
  s.y += t.y;
  s = quickTwoSum(s.x, s.y);
  return s;
}

vec2 mul_fp64(vec2 a, vec2 b) {
  vec2 prod = twoProd(a.x, b.x);
  // y component is for the error
  prod.y += a.x * b.y;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  prod = split2(prod);
#endif
  prod = quickTwoSum(prod.x, prod.y);
  prod.y += a.y * b.x;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  prod = split2(prod);
#endif
  prod = quickTwoSum(prod.x, prod.y);
  return prod;
}

vec2 div_fp64(vec2 a, vec2 b) {
  float xn = 1.0 / b.x;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  vec2 yn = mul_fp64(a, vec2(xn, 0));
#else
  vec2 yn = a * xn;
#endif
  float diff = (sub_fp64(a, mul_fp64(b, yn))).x;
  vec2 prod = twoProd(xn, diff);
  return sum_fp64(yn, prod);
}

vec2 sqrt_fp64(vec2 a) {
  if (a.x == 0.0 && a.y == 0.0) return vec2(0.0, 0.0);
  if (a.x < 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);

  float x = 1.0 / sqrt(a.x);
  float yn = a.x * x;
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  vec2 yn_sqr = twoSqr(yn) * ONE;
#else
  vec2 yn_sqr = twoSqr(yn);
#endif
  float diff = sub_fp64(a, yn_sqr).x;
  vec2 prod = twoProd(x * 0.5, diff);
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  return sum_fp64(split(yn), prod);
#else
  return sum_fp64(vec2(yn, 0.0), prod);
#endif
}
`])));var Bi;function oc(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var ji=v(Bi||(Bi=oc([`const vec2 E_FP64 = vec2(2.7182817459106445e+00, 8.254840366817007e-08);
const vec2 LOG2_FP64 = vec2(0.6931471824645996e+00, -1.9046542121259336e-09);
const vec2 PI_FP64 = vec2(3.1415927410125732, -8.742278012618954e-8);
const vec2 TWO_PI_FP64 = vec2(6.2831854820251465, -1.7484556025237907e-7);
const vec2 PI_2_FP64 = vec2(1.5707963705062866, -4.371139006309477e-8);
const vec2 PI_4_FP64 = vec2(0.7853981852531433, -2.1855695031547384e-8);
const vec2 PI_16_FP64 = vec2(0.19634954631328583, -5.463923757886846e-9);
const vec2 PI_16_2_FP64 = vec2(0.39269909262657166, -1.0927847515773692e-8);
const vec2 PI_16_3_FP64 = vec2(0.5890486240386963, -1.4906100798128818e-9);
const vec2 PI_180_FP64 = vec2(0.01745329238474369, 1.3519960498364902e-10);

const vec2 SIN_TABLE_0_FP64 = vec2(0.19509032368659973, -1.6704714833615242e-9);
const vec2 SIN_TABLE_1_FP64 = vec2(0.3826834261417389, 6.22335089017767e-9);
const vec2 SIN_TABLE_2_FP64 = vec2(0.5555702447891235, -1.1769521357507529e-8);
const vec2 SIN_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617041793133e-8);

const vec2 COS_TABLE_0_FP64 = vec2(0.9807852506637573, 2.9739473106360492e-8);
const vec2 COS_TABLE_1_FP64 = vec2(0.9238795042037964, 2.8307490351764386e-8);
const vec2 COS_TABLE_2_FP64 = vec2(0.8314695954322815, 1.6870263741530778e-8);
const vec2 COS_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617152815436e-8);

const vec2 INVERSE_FACTORIAL_3_FP64 = vec2(1.666666716337204e-01, -4.967053879312289e-09); // 1/3!
const vec2 INVERSE_FACTORIAL_4_FP64 = vec2(4.16666679084301e-02, -1.2417634698280722e-09); // 1/4!
const vec2 INVERSE_FACTORIAL_5_FP64 = vec2(8.333333767950535e-03, -4.34617203337595e-10); // 1/5!
const vec2 INVERSE_FACTORIAL_6_FP64 = vec2(1.3888889225199819e-03, -3.3631094437103215e-11); // 1/6!
const vec2 INVERSE_FACTORIAL_7_FP64 = vec2(1.9841270113829523e-04,  -2.725596874933456e-12); // 1/7!
const vec2 INVERSE_FACTORIAL_8_FP64 = vec2(2.4801587642286904e-05, -3.406996025904184e-13); // 1/8!
const vec2 INVERSE_FACTORIAL_9_FP64 = vec2(2.75573188446287533e-06, 3.7935713937038186e-14); // 1/9!
const vec2 INVERSE_FACTORIAL_10_FP64 = vec2(2.755731998149713e-07, -7.575112367869873e-15); // 1/10!

float nint(float d) {
    if (d == floor(d)) return d;
    return floor(d + 0.5);
}

vec2 nint_fp64(vec2 a) {
    float hi = nint(a.x);
    float lo;
    vec2 tmp;
    if (hi == a.x) {
        lo = nint(a.y);
        tmp = quickTwoSum(hi, lo);
    } else {
        lo = 0.0;
        if (abs(hi - a.x) == 0.5 && a.y < 0.0) {
            hi -= 1.0;
        }
        tmp = vec2(hi, lo);
    }
    return tmp;
}

/* k_power controls how much range reduction we would like to have
Range reduction uses the following method:
assume a = k_power * r + m * log(2), k and m being integers.
Set k_power = 4 (we can choose other k to trade accuracy with performance.
we only need to calculate exp(r) and using exp(a) = 2^m * exp(r)^k_power;
*/

vec2 exp_fp64(vec2 a) {
  // We need to make sure these two numbers match
  // as bit-wise shift is not available in GLSL 1.0
  const int k_power = 4;
  const float k = 16.0;

  const float inv_k = 1.0 / k;

  if (a.x <= -88.0) return vec2(0.0, 0.0);
  if (a.x >= 88.0) return vec2(1.0 / 0.0, 1.0 / 0.0);
  if (a.x == 0.0 && a.y == 0.0) return vec2(1.0, 0.0);
  if (a.x == 1.0 && a.y == 0.0) return E_FP64;

  float m = floor(a.x / LOG2_FP64.x + 0.5);
  vec2 r = sub_fp64(a, mul_fp64(LOG2_FP64, vec2(m, 0.0))) * inv_k;
  vec2 s, t, p;

  p = mul_fp64(r, r);
  s = sum_fp64(r, p * 0.5);
  p = mul_fp64(p, r);
  t = mul_fp64(p, INVERSE_FACTORIAL_3_FP64);

  s = sum_fp64(s, t);
  p = mul_fp64(p, r);
  t = mul_fp64(p, INVERSE_FACTORIAL_4_FP64);

  s = sum_fp64(s, t);
  p = mul_fp64(p, r);
  t = mul_fp64(p, INVERSE_FACTORIAL_5_FP64);

  // s = sum_fp64(s, t);
  // p = mul_fp64(p, r);
  // t = mul_fp64(p, INVERSE_FACTORIAL_6_FP64);

  // s = sum_fp64(s, t);
  // p = mul_fp64(p, r);
  // t = mul_fp64(p, INVERSE_FACTORIAL_7_FP64);

  s = sum_fp64(s, t);


  // At this point, s = exp(r) - 1; but after following 4 recursions, we will get exp(r) ^ 512 - 1.
  for (int i = 0; i < k_power; i++) {
    s = sum_fp64(s * 2.0, mul_fp64(s, s));
  }

#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
  s = sum_fp64(s, vec2(ONE, 0.0));
#else
  s = sum_fp64(s, vec2(1.0, 0.0));
#endif

  return s * pow(2.0, m);
//   return r;
}

vec2 log_fp64(vec2 a)
{
  if (a.x == 1.0 && a.y == 0.0) return vec2(0.0, 0.0);
  if (a.x <= 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);
  vec2 x = vec2(log(a.x), 0.0);
  vec2 s;
#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
  s = vec2(ONE, 0.0);
#else
  s = vec2(1.0, 0.0);
#endif

  x = sub_fp64(sum_fp64(x, mul_fp64(a, exp_fp64(-x))), s);
  return x;
}

vec2 sin_taylor_fp64(vec2 a) {
  vec2 r, s, t, x;

  if (a.x == 0.0 && a.y == 0.0) {
    return vec2(0.0, 0.0);
  }

  x = -mul_fp64(a, a);
  s = a;
  r = a;

  r = mul_fp64(r, x);
  t = mul_fp64(r, INVERSE_FACTORIAL_3_FP64);
  s = sum_fp64(s, t);

  r = mul_fp64(r, x);
  t = mul_fp64(r, INVERSE_FACTORIAL_5_FP64);
  s = sum_fp64(s, t);

  /* keep the following commented code in case we need them
  for extra accuracy from the Taylor expansion*/

  // r = mul_fp64(r, x);
  // t = mul_fp64(r, INVERSE_FACTORIAL_7_FP64);
  // s = sum_fp64(s, t);

  // r = mul_fp64(r, x);
  // t = mul_fp64(r, INVERSE_FACTORIAL_9_FP64);
  // s = sum_fp64(s, t);

  return s;
}

vec2 cos_taylor_fp64(vec2 a) {
  vec2 r, s, t, x;

  if (a.x == 0.0 && a.y == 0.0) {
    return vec2(1.0, 0.0);
  }

  x = -mul_fp64(a, a);
  r = x;
  s = sum_fp64(vec2(1.0, 0.0), r * 0.5);

  r = mul_fp64(r, x);
  t = mul_fp64(r, INVERSE_FACTORIAL_4_FP64);
  s = sum_fp64(s, t);

  r = mul_fp64(r, x);
  t = mul_fp64(r, INVERSE_FACTORIAL_6_FP64);
  s = sum_fp64(s, t);

  /* keep the following commented code in case we need them
  for extra accuracy from the Taylor expansion*/

  // r = mul_fp64(r, x);
  // t = mul_fp64(r, INVERSE_FACTORIAL_8_FP64);
  // s = sum_fp64(s, t);

  // r = mul_fp64(r, x);
  // t = mul_fp64(r, INVERSE_FACTORIAL_10_FP64);
  // s = sum_fp64(s, t);

  return s;
}

void sincos_taylor_fp64(vec2 a, out vec2 sin_t, out vec2 cos_t) {
  if (a.x == 0.0 && a.y == 0.0) {
    sin_t = vec2(0.0, 0.0);
    cos_t = vec2(1.0, 0.0);
  }

  sin_t = sin_taylor_fp64(a);
  cos_t = sqrt_fp64(sub_fp64(vec2(1.0, 0.0), mul_fp64(sin_t, sin_t)));
}

vec2 sin_fp64(vec2 a) {
    if (a.x == 0.0 && a.y == 0.0) {
        return vec2(0.0, 0.0);
    }

    // 2pi range reduction
    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));
    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));

    vec2 t;
    float q = floor(r.x / PI_2_FP64.x + 0.5);
    int j = int(q);

    if (j < -2 || j > 2) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    }

    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));

    q = floor(t.x / PI_16_FP64.x + 0.5);
    int k = int(q);

    if (k == 0) {
        if (j == 0) {
            return sin_taylor_fp64(t);
        } else if (j == 1) {
            return cos_taylor_fp64(t);
        } else if (j == -1) {
            return -cos_taylor_fp64(t);
        } else {
            return -sin_taylor_fp64(t);
        }
    }

    int abs_k = int(abs(float(k)));

    if (abs_k > 4) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    } else {
        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));
    }

    vec2 u = vec2(0.0, 0.0);
    vec2 v = vec2(0.0, 0.0);

#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
    if (abs(float(abs_k) - 1.0) < 0.5) {
        u = COS_TABLE_0_FP64;
        v = SIN_TABLE_0_FP64;
    } else if (abs(float(abs_k) - 2.0) < 0.5) {
        u = COS_TABLE_1_FP64;
        v = SIN_TABLE_1_FP64;
    } else if (abs(float(abs_k) - 3.0) < 0.5) {
        u = COS_TABLE_2_FP64;
        v = SIN_TABLE_2_FP64;
    } else if (abs(float(abs_k) - 4.0) < 0.5) {
        u = COS_TABLE_3_FP64;
        v = SIN_TABLE_3_FP64;
    }
#else
    if (abs_k == 1) {
        u = COS_TABLE_0_FP64;
        v = SIN_TABLE_0_FP64;
    } else if (abs_k == 2) {
        u = COS_TABLE_1_FP64;
        v = SIN_TABLE_1_FP64;
    } else if (abs_k == 3) {
        u = COS_TABLE_2_FP64;
        v = SIN_TABLE_2_FP64;
    } else if (abs_k == 4) {
        u = COS_TABLE_3_FP64;
        v = SIN_TABLE_3_FP64;
    }
#endif

    vec2 sin_t, cos_t;
    sincos_taylor_fp64(t, sin_t, cos_t);



    vec2 result = vec2(0.0, 0.0);
    if (j == 0) {
        if (k > 0) {
            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        } else {
            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        }
    } else if (j == 1) {
        if (k > 0) {
            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        } else {
            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        }
    } else if (j == -1) {
        if (k > 0) {
            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));
        } else {
            result = -sum_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));
        }
    } else {
        if (k > 0) {
            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        } else {
            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));
        }
    }

    return result;
}

vec2 cos_fp64(vec2 a) {
    if (a.x == 0.0 && a.y == 0.0) {
        return vec2(1.0, 0.0);
    }

    // 2pi range reduction
    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));
    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));

    vec2 t;
    float q = floor(r.x / PI_2_FP64.x + 0.5);
    int j = int(q);

    if (j < -2 || j > 2) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    }

    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));

    q = floor(t.x / PI_16_FP64.x + 0.5);
    int k = int(q);

    if (k == 0) {
        if (j == 0) {
            return cos_taylor_fp64(t);
        } else if (j == 1) {
            return -sin_taylor_fp64(t);
        } else if (j == -1) {
            return sin_taylor_fp64(t);
        } else {
            return -cos_taylor_fp64(t);
        }
    }

    int abs_k = int(abs(float(k)));

    if (abs_k > 4) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    } else {
        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));
    }

    vec2 u = vec2(0.0, 0.0);
    vec2 v = vec2(0.0, 0.0);

#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
    if (abs(float(abs_k) - 1.0) < 0.5) {
        u = COS_TABLE_0_FP64;
        v = SIN_TABLE_0_FP64;
    } else if (abs(float(abs_k) - 2.0) < 0.5) {
        u = COS_TABLE_1_FP64;
        v = SIN_TABLE_1_FP64;
    } else if (abs(float(abs_k) - 3.0) < 0.5) {
        u = COS_TABLE_2_FP64;
        v = SIN_TABLE_2_FP64;
    } else if (abs(float(abs_k) - 4.0) < 0.5) {
        u = COS_TABLE_3_FP64;
        v = SIN_TABLE_3_FP64;
    }
#else
    if (abs_k == 1) {
        u = COS_TABLE_0_FP64;
        v = SIN_TABLE_0_FP64;
    } else if (abs_k == 2) {
        u = COS_TABLE_1_FP64;
        v = SIN_TABLE_1_FP64;
    } else if (abs_k == 3) {
        u = COS_TABLE_2_FP64;
        v = SIN_TABLE_2_FP64;
    } else if (abs_k == 4) {
        u = COS_TABLE_3_FP64;
        v = SIN_TABLE_3_FP64;
    }
#endif

    vec2 sin_t, cos_t;
    sincos_taylor_fp64(t, sin_t, cos_t);

    vec2 result = vec2(0.0, 0.0);
    if (j == 0) {
        if (k > 0) {
            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        } else {
            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        }
    } else if (j == 1) {
        if (k > 0) {
            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        } else {
            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));
        }
    } else if (j == -1) {
        if (k > 0) {
            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        } else {
            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        }
    } else {
        if (k > 0) {
            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));
        } else {
            result = -sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        }
    }

    return result;
}

vec2 tan_fp64(vec2 a) {
    vec2 sin_a;
    vec2 cos_a;

    if (a.x == 0.0 && a.y == 0.0) {
        return vec2(0.0, 0.0);
    }

    // 2pi range reduction
    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));
    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));

    vec2 t;
    float q = floor(r.x / PI_2_FP64.x + 0.5);
    int j = int(q);


    if (j < -2 || j > 2) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    }

    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));

    q = floor(t.x / PI_16_FP64.x + 0.5);
    int k = int(q);
    int abs_k = int(abs(float(k)));

    // We just can't get PI/16 * 3.0 very accurately.
    // so let's just store it
    if (abs_k > 4) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    } else {
        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));
    }


    vec2 u = vec2(0.0, 0.0);
    vec2 v = vec2(0.0, 0.0);

    vec2 sin_t, cos_t;
    vec2 s, c;
    sincos_taylor_fp64(t, sin_t, cos_t);

    if (k == 0) {
        s = sin_t;
        c = cos_t;
    } else {
#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
        if (abs(float(abs_k) - 1.0) < 0.5) {
            u = COS_TABLE_0_FP64;
            v = SIN_TABLE_0_FP64;
        } else if (abs(float(abs_k) - 2.0) < 0.5) {
            u = COS_TABLE_1_FP64;
            v = SIN_TABLE_1_FP64;
        } else if (abs(float(abs_k) - 3.0) < 0.5) {
            u = COS_TABLE_2_FP64;
            v = SIN_TABLE_2_FP64;
        } else if (abs(float(abs_k) - 4.0) < 0.5) {
            u = COS_TABLE_3_FP64;
            v = SIN_TABLE_3_FP64;
        }
#else
        if (abs_k == 1) {
            u = COS_TABLE_0_FP64;
            v = SIN_TABLE_0_FP64;
        } else if (abs_k == 2) {
            u = COS_TABLE_1_FP64;
            v = SIN_TABLE_1_FP64;
        } else if (abs_k == 3) {
            u = COS_TABLE_2_FP64;
            v = SIN_TABLE_2_FP64;
        } else if (abs_k == 4) {
            u = COS_TABLE_3_FP64;
            v = SIN_TABLE_3_FP64;
        }
#endif
        if (k > 0) {
            s = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
            c = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        } else {
            s = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
            c = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        }
    }

    if (j == 0) {
        sin_a = s;
        cos_a = c;
    } else if (j == 1) {
        sin_a = c;
        cos_a = -s;
    } else if (j == -1) {
        sin_a = -c;
        cos_a = s;
    } else {
        sin_a = -s;
        cos_a = -c;
    }
    return div_fp64(sin_a, cos_a);
}

vec2 radians_fp64(vec2 degree) {
  return mul_fp64(degree, PI_180_FP64);
}

vec2 mix_fp64(vec2 a, vec2 b, float x) {
  vec2 range = sub_fp64(b, a);
  return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));
}

// Vector functions
// vec2 functions
void vec2_sum_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
    out_val[0] = sum_fp64(a[0], b[0]);
    out_val[1] = sum_fp64(a[1], b[1]);
}

void vec2_sub_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
    out_val[0] = sub_fp64(a[0], b[0]);
    out_val[1] = sub_fp64(a[1], b[1]);
}

void vec2_mul_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
    out_val[0] = mul_fp64(a[0], b[0]);
    out_val[1] = mul_fp64(a[1], b[1]);
}

void vec2_div_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
    out_val[0] = div_fp64(a[0], b[0]);
    out_val[1] = div_fp64(a[1], b[1]);
}

void vec2_mix_fp64(vec2 x[2], vec2 y[2], float a, out vec2 out_val[2]) {
  vec2 range[2];
  vec2_sub_fp64(y, x, range);
  vec2 portion[2];
  portion[0] = range[0] * a;
  portion[1] = range[1] * a;
  vec2_sum_fp64(x, portion, out_val);
}

vec2 vec2_length_fp64(vec2 x[2]) {
  return sqrt_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])));
}

void vec2_normalize_fp64(vec2 x[2], out vec2 out_val[2]) {
  vec2 length = vec2_length_fp64(x);
  vec2 length_vec2[2];
  length_vec2[0] = length;
  length_vec2[1] = length;

  vec2_div_fp64(x, length_vec2, out_val);
}

vec2 vec2_distance_fp64(vec2 x[2], vec2 y[2]) {
  vec2 diff[2];
  vec2_sub_fp64(x, y, diff);
  return vec2_length_fp64(diff);
}

vec2 vec2_dot_fp64(vec2 a[2], vec2 b[2]) {
  vec2 v[2];

  v[0] = mul_fp64(a[0], b[0]);
  v[1] = mul_fp64(a[1], b[1]);

  return sum_fp64(v[0], v[1]);
}

// vec3 functions
void vec3_sub_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {
  for (int i = 0; i < 3; i++) {
    out_val[i] = sum_fp64(a[i], b[i]);
  }
}

void vec3_sum_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {
  for (int i = 0; i < 3; i++) {
    out_val[i] = sum_fp64(a[i], b[i]);
  }
}

vec2 vec3_length_fp64(vec2 x[3]) {
  return sqrt_fp64(sum_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])),
    mul_fp64(x[2], x[2])));
}

vec2 vec3_distance_fp64(vec2 x[3], vec2 y[3]) {
  vec2 diff[3];
  vec3_sub_fp64(x, y, diff);
  return vec3_length_fp64(diff);
}

// vec4 functions
void vec4_fp64(vec4 a, out vec2 out_val[4]) {
  out_val[0].x = a[0];
  out_val[0].y = 0.0;

  out_val[1].x = a[1];
  out_val[1].y = 0.0;

  out_val[2].x = a[2];
  out_val[2].y = 0.0;

  out_val[3].x = a[3];
  out_val[3].y = 0.0;
}

void vec4_scalar_mul_fp64(vec2 a[4], vec2 b, out vec2 out_val[4]) {
  out_val[0] = mul_fp64(a[0], b);
  out_val[1] = mul_fp64(a[1], b);
  out_val[2] = mul_fp64(a[2], b);
  out_val[3] = mul_fp64(a[3], b);
}

void vec4_sum_fp64(vec2 a[4], vec2 b[4], out vec2 out_val[4]) {
  for (int i = 0; i < 4; i++) {
    out_val[i] = sum_fp64(a[i], b[i]);
  }
}

void vec4_dot_fp64(vec2 a[4], vec2 b[4], out vec2 out_val) {
  vec2 v[4];

  v[0] = mul_fp64(a[0], b[0]);
  v[1] = mul_fp64(a[1], b[1]);
  v[2] = mul_fp64(a[2], b[2]);
  v[3] = mul_fp64(a[3], b[3]);

  out_val = sum_fp64(sum_fp64(v[0], v[1]), sum_fp64(v[2], v[3]));
}

void mat4_vec4_mul_fp64(vec2 b[16], vec2 a[4], out vec2 out_val[4]) {
  vec2 tmp[4];

  for (int i = 0; i < 4; i++)
  {
    for (int j = 0; j < 4; j++)
    {
      tmp[j] = b[j + i * 4];
    }
    vec4_dot_fp64(a, tmp, out_val[i]);
  }
}
`],[`\\
const vec2 E_FP64 = vec2(2.7182817459106445e+00, 8.254840366817007e-08);
const vec2 LOG2_FP64 = vec2(0.6931471824645996e+00, -1.9046542121259336e-09);
const vec2 PI_FP64 = vec2(3.1415927410125732, -8.742278012618954e-8);
const vec2 TWO_PI_FP64 = vec2(6.2831854820251465, -1.7484556025237907e-7);
const vec2 PI_2_FP64 = vec2(1.5707963705062866, -4.371139006309477e-8);
const vec2 PI_4_FP64 = vec2(0.7853981852531433, -2.1855695031547384e-8);
const vec2 PI_16_FP64 = vec2(0.19634954631328583, -5.463923757886846e-9);
const vec2 PI_16_2_FP64 = vec2(0.39269909262657166, -1.0927847515773692e-8);
const vec2 PI_16_3_FP64 = vec2(0.5890486240386963, -1.4906100798128818e-9);
const vec2 PI_180_FP64 = vec2(0.01745329238474369, 1.3519960498364902e-10);

const vec2 SIN_TABLE_0_FP64 = vec2(0.19509032368659973, -1.6704714833615242e-9);
const vec2 SIN_TABLE_1_FP64 = vec2(0.3826834261417389, 6.22335089017767e-9);
const vec2 SIN_TABLE_2_FP64 = vec2(0.5555702447891235, -1.1769521357507529e-8);
const vec2 SIN_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617041793133e-8);

const vec2 COS_TABLE_0_FP64 = vec2(0.9807852506637573, 2.9739473106360492e-8);
const vec2 COS_TABLE_1_FP64 = vec2(0.9238795042037964, 2.8307490351764386e-8);
const vec2 COS_TABLE_2_FP64 = vec2(0.8314695954322815, 1.6870263741530778e-8);
const vec2 COS_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617152815436e-8);

const vec2 INVERSE_FACTORIAL_3_FP64 = vec2(1.666666716337204e-01, -4.967053879312289e-09); // 1/3!
const vec2 INVERSE_FACTORIAL_4_FP64 = vec2(4.16666679084301e-02, -1.2417634698280722e-09); // 1/4!
const vec2 INVERSE_FACTORIAL_5_FP64 = vec2(8.333333767950535e-03, -4.34617203337595e-10); // 1/5!
const vec2 INVERSE_FACTORIAL_6_FP64 = vec2(1.3888889225199819e-03, -3.3631094437103215e-11); // 1/6!
const vec2 INVERSE_FACTORIAL_7_FP64 = vec2(1.9841270113829523e-04,  -2.725596874933456e-12); // 1/7!
const vec2 INVERSE_FACTORIAL_8_FP64 = vec2(2.4801587642286904e-05, -3.406996025904184e-13); // 1/8!
const vec2 INVERSE_FACTORIAL_9_FP64 = vec2(2.75573188446287533e-06, 3.7935713937038186e-14); // 1/9!
const vec2 INVERSE_FACTORIAL_10_FP64 = vec2(2.755731998149713e-07, -7.575112367869873e-15); // 1/10!

float nint(float d) {
    if (d == floor(d)) return d;
    return floor(d + 0.5);
}

vec2 nint_fp64(vec2 a) {
    float hi = nint(a.x);
    float lo;
    vec2 tmp;
    if (hi == a.x) {
        lo = nint(a.y);
        tmp = quickTwoSum(hi, lo);
    } else {
        lo = 0.0;
        if (abs(hi - a.x) == 0.5 && a.y < 0.0) {
            hi -= 1.0;
        }
        tmp = vec2(hi, lo);
    }
    return tmp;
}

/* k_power controls how much range reduction we would like to have
Range reduction uses the following method:
assume a = k_power * r + m * log(2), k and m being integers.
Set k_power = 4 (we can choose other k to trade accuracy with performance.
we only need to calculate exp(r) and using exp(a) = 2^m * exp(r)^k_power;
*/

vec2 exp_fp64(vec2 a) {
  // We need to make sure these two numbers match
  // as bit-wise shift is not available in GLSL 1.0
  const int k_power = 4;
  const float k = 16.0;

  const float inv_k = 1.0 / k;

  if (a.x <= -88.0) return vec2(0.0, 0.0);
  if (a.x >= 88.0) return vec2(1.0 / 0.0, 1.0 / 0.0);
  if (a.x == 0.0 && a.y == 0.0) return vec2(1.0, 0.0);
  if (a.x == 1.0 && a.y == 0.0) return E_FP64;

  float m = floor(a.x / LOG2_FP64.x + 0.5);
  vec2 r = sub_fp64(a, mul_fp64(LOG2_FP64, vec2(m, 0.0))) * inv_k;
  vec2 s, t, p;

  p = mul_fp64(r, r);
  s = sum_fp64(r, p * 0.5);
  p = mul_fp64(p, r);
  t = mul_fp64(p, INVERSE_FACTORIAL_3_FP64);

  s = sum_fp64(s, t);
  p = mul_fp64(p, r);
  t = mul_fp64(p, INVERSE_FACTORIAL_4_FP64);

  s = sum_fp64(s, t);
  p = mul_fp64(p, r);
  t = mul_fp64(p, INVERSE_FACTORIAL_5_FP64);

  // s = sum_fp64(s, t);
  // p = mul_fp64(p, r);
  // t = mul_fp64(p, INVERSE_FACTORIAL_6_FP64);

  // s = sum_fp64(s, t);
  // p = mul_fp64(p, r);
  // t = mul_fp64(p, INVERSE_FACTORIAL_7_FP64);

  s = sum_fp64(s, t);


  // At this point, s = exp(r) - 1; but after following 4 recursions, we will get exp(r) ^ 512 - 1.
  for (int i = 0; i < k_power; i++) {
    s = sum_fp64(s * 2.0, mul_fp64(s, s));
  }

#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
  s = sum_fp64(s, vec2(ONE, 0.0));
#else
  s = sum_fp64(s, vec2(1.0, 0.0));
#endif

  return s * pow(2.0, m);
//   return r;
}

vec2 log_fp64(vec2 a)
{
  if (a.x == 1.0 && a.y == 0.0) return vec2(0.0, 0.0);
  if (a.x <= 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);
  vec2 x = vec2(log(a.x), 0.0);
  vec2 s;
#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
  s = vec2(ONE, 0.0);
#else
  s = vec2(1.0, 0.0);
#endif

  x = sub_fp64(sum_fp64(x, mul_fp64(a, exp_fp64(-x))), s);
  return x;
}

vec2 sin_taylor_fp64(vec2 a) {
  vec2 r, s, t, x;

  if (a.x == 0.0 && a.y == 0.0) {
    return vec2(0.0, 0.0);
  }

  x = -mul_fp64(a, a);
  s = a;
  r = a;

  r = mul_fp64(r, x);
  t = mul_fp64(r, INVERSE_FACTORIAL_3_FP64);
  s = sum_fp64(s, t);

  r = mul_fp64(r, x);
  t = mul_fp64(r, INVERSE_FACTORIAL_5_FP64);
  s = sum_fp64(s, t);

  /* keep the following commented code in case we need them
  for extra accuracy from the Taylor expansion*/

  // r = mul_fp64(r, x);
  // t = mul_fp64(r, INVERSE_FACTORIAL_7_FP64);
  // s = sum_fp64(s, t);

  // r = mul_fp64(r, x);
  // t = mul_fp64(r, INVERSE_FACTORIAL_9_FP64);
  // s = sum_fp64(s, t);

  return s;
}

vec2 cos_taylor_fp64(vec2 a) {
  vec2 r, s, t, x;

  if (a.x == 0.0 && a.y == 0.0) {
    return vec2(1.0, 0.0);
  }

  x = -mul_fp64(a, a);
  r = x;
  s = sum_fp64(vec2(1.0, 0.0), r * 0.5);

  r = mul_fp64(r, x);
  t = mul_fp64(r, INVERSE_FACTORIAL_4_FP64);
  s = sum_fp64(s, t);

  r = mul_fp64(r, x);
  t = mul_fp64(r, INVERSE_FACTORIAL_6_FP64);
  s = sum_fp64(s, t);

  /* keep the following commented code in case we need them
  for extra accuracy from the Taylor expansion*/

  // r = mul_fp64(r, x);
  // t = mul_fp64(r, INVERSE_FACTORIAL_8_FP64);
  // s = sum_fp64(s, t);

  // r = mul_fp64(r, x);
  // t = mul_fp64(r, INVERSE_FACTORIAL_10_FP64);
  // s = sum_fp64(s, t);

  return s;
}

void sincos_taylor_fp64(vec2 a, out vec2 sin_t, out vec2 cos_t) {
  if (a.x == 0.0 && a.y == 0.0) {
    sin_t = vec2(0.0, 0.0);
    cos_t = vec2(1.0, 0.0);
  }

  sin_t = sin_taylor_fp64(a);
  cos_t = sqrt_fp64(sub_fp64(vec2(1.0, 0.0), mul_fp64(sin_t, sin_t)));
}

vec2 sin_fp64(vec2 a) {
    if (a.x == 0.0 && a.y == 0.0) {
        return vec2(0.0, 0.0);
    }

    // 2pi range reduction
    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));
    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));

    vec2 t;
    float q = floor(r.x / PI_2_FP64.x + 0.5);
    int j = int(q);

    if (j < -2 || j > 2) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    }

    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));

    q = floor(t.x / PI_16_FP64.x + 0.5);
    int k = int(q);

    if (k == 0) {
        if (j == 0) {
            return sin_taylor_fp64(t);
        } else if (j == 1) {
            return cos_taylor_fp64(t);
        } else if (j == -1) {
            return -cos_taylor_fp64(t);
        } else {
            return -sin_taylor_fp64(t);
        }
    }

    int abs_k = int(abs(float(k)));

    if (abs_k > 4) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    } else {
        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));
    }

    vec2 u = vec2(0.0, 0.0);
    vec2 v = vec2(0.0, 0.0);

#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
    if (abs(float(abs_k) - 1.0) < 0.5) {
        u = COS_TABLE_0_FP64;
        v = SIN_TABLE_0_FP64;
    } else if (abs(float(abs_k) - 2.0) < 0.5) {
        u = COS_TABLE_1_FP64;
        v = SIN_TABLE_1_FP64;
    } else if (abs(float(abs_k) - 3.0) < 0.5) {
        u = COS_TABLE_2_FP64;
        v = SIN_TABLE_2_FP64;
    } else if (abs(float(abs_k) - 4.0) < 0.5) {
        u = COS_TABLE_3_FP64;
        v = SIN_TABLE_3_FP64;
    }
#else
    if (abs_k == 1) {
        u = COS_TABLE_0_FP64;
        v = SIN_TABLE_0_FP64;
    } else if (abs_k == 2) {
        u = COS_TABLE_1_FP64;
        v = SIN_TABLE_1_FP64;
    } else if (abs_k == 3) {
        u = COS_TABLE_2_FP64;
        v = SIN_TABLE_2_FP64;
    } else if (abs_k == 4) {
        u = COS_TABLE_3_FP64;
        v = SIN_TABLE_3_FP64;
    }
#endif

    vec2 sin_t, cos_t;
    sincos_taylor_fp64(t, sin_t, cos_t);



    vec2 result = vec2(0.0, 0.0);
    if (j == 0) {
        if (k > 0) {
            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        } else {
            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        }
    } else if (j == 1) {
        if (k > 0) {
            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        } else {
            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        }
    } else if (j == -1) {
        if (k > 0) {
            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));
        } else {
            result = -sum_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));
        }
    } else {
        if (k > 0) {
            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        } else {
            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));
        }
    }

    return result;
}

vec2 cos_fp64(vec2 a) {
    if (a.x == 0.0 && a.y == 0.0) {
        return vec2(1.0, 0.0);
    }

    // 2pi range reduction
    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));
    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));

    vec2 t;
    float q = floor(r.x / PI_2_FP64.x + 0.5);
    int j = int(q);

    if (j < -2 || j > 2) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    }

    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));

    q = floor(t.x / PI_16_FP64.x + 0.5);
    int k = int(q);

    if (k == 0) {
        if (j == 0) {
            return cos_taylor_fp64(t);
        } else if (j == 1) {
            return -sin_taylor_fp64(t);
        } else if (j == -1) {
            return sin_taylor_fp64(t);
        } else {
            return -cos_taylor_fp64(t);
        }
    }

    int abs_k = int(abs(float(k)));

    if (abs_k > 4) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    } else {
        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));
    }

    vec2 u = vec2(0.0, 0.0);
    vec2 v = vec2(0.0, 0.0);

#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
    if (abs(float(abs_k) - 1.0) < 0.5) {
        u = COS_TABLE_0_FP64;
        v = SIN_TABLE_0_FP64;
    } else if (abs(float(abs_k) - 2.0) < 0.5) {
        u = COS_TABLE_1_FP64;
        v = SIN_TABLE_1_FP64;
    } else if (abs(float(abs_k) - 3.0) < 0.5) {
        u = COS_TABLE_2_FP64;
        v = SIN_TABLE_2_FP64;
    } else if (abs(float(abs_k) - 4.0) < 0.5) {
        u = COS_TABLE_3_FP64;
        v = SIN_TABLE_3_FP64;
    }
#else
    if (abs_k == 1) {
        u = COS_TABLE_0_FP64;
        v = SIN_TABLE_0_FP64;
    } else if (abs_k == 2) {
        u = COS_TABLE_1_FP64;
        v = SIN_TABLE_1_FP64;
    } else if (abs_k == 3) {
        u = COS_TABLE_2_FP64;
        v = SIN_TABLE_2_FP64;
    } else if (abs_k == 4) {
        u = COS_TABLE_3_FP64;
        v = SIN_TABLE_3_FP64;
    }
#endif

    vec2 sin_t, cos_t;
    sincos_taylor_fp64(t, sin_t, cos_t);

    vec2 result = vec2(0.0, 0.0);
    if (j == 0) {
        if (k > 0) {
            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        } else {
            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        }
    } else if (j == 1) {
        if (k > 0) {
            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        } else {
            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));
        }
    } else if (j == -1) {
        if (k > 0) {
            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        } else {
            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
        }
    } else {
        if (k > 0) {
            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));
        } else {
            result = -sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        }
    }

    return result;
}

vec2 tan_fp64(vec2 a) {
    vec2 sin_a;
    vec2 cos_a;

    if (a.x == 0.0 && a.y == 0.0) {
        return vec2(0.0, 0.0);
    }

    // 2pi range reduction
    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));
    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));

    vec2 t;
    float q = floor(r.x / PI_2_FP64.x + 0.5);
    int j = int(q);


    if (j < -2 || j > 2) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    }

    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));

    q = floor(t.x / PI_16_FP64.x + 0.5);
    int k = int(q);
    int abs_k = int(abs(float(k)));

    // We just can't get PI/16 * 3.0 very accurately.
    // so let's just store it
    if (abs_k > 4) {
        return vec2(0.0 / 0.0, 0.0 / 0.0);
    } else {
        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));
    }


    vec2 u = vec2(0.0, 0.0);
    vec2 v = vec2(0.0, 0.0);

    vec2 sin_t, cos_t;
    vec2 s, c;
    sincos_taylor_fp64(t, sin_t, cos_t);

    if (k == 0) {
        s = sin_t;
        c = cos_t;
    } else {
#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)
        if (abs(float(abs_k) - 1.0) < 0.5) {
            u = COS_TABLE_0_FP64;
            v = SIN_TABLE_0_FP64;
        } else if (abs(float(abs_k) - 2.0) < 0.5) {
            u = COS_TABLE_1_FP64;
            v = SIN_TABLE_1_FP64;
        } else if (abs(float(abs_k) - 3.0) < 0.5) {
            u = COS_TABLE_2_FP64;
            v = SIN_TABLE_2_FP64;
        } else if (abs(float(abs_k) - 4.0) < 0.5) {
            u = COS_TABLE_3_FP64;
            v = SIN_TABLE_3_FP64;
        }
#else
        if (abs_k == 1) {
            u = COS_TABLE_0_FP64;
            v = SIN_TABLE_0_FP64;
        } else if (abs_k == 2) {
            u = COS_TABLE_1_FP64;
            v = SIN_TABLE_1_FP64;
        } else if (abs_k == 3) {
            u = COS_TABLE_2_FP64;
            v = SIN_TABLE_2_FP64;
        } else if (abs_k == 4) {
            u = COS_TABLE_3_FP64;
            v = SIN_TABLE_3_FP64;
        }
#endif
        if (k > 0) {
            s = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
            c = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        } else {
            s = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));
            c = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));
        }
    }

    if (j == 0) {
        sin_a = s;
        cos_a = c;
    } else if (j == 1) {
        sin_a = c;
        cos_a = -s;
    } else if (j == -1) {
        sin_a = -c;
        cos_a = s;
    } else {
        sin_a = -s;
        cos_a = -c;
    }
    return div_fp64(sin_a, cos_a);
}

vec2 radians_fp64(vec2 degree) {
  return mul_fp64(degree, PI_180_FP64);
}

vec2 mix_fp64(vec2 a, vec2 b, float x) {
  vec2 range = sub_fp64(b, a);
  return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));
}

// Vector functions
// vec2 functions
void vec2_sum_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
    out_val[0] = sum_fp64(a[0], b[0]);
    out_val[1] = sum_fp64(a[1], b[1]);
}

void vec2_sub_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
    out_val[0] = sub_fp64(a[0], b[0]);
    out_val[1] = sub_fp64(a[1], b[1]);
}

void vec2_mul_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
    out_val[0] = mul_fp64(a[0], b[0]);
    out_val[1] = mul_fp64(a[1], b[1]);
}

void vec2_div_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {
    out_val[0] = div_fp64(a[0], b[0]);
    out_val[1] = div_fp64(a[1], b[1]);
}

void vec2_mix_fp64(vec2 x[2], vec2 y[2], float a, out vec2 out_val[2]) {
  vec2 range[2];
  vec2_sub_fp64(y, x, range);
  vec2 portion[2];
  portion[0] = range[0] * a;
  portion[1] = range[1] * a;
  vec2_sum_fp64(x, portion, out_val);
}

vec2 vec2_length_fp64(vec2 x[2]) {
  return sqrt_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])));
}

void vec2_normalize_fp64(vec2 x[2], out vec2 out_val[2]) {
  vec2 length = vec2_length_fp64(x);
  vec2 length_vec2[2];
  length_vec2[0] = length;
  length_vec2[1] = length;

  vec2_div_fp64(x, length_vec2, out_val);
}

vec2 vec2_distance_fp64(vec2 x[2], vec2 y[2]) {
  vec2 diff[2];
  vec2_sub_fp64(x, y, diff);
  return vec2_length_fp64(diff);
}

vec2 vec2_dot_fp64(vec2 a[2], vec2 b[2]) {
  vec2 v[2];

  v[0] = mul_fp64(a[0], b[0]);
  v[1] = mul_fp64(a[1], b[1]);

  return sum_fp64(v[0], v[1]);
}

// vec3 functions
void vec3_sub_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {
  for (int i = 0; i < 3; i++) {
    out_val[i] = sum_fp64(a[i], b[i]);
  }
}

void vec3_sum_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {
  for (int i = 0; i < 3; i++) {
    out_val[i] = sum_fp64(a[i], b[i]);
  }
}

vec2 vec3_length_fp64(vec2 x[3]) {
  return sqrt_fp64(sum_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])),
    mul_fp64(x[2], x[2])));
}

vec2 vec3_distance_fp64(vec2 x[3], vec2 y[3]) {
  vec2 diff[3];
  vec3_sub_fp64(x, y, diff);
  return vec3_length_fp64(diff);
}

// vec4 functions
void vec4_fp64(vec4 a, out vec2 out_val[4]) {
  out_val[0].x = a[0];
  out_val[0].y = 0.0;

  out_val[1].x = a[1];
  out_val[1].y = 0.0;

  out_val[2].x = a[2];
  out_val[2].y = 0.0;

  out_val[3].x = a[3];
  out_val[3].y = 0.0;
}

void vec4_scalar_mul_fp64(vec2 a[4], vec2 b, out vec2 out_val[4]) {
  out_val[0] = mul_fp64(a[0], b);
  out_val[1] = mul_fp64(a[1], b);
  out_val[2] = mul_fp64(a[2], b);
  out_val[3] = mul_fp64(a[3], b);
}

void vec4_sum_fp64(vec2 a[4], vec2 b[4], out vec2 out_val[4]) {
  for (int i = 0; i < 4; i++) {
    out_val[i] = sum_fp64(a[i], b[i]);
  }
}

void vec4_dot_fp64(vec2 a[4], vec2 b[4], out vec2 out_val) {
  vec2 v[4];

  v[0] = mul_fp64(a[0], b[0]);
  v[1] = mul_fp64(a[1], b[1]);
  v[2] = mul_fp64(a[2], b[2]);
  v[3] = mul_fp64(a[3], b[3]);

  out_val = sum_fp64(sum_fp64(v[0], v[1]), sum_fp64(v[2], v[3]));
}

void mat4_vec4_mul_fp64(vec2 b[16], vec2 a[4], out vec2 out_val[4]) {
  vec2 tmp[4];

  for (int i = 0; i < 4; i++)
  {
    for (int j = 0; j < 4; j++)
    {
      tmp[j] = b[j + i * 4];
    }
    vec4_dot_fp64(a, tmp, out_val[i]);
  }
}
`])));var ac={ONE:1};function sc(){return ac}var wn={name:"fp64-arithmetic",vs:zi,getUniforms:sc,fp64ify:Ye,fp64LowPart:Pn,fp64ifyMatrix4:En},Gi={name:"fp64",vs:ji,dependencies:[wn],fp64ify:Ye,fp64LowPart:Pn,fp64ifyMatrix4:En};var Hi,Vi;function Xi(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var lc=v(Hi||(Hi=Xi([`varying vec4 geometry_vPosition;
varying vec3 geometry_vNormal;

void geometry_setNormal(vec3 normal) {
  geometry_vNormal = normal;
}

void geometry_setPosition(vec4 position) {
  geometry_vPosition = position;
}

void geometry_setPosition(vec3 position) {
  geometry_vPosition = vec4(position, 1.);
}
`],[`\\
varying vec4 geometry_vPosition;
varying vec3 geometry_vNormal;

void geometry_setNormal(vec3 normal) {
  geometry_vNormal = normal;
}

void geometry_setPosition(vec4 position) {
  geometry_vPosition = position;
}

void geometry_setPosition(vec3 position) {
  geometry_vPosition = vec4(position, 1.);
}
`]))),cc=v(Vi||(Vi=Xi([`varying vec4 geometry_vPosition;
varying vec3 geometry_vNormal;

vec4 geometry_getPosition() {
  return geometry_vPosition;
}

vec3 geometry_getNormal() {
  return geometry_vNormal;
}
`],[`\\
varying vec4 geometry_vPosition;
varying vec3 geometry_vNormal;

vec4 geometry_getPosition() {
  return geometry_vPosition;
}

vec3 geometry_getNormal() {
  return geometry_vNormal;
}
`]))),Wi={name:"geometry",vs:lc,fs:cc};var x_=1/Math.PI*180,y_=1/180*Math.PI,fc={EPSILON:1e-12,debug:!1,precision:4,printTypes:!1,printDegrees:!1,printRowMajor:!0,_cartographicRadians:!1};globalThis.mathgl=globalThis.mathgl||{config:{...fc}};var G=globalThis.mathgl.config;function qi(e,{precision:n=G.precision}={}){return e=uc(e),"".concat(parseFloat(e.toPrecision(n)))}function Qe(e){return Array.isArray(e)||ArrayBuffer.isView(e)&&!(e instanceof DataView)}function In(e,n,t){let r=G.EPSILON;t&&(G.EPSILON=t);try{if(e===n)return!0;if(Qe(e)&&Qe(n)){if(e.length!==n.length)return!1;for(let i=0;i<e.length;++i)if(!In(e[i],n[i]))return!1;return!0}return e&&e.equals?e.equals(n):n&&n.equals?n.equals(e):typeof e=="number"&&typeof n=="number"?Math.abs(e-n)<=G.EPSILON*Math.max(1,Math.abs(e),Math.abs(n)):!1}finally{G.EPSILON=r}}function uc(e){return Math.round(e/G.EPSILON)*G.EPSILON}function _c(e){function n(){var t=Reflect.construct(e,Array.from(arguments));return Object.setPrototypeOf(t,Object.getPrototypeOf(this)),t}return n.prototype=Object.create(e.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf?Object.setPrototypeOf(n,e):n.__proto__=e,n}var Ke=class extends _c(Array){clone(){return new this.constructor().copy(this)}fromArray(n,t=0){for(let r=0;r<this.ELEMENTS;++r)this[r]=n[r+t];return this.check()}toArray(n=[],t=0){for(let r=0;r<this.ELEMENTS;++r)n[t+r]=this[r];return n}toObject(n){return n}from(n){return Array.isArray(n)?this.copy(n):this.fromObject(n)}to(n){return n===this?this:Qe(n)?this.toArray(n):this.toObject(n)}toTarget(n){return n?this.to(n):this}toFloat32Array(){return new Float32Array(this)}toString(){return this.formatString(G)}formatString(n){let t="";for(let r=0;r<this.ELEMENTS;++r)t+=(r>0?", ":"")+qi(this[r],n);return"".concat(n.printTypes?this.constructor.name:"","[").concat(t,"]")}equals(n){if(!n||this.length!==n.length)return!1;for(let t=0;t<this.ELEMENTS;++t)if(!In(this[t],n[t]))return!1;return!0}exactEquals(n){if(!n||this.length!==n.length)return!1;for(let t=0;t<this.ELEMENTS;++t)if(this[t]!==n[t])return!1;return!0}negate(){for(let n=0;n<this.ELEMENTS;++n)this[n]=-this[n];return this.check()}lerp(n,t,r){if(r===void 0)return this.lerp(this,n,t);for(let i=0;i<this.ELEMENTS;++i){let o=n[i],a=typeof t=="number"?t:t[i];this[i]=o+r*(a-o)}return this.check()}min(n){for(let t=0;t<this.ELEMENTS;++t)this[t]=Math.min(n[t],this[t]);return this.check()}max(n){for(let t=0;t<this.ELEMENTS;++t)this[t]=Math.max(n[t],this[t]);return this.check()}clamp(n,t){for(let r=0;r<this.ELEMENTS;++r)this[r]=Math.min(Math.max(this[r],n[r]),t[r]);return this.check()}add(...n){for(let t of n)for(let r=0;r<this.ELEMENTS;++r)this[r]+=t[r];return this.check()}subtract(...n){for(let t of n)for(let r=0;r<this.ELEMENTS;++r)this[r]-=t[r];return this.check()}scale(n){if(typeof n=="number")for(let t=0;t<this.ELEMENTS;++t)this[t]*=n;else for(let t=0;t<this.ELEMENTS&&t<n.length;++t)this[t]*=n[t];return this.check()}multiplyByScalar(n){for(let t=0;t<this.ELEMENTS;++t)this[t]*=n;return this.check()}check(){if(G.debug&&!this.validate())throw new Error("math.gl: ".concat(this.constructor.name," some fields set to invalid numbers'"));return this}validate(){let n=this.length===this.ELEMENTS;for(let t=0;t<this.ELEMENTS;++t)n=n&&Number.isFinite(this[t]);return n}sub(n){return this.subtract(n)}setScalar(n){for(let t=0;t<this.ELEMENTS;++t)this[t]=n;return this.check()}addScalar(n){for(let t=0;t<this.ELEMENTS;++t)this[t]+=n;return this.check()}subScalar(n){return this.addScalar(-n)}multiplyScalar(n){for(let t=0;t<this.ELEMENTS;++t)this[t]*=n;return this.check()}divideScalar(n){return this.multiplyByScalar(1/n)}clampScalar(n,t){for(let r=0;r<this.ELEMENTS;++r)this[r]=Math.min(Math.max(this[r],n),t);return this.check()}get elements(){return this}};function pc(e,n){if(e.length!==n)return!1;for(let t=0;t<e.length;++t)if(!Number.isFinite(e[t]))return!1;return!0}function Yi(e){if(!Number.isFinite(e))throw new Error("Invalid number ".concat(JSON.stringify(e)));return e}function $e(e,n,t=""){if(G.debug&&!pc(e,n))throw new Error("math.gl: ".concat(t," some fields set to invalid numbers'"));return e}var J=typeof Float32Array<"u"?Float32Array:Array;var w_=Math.PI/180;function dc(){let e=new J(2);return J!=Float32Array&&(e[0]=0,e[1]=0),e}function $i(e,n,t){let r=n[0],i=n[1];return e[0]=t[0]*r+t[4]*i+t[12],e[1]=t[1]*r+t[5]*i+t[13],e}var I_=function(){let e=dc();return function(n,t,r,i,o,a){let s,l;for(t||(t=2),r||(r=0),i?l=Math.min(i*t+r,n.length):l=n.length,s=r;s<l;s+=t)e[0]=n[s],e[1]=n[s+1],o(e,e,a),n[s]=e[0],n[s+1]=e[1];return n}}();function Zi(e,n,t){let r=n[0],i=n[1],o=t[3]*r+t[7]*i||1;return e[0]=(t[0]*r+t[4]*i)/o,e[1]=(t[1]*r+t[5]*i)/o,e}function Ji(e,n,t){let r=n[0],i=n[1],o=n[2],a=t[3]*r+t[7]*i+t[11]*o||1;return e[0]=(t[0]*r+t[4]*i+t[8]*o)/a,e[1]=(t[1]*r+t[5]*i+t[9]*o)/a,e[2]=(t[2]*r+t[6]*i+t[10]*o)/a,e}function hc(){let e=new J(3);return J!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function eo(e,n,t){let r=n[0],i=n[1],o=n[2],a=t[3]*r+t[7]*i+t[11]*o+t[15];return a=a||1,e[0]=(t[0]*r+t[4]*i+t[8]*o+t[12])/a,e[1]=(t[1]*r+t[5]*i+t[9]*o+t[13])/a,e[2]=(t[2]*r+t[6]*i+t[10]*o+t[14])/a,e}var O_=function(){let e=hc();return function(n,t,r,i,o,a){let s,l;for(t||(t=3),r||(r=0),i?l=Math.min(i*t+r,n.length):l=n.length,s=r;s<l;s+=t)e[0]=n[s],e[1]=n[s+1],e[2]=n[s+2],o(e,e,a),n[s]=e[0],n[s+1]=e[1],n[s+2]=e[2];return n}}();var Ze=class extends Ke{toString(){let n="[";if(G.printRowMajor){n+="row-major:";for(let t=0;t<this.RANK;++t)for(let r=0;r<this.RANK;++r)n+=" ".concat(this[r*this.RANK+t])}else{n+="column-major:";for(let t=0;t<this.ELEMENTS;++t)n+=" ".concat(this[t])}return n+="]",n}getElementIndex(n,t){return t*this.RANK+n}getElement(n,t){return this[t*this.RANK+n]}setElement(n,t,r){return this[t*this.RANK+n]=Yi(r),this}getColumn(n,t=new Array(this.RANK).fill(-0)){let r=n*this.RANK;for(let i=0;i<this.RANK;++i)t[i]=this[r+i];return t}setColumn(n,t){let r=n*this.RANK;for(let i=0;i<this.RANK;++i)this[r+i]=t[i];return this}};function mc(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function no(e,n){if(e===n){let t=n[1],r=n[2],i=n[3],o=n[6],a=n[7],s=n[11];e[1]=n[4],e[2]=n[8],e[3]=n[12],e[4]=t,e[6]=n[9],e[7]=n[13],e[8]=r,e[9]=o,e[11]=n[14],e[12]=i,e[13]=a,e[14]=s}else e[0]=n[0],e[1]=n[4],e[2]=n[8],e[3]=n[12],e[4]=n[1],e[5]=n[5],e[6]=n[9],e[7]=n[13],e[8]=n[2],e[9]=n[6],e[10]=n[10],e[11]=n[14],e[12]=n[3],e[13]=n[7],e[14]=n[11],e[15]=n[15];return e}function to(e,n){let t=n[0],r=n[1],i=n[2],o=n[3],a=n[4],s=n[5],l=n[6],f=n[7],p=n[8],d=n[9],h=n[10],g=n[11],b=n[12],A=n[13],L=n[14],E=n[15],T=t*s-r*a,w=t*l-i*a,I=t*f-o*a,S=r*l-i*s,P=r*f-o*s,F=i*f-o*l,k=p*A-d*b,D=p*L-h*b,M=p*E-g*b,R=d*L-h*A,U=d*E-g*A,B=h*E-g*L,C=T*B-w*U+I*R+S*M-P*D+F*k;return C?(C=1/C,e[0]=(s*B-l*U+f*R)*C,e[1]=(i*U-r*B-o*R)*C,e[2]=(A*F-L*P+E*S)*C,e[3]=(h*P-d*F-g*S)*C,e[4]=(l*M-a*B-f*D)*C,e[5]=(t*B-i*M+o*D)*C,e[6]=(L*I-b*F-E*w)*C,e[7]=(p*F-h*I+g*w)*C,e[8]=(a*U-s*M+f*k)*C,e[9]=(r*M-t*U-o*k)*C,e[10]=(b*P-A*I+E*T)*C,e[11]=(d*I-p*P-g*T)*C,e[12]=(s*D-a*R-l*k)*C,e[13]=(t*R-r*D+i*k)*C,e[14]=(A*w-b*S-L*T)*C,e[15]=(p*S-d*w+h*T)*C,e):null}function ro(e){let n=e[0],t=e[1],r=e[2],i=e[3],o=e[4],a=e[5],s=e[6],l=e[7],f=e[8],p=e[9],d=e[10],h=e[11],g=e[12],b=e[13],A=e[14],L=e[15],E=n*a-t*o,T=n*s-r*o,w=t*s-r*a,I=f*b-p*g,S=f*A-d*g,P=p*A-d*b,F=n*P-t*S+r*I,k=o*P-a*S+s*I,D=f*w-p*T+d*E,M=g*w-b*T+A*E;return l*F-i*k+L*D-h*M}function Nn(e,n,t){let r=n[0],i=n[1],o=n[2],a=n[3],s=n[4],l=n[5],f=n[6],p=n[7],d=n[8],h=n[9],g=n[10],b=n[11],A=n[12],L=n[13],E=n[14],T=n[15],w=t[0],I=t[1],S=t[2],P=t[3];return e[0]=w*r+I*s+S*d+P*A,e[1]=w*i+I*l+S*h+P*L,e[2]=w*o+I*f+S*g+P*E,e[3]=w*a+I*p+S*b+P*T,w=t[4],I=t[5],S=t[6],P=t[7],e[4]=w*r+I*s+S*d+P*A,e[5]=w*i+I*l+S*h+P*L,e[6]=w*o+I*f+S*g+P*E,e[7]=w*a+I*p+S*b+P*T,w=t[8],I=t[9],S=t[10],P=t[11],e[8]=w*r+I*s+S*d+P*A,e[9]=w*i+I*l+S*h+P*L,e[10]=w*o+I*f+S*g+P*E,e[11]=w*a+I*p+S*b+P*T,w=t[12],I=t[13],S=t[14],P=t[15],e[12]=w*r+I*s+S*d+P*A,e[13]=w*i+I*l+S*h+P*L,e[14]=w*o+I*f+S*g+P*E,e[15]=w*a+I*p+S*b+P*T,e}function io(e,n,t){let r=t[0],i=t[1],o=t[2],a,s,l,f,p,d,h,g,b,A,L,E;return n===e?(e[12]=n[0]*r+n[4]*i+n[8]*o+n[12],e[13]=n[1]*r+n[5]*i+n[9]*o+n[13],e[14]=n[2]*r+n[6]*i+n[10]*o+n[14],e[15]=n[3]*r+n[7]*i+n[11]*o+n[15]):(a=n[0],s=n[1],l=n[2],f=n[3],p=n[4],d=n[5],h=n[6],g=n[7],b=n[8],A=n[9],L=n[10],E=n[11],e[0]=a,e[1]=s,e[2]=l,e[3]=f,e[4]=p,e[5]=d,e[6]=h,e[7]=g,e[8]=b,e[9]=A,e[10]=L,e[11]=E,e[12]=a*r+p*i+b*o+n[12],e[13]=s*r+d*i+A*o+n[13],e[14]=l*r+h*i+L*o+n[14],e[15]=f*r+g*i+E*o+n[15]),e}function oo(e,n,t){let r=t[0],i=t[1],o=t[2];return e[0]=n[0]*r,e[1]=n[1]*r,e[2]=n[2]*r,e[3]=n[3]*r,e[4]=n[4]*i,e[5]=n[5]*i,e[6]=n[6]*i,e[7]=n[7]*i,e[8]=n[8]*o,e[9]=n[9]*o,e[10]=n[10]*o,e[11]=n[11]*o,e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],e}function ao(e,n,t,r){let i=r[0],o=r[1],a=r[2],s=Math.sqrt(i*i+o*o+a*a),l,f,p,d,h,g,b,A,L,E,T,w,I,S,P,F,k,D,M,R,U,B,C,X;return s<1e-6?null:(s=1/s,i*=s,o*=s,a*=s,f=Math.sin(t),l=Math.cos(t),p=1-l,d=n[0],h=n[1],g=n[2],b=n[3],A=n[4],L=n[5],E=n[6],T=n[7],w=n[8],I=n[9],S=n[10],P=n[11],F=i*i*p+l,k=o*i*p+a*f,D=a*i*p-o*f,M=i*o*p-a*f,R=o*o*p+l,U=a*o*p+i*f,B=i*a*p+o*f,C=o*a*p-i*f,X=a*a*p+l,e[0]=d*F+A*k+w*D,e[1]=h*F+L*k+I*D,e[2]=g*F+E*k+S*D,e[3]=b*F+T*k+P*D,e[4]=d*M+A*R+w*U,e[5]=h*M+L*R+I*U,e[6]=g*M+E*R+S*U,e[7]=b*M+T*R+P*U,e[8]=d*B+A*C+w*X,e[9]=h*B+L*C+I*X,e[10]=g*B+E*C+S*X,e[11]=b*B+T*C+P*X,n!==e&&(e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15]),e)}function so(e,n,t){let r=Math.sin(t),i=Math.cos(t),o=n[4],a=n[5],s=n[6],l=n[7],f=n[8],p=n[9],d=n[10],h=n[11];return n!==e&&(e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15]),e[4]=o*i+f*r,e[5]=a*i+p*r,e[6]=s*i+d*r,e[7]=l*i+h*r,e[8]=f*i-o*r,e[9]=p*i-a*r,e[10]=d*i-s*r,e[11]=h*i-l*r,e}function lo(e,n,t){let r=Math.sin(t),i=Math.cos(t),o=n[0],a=n[1],s=n[2],l=n[3],f=n[8],p=n[9],d=n[10],h=n[11];return n!==e&&(e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15]),e[0]=o*i-f*r,e[1]=a*i-p*r,e[2]=s*i-d*r,e[3]=l*i-h*r,e[8]=o*r+f*i,e[9]=a*r+p*i,e[10]=s*r+d*i,e[11]=l*r+h*i,e}function co(e,n,t){let r=Math.sin(t),i=Math.cos(t),o=n[0],a=n[1],s=n[2],l=n[3],f=n[4],p=n[5],d=n[6],h=n[7];return n!==e&&(e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15]),e[0]=o*i+f*r,e[1]=a*i+p*r,e[2]=s*i+d*r,e[3]=l*i+h*r,e[4]=f*i-o*r,e[5]=p*i-a*r,e[6]=d*i-s*r,e[7]=h*i-l*r,e}function fo(e,n){let t=n[0],r=n[1],i=n[2],o=n[3],a=t+t,s=r+r,l=i+i,f=t*a,p=r*a,d=r*s,h=i*a,g=i*s,b=i*l,A=o*a,L=o*s,E=o*l;return e[0]=1-d-b,e[1]=p+E,e[2]=h-L,e[3]=0,e[4]=p-E,e[5]=1-f-b,e[6]=g+A,e[7]=0,e[8]=h+L,e[9]=g-A,e[10]=1-f-d,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function uo(e,n,t,r,i,o,a){let s=1/(t-n),l=1/(i-r),f=1/(o-a);return e[0]=o*2*s,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=o*2*l,e[6]=0,e[7]=0,e[8]=(t+n)*s,e[9]=(i+r)*l,e[10]=(a+o)*f,e[11]=-1,e[12]=0,e[13]=0,e[14]=a*o*2*f,e[15]=0,e}function gc(e,n,t,r,i){let o=1/Math.tan(n/2);if(e[0]=o/t,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=o,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,i!=null&&i!==1/0){let a=1/(r-i);e[10]=(i+r)*a,e[14]=2*i*r*a}else e[10]=-1,e[14]=-2*r;return e}var _o=gc;function vc(e,n,t,r,i,o,a){let s=1/(n-t),l=1/(r-i),f=1/(o-a);return e[0]=-2*s,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*l,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*f,e[11]=0,e[12]=(n+t)*s,e[13]=(i+r)*l,e[14]=(a+o)*f,e[15]=1,e}var po=vc;function ho(e,n,t,r){let i,o,a,s,l,f,p,d,h,g,b=n[0],A=n[1],L=n[2],E=r[0],T=r[1],w=r[2],I=t[0],S=t[1],P=t[2];return Math.abs(b-I)<1e-6&&Math.abs(A-S)<1e-6&&Math.abs(L-P)<1e-6?mc(e):(d=b-I,h=A-S,g=L-P,i=1/Math.sqrt(d*d+h*h+g*g),d*=i,h*=i,g*=i,o=T*g-w*h,a=w*d-E*g,s=E*h-T*d,i=Math.sqrt(o*o+a*a+s*s),i?(i=1/i,o*=i,a*=i,s*=i):(o=0,a=0,s=0),l=h*s-g*a,f=g*o-d*s,p=d*a-h*o,i=Math.sqrt(l*l+f*f+p*p),i?(i=1/i,l*=i,f*=i,p*=i):(l=0,f=0,p=0),e[0]=o,e[1]=l,e[2]=d,e[3]=0,e[4]=a,e[5]=f,e[6]=h,e[7]=0,e[8]=s,e[9]=p,e[10]=g,e[11]=0,e[12]=-(o*b+a*A+s*L),e[13]=-(l*b+f*A+p*L),e[14]=-(d*b+h*A+g*L),e[15]=1,e)}function bc(){let e=new J(4);return J!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0,e[3]=0),e}function mo(e,n,t){let r=n[0],i=n[1],o=n[2],a=n[3];return e[0]=t[0]*r+t[4]*i+t[8]*o+t[12]*a,e[1]=t[1]*r+t[5]*i+t[9]*o+t[13]*a,e[2]=t[2]*r+t[6]*i+t[10]*o+t[14]*a,e[3]=t[3]*r+t[7]*i+t[11]*o+t[15]*a,e}var D_=function(){let e=bc();return function(n,t,r,i,o,a){let s,l;for(t||(t=4),r||(r=0),i?l=Math.min(i*t+r,n.length):l=n.length,s=r;s<l;s+=t)e[0]=n[s],e[1]=n[s+1],e[2]=n[s+2],e[3]=n[s+3],o(e,e,a),n[s]=e[0],n[s+1]=e[1],n[s+2]=e[2],n[s+3]=e[3];return n}}();var Fn;(function(e){e[e.COL0ROW0=0]="COL0ROW0",e[e.COL0ROW1=1]="COL0ROW1",e[e.COL0ROW2=2]="COL0ROW2",e[e.COL0ROW3=3]="COL0ROW3",e[e.COL1ROW0=4]="COL1ROW0",e[e.COL1ROW1=5]="COL1ROW1",e[e.COL1ROW2=6]="COL1ROW2",e[e.COL1ROW3=7]="COL1ROW3",e[e.COL2ROW0=8]="COL2ROW0",e[e.COL2ROW1=9]="COL2ROW1",e[e.COL2ROW2=10]="COL2ROW2",e[e.COL2ROW3=11]="COL2ROW3",e[e.COL3ROW0=12]="COL3ROW0",e[e.COL3ROW1=13]="COL3ROW1",e[e.COL3ROW2=14]="COL3ROW2",e[e.COL3ROW3=15]="COL3ROW3"})(Fn||(Fn={}));var xc=45*Math.PI/180,yc=1,On=.1,Cn=500,Ac=Object.freeze([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),ce=class extends Ze{static get IDENTITY(){return Lc()}static get ZERO(){return Sc()}get ELEMENTS(){return 16}get RANK(){return 4}get INDICES(){return Fn}constructor(n){super(-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0),arguments.length===1&&Array.isArray(n)?this.copy(n):this.identity()}copy(n){return this[0]=n[0],this[1]=n[1],this[2]=n[2],this[3]=n[3],this[4]=n[4],this[5]=n[5],this[6]=n[6],this[7]=n[7],this[8]=n[8],this[9]=n[9],this[10]=n[10],this[11]=n[11],this[12]=n[12],this[13]=n[13],this[14]=n[14],this[15]=n[15],this.check()}set(n,t,r,i,o,a,s,l,f,p,d,h,g,b,A,L){return this[0]=n,this[1]=t,this[2]=r,this[3]=i,this[4]=o,this[5]=a,this[6]=s,this[7]=l,this[8]=f,this[9]=p,this[10]=d,this[11]=h,this[12]=g,this[13]=b,this[14]=A,this[15]=L,this.check()}setRowMajor(n,t,r,i,o,a,s,l,f,p,d,h,g,b,A,L){return this[0]=n,this[1]=o,this[2]=f,this[3]=g,this[4]=t,this[5]=a,this[6]=p,this[7]=b,this[8]=r,this[9]=s,this[10]=d,this[11]=A,this[12]=i,this[13]=l,this[14]=h,this[15]=L,this.check()}toRowMajor(n){return n[0]=this[0],n[1]=this[4],n[2]=this[8],n[3]=this[12],n[4]=this[1],n[5]=this[5],n[6]=this[9],n[7]=this[13],n[8]=this[2],n[9]=this[6],n[10]=this[10],n[11]=this[14],n[12]=this[3],n[13]=this[7],n[14]=this[11],n[15]=this[15],n}identity(){return this.copy(Ac)}fromObject(n){return this.check()}fromQuaternion(n){return fo(this,n),this.check()}frustum(n){let{left:t,right:r,bottom:i,top:o,near:a=On,far:s=Cn}=n;return s===1/0?Pc(this,t,r,i,o,a):uo(this,t,r,i,o,a,s),this.check()}lookAt(n){let{eye:t,center:r=[0,0,0],up:i=[0,1,0]}=n;return ho(this,t,r,i),this.check()}ortho(n){let{left:t,right:r,bottom:i,top:o,near:a=On,far:s=Cn}=n;return po(this,t,r,i,o,a,s),this.check()}orthographic(n){let{fovy:t=xc,aspect:r=yc,focalDistance:i=1,near:o=On,far:a=Cn}=n;go(t);let s=t/2,l=i*Math.tan(s),f=l*r;return this.ortho({left:-f,right:f,bottom:-l,top:l,near:o,far:a})}perspective(n){let{fovy:t=45*Math.PI/180,aspect:r=1,near:i=.1,far:o=500}=n;return go(t),_o(this,t,r,i,o),this.check()}determinant(){return ro(this)}getScale(n=[-0,-0,-0]){return n[0]=Math.sqrt(this[0]*this[0]+this[1]*this[1]+this[2]*this[2]),n[1]=Math.sqrt(this[4]*this[4]+this[5]*this[5]+this[6]*this[6]),n[2]=Math.sqrt(this[8]*this[8]+this[9]*this[9]+this[10]*this[10]),n}getTranslation(n=[-0,-0,-0]){return n[0]=this[12],n[1]=this[13],n[2]=this[14],n}getRotation(n,t){n=n||[-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0,-0],t=t||[-0,-0,-0];let r=this.getScale(t),i=1/r[0],o=1/r[1],a=1/r[2];return n[0]=this[0]*i,n[1]=this[1]*o,n[2]=this[2]*a,n[3]=0,n[4]=this[4]*i,n[5]=this[5]*o,n[6]=this[6]*a,n[7]=0,n[8]=this[8]*i,n[9]=this[9]*o,n[10]=this[10]*a,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}getRotationMatrix3(n,t){n=n||[-0,-0,-0,-0,-0,-0,-0,-0,-0],t=t||[-0,-0,-0];let r=this.getScale(t),i=1/r[0],o=1/r[1],a=1/r[2];return n[0]=this[0]*i,n[1]=this[1]*o,n[2]=this[2]*a,n[3]=this[4]*i,n[4]=this[5]*o,n[5]=this[6]*a,n[6]=this[8]*i,n[7]=this[9]*o,n[8]=this[10]*a,n}transpose(){return no(this,this),this.check()}invert(){return to(this,this),this.check()}multiplyLeft(n){return Nn(this,n,this),this.check()}multiplyRight(n){return Nn(this,this,n),this.check()}rotateX(n){return so(this,this,n),this.check()}rotateY(n){return lo(this,this,n),this.check()}rotateZ(n){return co(this,this,n),this.check()}rotateXYZ(n){return this.rotateX(n[0]).rotateY(n[1]).rotateZ(n[2])}rotateAxis(n,t){return ao(this,this,n,t),this.check()}scale(n){return oo(this,this,Array.isArray(n)?n:[n,n,n]),this.check()}translate(n){return io(this,this,n),this.check()}transform(n,t){return n.length===4?(t=mo(t||[-0,-0,-0,-0],n,this),$e(t,4),t):this.transformAsPoint(n,t)}transformAsPoint(n,t){let{length:r}=n,i;switch(r){case 2:i=$i(t||[-0,-0],n,this);break;case 3:i=eo(t||[-0,-0,-0],n,this);break;default:throw new Error("Illegal vector")}return $e(i,n.length),i}transformAsVector(n,t){let r;switch(n.length){case 2:r=Zi(t||[-0,-0],n,this);break;case 3:r=Ji(t||[-0,-0,-0],n,this);break;default:throw new Error("Illegal vector")}return $e(r,n.length),r}transformPoint(n,t){return this.transformAsPoint(n,t)}transformVector(n,t){return this.transformAsPoint(n,t)}transformDirection(n,t){return this.transformAsVector(n,t)}makeRotationX(n){return this.identity().rotateX(n)}makeTranslation(n,t,r){return this.identity().translate([n,t,r])}},Je,en;function Sc(){return Je||(Je=new ce([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),Object.freeze(Je)),Je}function Lc(){return en||(en=new ce,Object.freeze(en)),en}function go(e){if(e>Math.PI*2)throw Error("expected radians")}function Pc(e,n,t,r,i,o){let a=2*o/(t-n),s=2*o/(i-r),l=(t+n)/(t-n),f=(i+r)/(i-r),p=-1,d=-1,h=-2*o;return e[0]=a,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=s,e[6]=0,e[7]=0,e[8]=l,e[9]=f,e[10]=p,e[11]=d,e[12]=0,e[13]=0,e[14]=h,e[15]=0,e}var vo;function Ec(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Rn=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],wc={modelMatrix:Rn,viewMatrix:Rn,projectionMatrix:Rn,cameraPositionWorld:[0,0,0]};function Ic(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:wc,n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},t={};return e.modelMatrix!==void 0&&(t.modelMatrix=e.modelMatrix),e.viewMatrix!==void 0&&(t.viewMatrix=e.viewMatrix),e.projectionMatrix!==void 0&&(t.projectionMatrix=e.projectionMatrix),e.cameraPositionWorld!==void 0&&(t.cameraPositionWorld=e.cameraPositionWorld),(e.projectionMatrix!==void 0||e.viewMatrix!==void 0)&&(t.viewProjectionMatrix=new ce(e.projectionMatrix).multiplyRight(e.viewMatrix)),t}var bo=v(vo||(vo=Ec([`varying vec4 project_vPositionWorld;
varying vec3 project_vNormalWorld;

vec4 project_getPosition_World() {
  return project_vPositionWorld;
}

vec3 project_getNormal_World() {
  return project_vNormalWorld;
}
`],[`\\
varying vec4 project_vPositionWorld;
varying vec3 project_vNormalWorld;

vec4 project_getPosition_World() {
  return project_vPositionWorld;
}

vec3 project_getNormal_World() {
  return project_vNormalWorld;
}
`]))),Tc="".concat(bo,`

// Unprefixed uniforms
uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewProjectionMatrix;
uniform vec3 cameraPositionWorld;

struct World {
  vec3 position;
  vec3 normal;
};

World world;

void project_setPosition(vec4 position) {
  project_vPositionWorld = position;
}

void project_setNormal(vec3 normal) {
  project_vNormalWorld = normal;
}

void project_setPositionAndNormal_World(vec3 position, vec3 normal) {
  world.position = position;
  world.normal = normal;
}

void project_setPositionAndNormal_Model(vec3 position, vec3 normal) {
  world.position = (modelMatrix * vec4(position, 1.)).xyz;
  world.normal = mat3(modelMatrix) * normal;
}

vec4 project_model_to_clipspace(vec4 position) {
  return viewProjectionMatrix * modelMatrix * position;
}

vec4 project_model_to_clipspace(vec3 position) {
  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);
}

vec4 project_world_to_clipspace(vec3 position) {
  return viewProjectionMatrix * vec4(position, 1.);
}

vec4 project_view_to_clipspace(vec3 position) {
  return projectionMatrix * vec4(position, 1.);
}

vec4 project_to_clipspace(vec3 position) {
  return viewProjectionMatrix * vec4(position, 1.);
}
`),Nc=`
`.concat(bo),nn={name:"project",getUniforms:Ic,vs:Tc,fs:Nc};var xo;function Oc(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var kn=v(xo||(xo=Oc([`#if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))

struct AmbientLight {
 vec3 color;
};

struct PointLight {
 vec3 color;
 vec3 position;

 // Constant-Linear-Exponential
 vec3 attenuation;
};

struct DirectionalLight {
  vec3 color;
  vec3 direction;
};

uniform AmbientLight lighting_uAmbientLight;
uniform PointLight lighting_uPointLight[MAX_LIGHTS];
uniform DirectionalLight lighting_uDirectionalLight[MAX_LIGHTS];
uniform int lighting_uPointLightCount;
uniform int lighting_uDirectionalLightCount;

uniform bool lighting_uEnabled;

float getPointLightAttenuation(PointLight pointLight, float distance) {
  return pointLight.attenuation.x
       + pointLight.attenuation.y * distance
       + pointLight.attenuation.z * distance * distance;
}

#endif
`],[`\\
#if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))

struct AmbientLight {
 vec3 color;
};

struct PointLight {
 vec3 color;
 vec3 position;

 // Constant-Linear-Exponential
 vec3 attenuation;
};

struct DirectionalLight {
  vec3 color;
  vec3 direction;
};

uniform AmbientLight lighting_uAmbientLight;
uniform PointLight lighting_uPointLight[MAX_LIGHTS];
uniform DirectionalLight lighting_uDirectionalLight[MAX_LIGHTS];
uniform int lighting_uPointLightCount;
uniform int lighting_uDirectionalLightCount;

uniform bool lighting_uEnabled;

float getPointLightAttenuation(PointLight pointLight, float distance) {
  return pointLight.attenuation.x
       + pointLight.attenuation.y * distance
       + pointLight.attenuation.z * distance * distance;
}

#endif
`])));function Cc(e,n){var t=typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=Fc(e))||n&&e&&typeof e.length=="number"){t&&(e=t);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(f){throw f},f:i}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var o=!0,a=!1,s;return{s:function(){t=t.call(e)},n:function(){var f=t.next();return o=f.done,f},e:function(f){a=!0,s=f},f:function(){try{!o&&t.return!=null&&t.return()}finally{if(a)throw s}}}}function Fc(e,n){if(e){if(typeof e=="string")return yo(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);if(t==="Object"&&e.constructor&&(t=e.constructor.name),t==="Map"||t==="Set")return Array.from(e);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return yo(e,n)}}function yo(e,n){(n==null||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var Rc={lightSources:{}};function Mn(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},n=e.color,t=n===void 0?[0,0,0]:n,r=e.intensity,i=r===void 0?1:r;return t.map(function(o){return o*i/255})}function kc(e){var n=e.ambientLight,t=e.pointLights,r=t===void 0?[]:t,i=e.directionalLights,o=i===void 0?[]:i,a={};return n?a["lighting_uAmbientLight.color"]=Mn(n):a["lighting_uAmbientLight.color"]=[0,0,0],r.forEach(function(s,l){a["lighting_uPointLight[".concat(l,"].color")]=Mn(s),a["lighting_uPointLight[".concat(l,"].position")]=s.position,a["lighting_uPointLight[".concat(l,"].attenuation")]=s.attenuation||[1,0,0]}),a.lighting_uPointLightCount=r.length,o.forEach(function(s,l){a["lighting_uDirectionalLight[".concat(l,"].color")]=Mn(s),a["lighting_uDirectionalLight[".concat(l,"].direction")]=s.direction}),a.lighting_uDirectionalLightCount=o.length,a}function Ao(){var e,n,t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Rc;if("lightSources"in t){var r=t.lightSources||{},i=r.ambientLight,o=r.pointLights,a=r.directionalLights,s=i||o&&o.length>0||a&&a.length>0;return s?Object.assign({},kc({ambientLight:i,pointLights:o,directionalLights:a}),{lighting_uEnabled:!0}):{lighting_uEnabled:!1}}if("lights"in t){var l={pointLights:[],directionalLights:[]},f=Cc(t.lights||[]),p;try{for(f.s();!(p=f.n()).done;){var d=p.value;switch(d.type){case"ambient":l.ambientLight=d;break;case"directional":(e=l.directionalLights)===null||e===void 0||e.push(d);break;case"point":(n=l.pointLights)===null||n===void 0||n.push(d);break;default:}}}catch(h){f.e(h)}finally{f.f()}return Ao({lightSources:l})}return{}}var fe={name:"lights",vs:kn,fs:kn,getUniforms:Ao,defines:{MAX_LIGHTS:3}};var So;function Mc(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Uc={lightDirection:new Float32Array([1,1,2])};function Dc(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Uc,n={};return e.lightDirection&&(n.dirlight_uLightDirection=e.lightDirection),n}var zc=v(So||(So=Mc([`uniform vec3 dirlight_uLightDirection;

/*
 * Returns color attenuated by angle from light source
 */
vec4 dirlight_filterColor(vec4 color) {
  vec3 normal = project_getNormal_World();
  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));
  return vec4(color.rgb * d, color.a);
}
`],[`\\
uniform vec3 dirlight_uLightDirection;

/*
 * Returns color attenuated by angle from light source
 */
vec4 dirlight_filterColor(vec4 color) {
  vec3 normal = project_getNormal_World();
  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));
  return vec4(color.rgb * d, color.a);
}
`]))),Lo={name:"dirlight",fs:zc,getUniforms:Dc,dependencies:[nn]};var Po;function Bc(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Un=v(Po||(Po=Bc([`
uniform float lighting_uAmbient;
uniform float lighting_uDiffuse;
uniform float lighting_uShininess;
uniform vec3  lighting_uSpecularColor;

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {
    vec3 halfway_direction = normalize(light_direction + view_direction);
    float lambertian = dot(light_direction, normal_worldspace);
    float specular = 0.0;
    if (lambertian > 0.0) {
      float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
      specular = pow(specular_angle, lighting_uShininess);
    }
    lambertian = max(lambertian, 0.0);
    return (lambertian * lighting_uDiffuse * surfaceColor + specular * lighting_uSpecularColor) * color;
}

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = surfaceColor;

  if (lighting_uEnabled) {
    vec3 view_direction = normalize(cameraPosition - position_worldspace);
    lightColor = lighting_uAmbient * surfaceColor * lighting_uAmbientLight.color;

    for (int i = 0; i < MAX_LIGHTS; i++) {
      if (i >= lighting_uPointLightCount) {
        break;
      }
      PointLight pointLight = lighting_uPointLight[i];
      vec3 light_position_worldspace = pointLight.position;
      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
    }

    for (int i = 0; i < MAX_LIGHTS; i++) {
      if (i >= lighting_uDirectionalLightCount) {
        break;
      }
      DirectionalLight directionalLight = lighting_uDirectionalLight[i];
      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
    }
  }
  return lightColor;
}

vec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = vec3(0, 0, 0);
  vec3 surfaceColor = vec3(0, 0, 0);

  if (lighting_uEnabled) {
    vec3 view_direction = normalize(cameraPosition - position_worldspace);

    for (int i = 0; i < MAX_LIGHTS; i++) {
      if (i >= lighting_uPointLightCount) {
        break;
      }
      PointLight pointLight = lighting_uPointLight[i];
      vec3 light_position_worldspace = pointLight.position;
      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
    }

    for (int i = 0; i < MAX_LIGHTS; i++) {
      if (i >= lighting_uDirectionalLightCount) {
        break;
      }
      DirectionalLight directionalLight = lighting_uDirectionalLight[i];
      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
    }
  }
  return lightColor;
}
`],[`\\

uniform float lighting_uAmbient;
uniform float lighting_uDiffuse;
uniform float lighting_uShininess;
uniform vec3  lighting_uSpecularColor;

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {
    vec3 halfway_direction = normalize(light_direction + view_direction);
    float lambertian = dot(light_direction, normal_worldspace);
    float specular = 0.0;
    if (lambertian > 0.0) {
      float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
      specular = pow(specular_angle, lighting_uShininess);
    }
    lambertian = max(lambertian, 0.0);
    return (lambertian * lighting_uDiffuse * surfaceColor + specular * lighting_uSpecularColor) * color;
}

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = surfaceColor;

  if (lighting_uEnabled) {
    vec3 view_direction = normalize(cameraPosition - position_worldspace);
    lightColor = lighting_uAmbient * surfaceColor * lighting_uAmbientLight.color;

    for (int i = 0; i < MAX_LIGHTS; i++) {
      if (i >= lighting_uPointLightCount) {
        break;
      }
      PointLight pointLight = lighting_uPointLight[i];
      vec3 light_position_worldspace = pointLight.position;
      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
    }

    for (int i = 0; i < MAX_LIGHTS; i++) {
      if (i >= lighting_uDirectionalLightCount) {
        break;
      }
      DirectionalLight directionalLight = lighting_uDirectionalLight[i];
      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
    }
  }
  return lightColor;
}

vec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = vec3(0, 0, 0);
  vec3 surfaceColor = vec3(0, 0, 0);

  if (lighting_uEnabled) {
    vec3 view_direction = normalize(cameraPosition - position_worldspace);

    for (int i = 0; i < MAX_LIGHTS; i++) {
      if (i >= lighting_uPointLightCount) {
        break;
      }
      PointLight pointLight = lighting_uPointLight[i];
      vec3 light_position_worldspace = pointLight.position;
      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
    }

    for (int i = 0; i < MAX_LIGHTS; i++) {
      if (i >= lighting_uDirectionalLightCount) {
        break;
      }
      DirectionalLight directionalLight = lighting_uDirectionalLight[i];
      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
    }
  }
  return lightColor;
}
`])));var jc={};function Gc(e){var n=e.ambient,t=n===void 0?.35:n,r=e.diffuse,i=r===void 0?.6:r,o=e.shininess,a=o===void 0?32:o,s=e.specularColor,l=s===void 0?[30,30,30]:s;return{lighting_uAmbient:t,lighting_uDiffuse:i,lighting_uShininess:a,lighting_uSpecularColor:l.map(function(f){return f/255})}}function Eo(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:jc;if(!("material"in e))return{};var n=e.material;return n?Gc(n):{lighting_uEnabled:!1}}var wo={name:"gouraud-lighting",dependencies:[fe],vs:Un,defines:{LIGHTING_VERTEX:1},getUniforms:Eo},Io={name:"phong-lighting",dependencies:[fe],fs:Un,defines:{LIGHTING_FRAGMENT:1},getUniforms:Eo};var To;function Hc(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var No=v(To||(To=Hc([`uniform mat4 u_MVPMatrix;
uniform mat4 u_ModelMatrix;
uniform mat4 u_NormalMatrix;

out vec3 pbr_vPosition;
out vec2 pbr_vUV;

#ifdef HAS_NORMALS
# ifdef HAS_TANGENTS
out mat3 pbr_vTBN;
# else
out vec3 pbr_vNormal;
# endif
#endif

void pbr_setPositionNormalTangentUV(vec4 position, vec4 normal, vec4 tangent, vec2 uv)
{
  vec4 pos = u_ModelMatrix * position;
  pbr_vPosition = vec3(pos.xyz) / pos.w;

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
  vec3 normalW = normalize(vec3(u_NormalMatrix * vec4(normal.xyz, 0.0)));
  vec3 tangentW = normalize(vec3(u_ModelMatrix * vec4(tangent.xyz, 0.0)));
  vec3 bitangentW = cross(normalW, tangentW) * tangent.w;
  pbr_vTBN = mat3(tangentW, bitangentW, normalW);
#else // HAS_TANGENTS != 1
  pbr_vNormal = normalize(vec3(u_ModelMatrix * vec4(normal.xyz, 0.0)));
#endif
#endif

#ifdef HAS_UV
  pbr_vUV = uv;
#else
  pbr_vUV = vec2(0.,0.);
#endif
}
`],[`\\
uniform mat4 u_MVPMatrix;
uniform mat4 u_ModelMatrix;
uniform mat4 u_NormalMatrix;

out vec3 pbr_vPosition;
out vec2 pbr_vUV;

#ifdef HAS_NORMALS
# ifdef HAS_TANGENTS
out mat3 pbr_vTBN;
# else
out vec3 pbr_vNormal;
# endif
#endif

void pbr_setPositionNormalTangentUV(vec4 position, vec4 normal, vec4 tangent, vec2 uv)
{
  vec4 pos = u_ModelMatrix * position;
  pbr_vPosition = vec3(pos.xyz) / pos.w;

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
  vec3 normalW = normalize(vec3(u_NormalMatrix * vec4(normal.xyz, 0.0)));
  vec3 tangentW = normalize(vec3(u_ModelMatrix * vec4(tangent.xyz, 0.0)));
  vec3 bitangentW = cross(normalW, tangentW) * tangent.w;
  pbr_vTBN = mat3(tangentW, bitangentW, normalW);
#else // HAS_TANGENTS != 1
  pbr_vNormal = normalize(vec3(u_ModelMatrix * vec4(normal.xyz, 0.0)));
#endif
#endif

#ifdef HAS_UV
  pbr_vUV = uv;
#else
  pbr_vUV = vec2(0.,0.);
#endif
}
`])));var Oo;function Vc(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}var Co=v(Oo||(Oo=Vc([`#if defined(USE_TEX_LOD) && !defined(FEATURE_GLSL_TEXTURE_LOD)
# error PBR fragment shader: Texture LOD is not available
#endif

#if !defined(HAS_TANGENTS) && !defined(FEATURE_GLSL_DERIVATIVES)
# error PBR fragment shader: Derivatives are not available
#endif

// WebGL 1.0 does not support non-constant in for loops
// This provides an easy way to handle these cases
// and still take advantage of WebGL 2.0
#if (__VERSION__ < 300)
  #define SMART_FOR(INIT, WEBGL1COND, WEBGL2COND, INCR) for (INIT; WEBGL1COND; INCR)
#else
  #define SMART_FOR(INIT, WEBGL1COND, WEBGL2COND, INCR) for (INIT; WEBGL2COND; INCR)
#endif

precision highp float;

uniform bool pbr_uUnlit;

#ifdef USE_IBL
uniform samplerCube u_DiffuseEnvSampler;
uniform samplerCube u_SpecularEnvSampler;
uniform sampler2D u_brdfLUT;
uniform vec2 u_ScaleIBLAmbient;
#endif

#ifdef HAS_BASECOLORMAP
uniform sampler2D u_BaseColorSampler;
#endif
#ifdef HAS_NORMALMAP
uniform sampler2D u_NormalSampler;
uniform float u_NormalScale;
#endif
#ifdef HAS_EMISSIVEMAP
uniform sampler2D u_EmissiveSampler;
uniform vec3 u_EmissiveFactor;
#endif
#ifdef HAS_METALROUGHNESSMAP
uniform sampler2D u_MetallicRoughnessSampler;
#endif
#ifdef HAS_OCCLUSIONMAP
uniform sampler2D u_OcclusionSampler;
uniform float u_OcclusionStrength;
#endif

#ifdef ALPHA_CUTOFF
uniform float u_AlphaCutoff;
#endif

uniform vec2 u_MetallicRoughnessValues;
uniform vec4 u_BaseColorFactor;

uniform vec3 u_Camera;

// debugging flags used for shader output of intermediate PBR variables
#ifdef PBR_DEBUG
uniform vec4 u_ScaleDiffBaseMR;
uniform vec4 u_ScaleFGDSpec;
#endif

in vec3 pbr_vPosition;

in vec2 pbr_vUV;

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
in mat3 pbr_vTBN;
#else
in vec3 pbr_vNormal;
#endif
#endif

// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo
{
  float NdotL;                  // cos angle between normal and light direction
  float NdotV;                  // cos angle between normal and view direction
  float NdotH;                  // cos angle between normal and half vector
  float LdotH;                  // cos angle between light direction and half vector
  float VdotH;                  // cos angle between view direction and half vector
  float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
  float metalness;              // metallic value at the surface
  vec3 reflectance0;            // full reflectance color (normal incidence angle)
  vec3 reflectance90;           // reflectance color at grazing angle
  float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
  vec3 diffuseColor;            // color contribution from diffuse lighting
  vec3 specularColor;           // color contribution from specular lighting
  vec3 n;                       // normal at surface point
  vec3 v;                       // vector from surface point to camera
};

const float M_PI = 3.141592653589793;
const float c_MinRoughness = 0.04;

vec4 SRGBtoLINEAR(vec4 srgbIn)
{
#ifdef MANUAL_SRGB
#ifdef SRGB_FAST_APPROXIMATION
  vec3 linOut = pow(srgbIn.xyz,vec3(2.2));
#else //SRGB_FAST_APPROXIMATION
  vec3 bLess = step(vec3(0.04045),srgbIn.xyz);
  vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );
#endif //SRGB_FAST_APPROXIMATION
  return vec4(linOut,srgbIn.w);;
#else //MANUAL_SRGB
  return srgbIn;
#endif //MANUAL_SRGB
}

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
  // Retrieve the tangent space matrix
#ifndef HAS_TANGENTS
  vec3 pos_dx = dFdx(pbr_vPosition);
  vec3 pos_dy = dFdy(pbr_vPosition);
  vec3 tex_dx = dFdx(vec3(pbr_vUV, 0.0));
  vec3 tex_dy = dFdy(vec3(pbr_vUV, 0.0));
  vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);

#ifdef HAS_NORMALS
  vec3 ng = normalize(pbr_vNormal);
#else
  vec3 ng = cross(pos_dx, pos_dy);
#endif

  t = normalize(t - ng * dot(ng, t));
  vec3 b = normalize(cross(ng, t));
  mat3 tbn = mat3(t, b, ng);
#else // HAS_TANGENTS
  mat3 tbn = pbr_vTBN;
#endif

#ifdef HAS_NORMALMAP
  vec3 n = texture(u_NormalSampler, pbr_vUV).rgb;
  n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_NormalScale, u_NormalScale, 1.0)));
#else
  // The tbn matrix is linearly interpolated, so we need to re-normalize
  vec3 n = normalize(tbn[2].xyz);
#endif

  return n;
}

// Calculation of the lighting contribution from an optional Image Based Light source.
// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].
// See our README.md on Environment Maps [3] for additional discussion.
#ifdef USE_IBL
vec3 getIBLContribution(PBRInfo pbrInputs, vec3 n, vec3 reflection)
{
  float mipCount = 9.0; // resolution of 512x512
  float lod = (pbrInputs.perceptualRoughness * mipCount);
  // retrieve a scale and bias to F0. See [1], Figure 3
  vec3 brdf = SRGBtoLINEAR(texture(u_brdfLUT,
    vec2(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness))).rgb;
  vec3 diffuseLight = SRGBtoLINEAR(textureCube(u_DiffuseEnvSampler, n)).rgb;

#ifdef USE_TEX_LOD
  vec3 specularLight = SRGBtoLINEAR(textureCubeLod(u_SpecularEnvSampler, reflection, lod)).rgb;
#else
  vec3 specularLight = SRGBtoLINEAR(textureCube(u_SpecularEnvSampler, reflection)).rgb;
#endif

  vec3 diffuse = diffuseLight * pbrInputs.diffuseColor;
  vec3 specular = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);

  // For presentation, this allows us to disable IBL terms
  diffuse *= u_ScaleIBLAmbient.x;
  specular *= u_ScaleIBLAmbient.y;

  return diffuse + specular;
}
#endif

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
vec3 diffuse(PBRInfo pbrInputs)
{
  return pbrInputs.diffuseColor / M_PI;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
vec3 specularReflection(PBRInfo pbrInputs)
{
  return pbrInputs.reflectance0 +
    (pbrInputs.reflectance90 - pbrInputs.reflectance0) *
    pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float geometricOcclusion(PBRInfo pbrInputs)
{
  float NdotL = pbrInputs.NdotL;
  float NdotV = pbrInputs.NdotV;
  float r = pbrInputs.alphaRoughness;

  float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
  float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
  return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across
// the area being drawn (aka D())
// Implementation from "Average Irregularity Representation of a Roughened Surface
// for Ray Reflection" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes
// from EPIC Games [1], Equation 3.
float microfacetDistribution(PBRInfo pbrInputs)
{
  float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;
  float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;
  return roughnessSq / (M_PI * f * f);
}

void PBRInfo_setAmbientLight(inout PBRInfo pbrInputs) {
  pbrInputs.NdotL = 1.0;
  pbrInputs.NdotH = 0.0;
  pbrInputs.LdotH = 0.0;
  pbrInputs.VdotH = 1.0;
}

void PBRInfo_setDirectionalLight(inout PBRInfo pbrInputs, vec3 lightDirection) {
  vec3 n = pbrInputs.n;
  vec3 v = pbrInputs.v;
  vec3 l = normalize(lightDirection);             // Vector from surface point to light
  vec3 h = normalize(l+v);                        // Half vector between both l and v

  pbrInputs.NdotL = clamp(dot(n, l), 0.001, 1.0);
  pbrInputs.NdotH = clamp(dot(n, h), 0.0, 1.0);
  pbrInputs.LdotH = clamp(dot(l, h), 0.0, 1.0);
  pbrInputs.VdotH = clamp(dot(v, h), 0.0, 1.0);
}

void PBRInfo_setPointLight(inout PBRInfo pbrInputs, PointLight pointLight) {
  vec3 light_direction = normalize(pointLight.position - pbr_vPosition);
  PBRInfo_setDirectionalLight(pbrInputs, light_direction);
}

vec3 calculateFinalColor(PBRInfo pbrInputs, vec3 lightColor) {
  // Calculate the shading terms for the microfacet specular shading model
  vec3 F = specularReflection(pbrInputs);
  float G = geometricOcclusion(pbrInputs);
  float D = microfacetDistribution(pbrInputs);

  // Calculation of analytical lighting contribution
  vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);
  vec3 specContrib = F * G * D / (4.0 * pbrInputs.NdotL * pbrInputs.NdotV);
  // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
  return pbrInputs.NdotL * lightColor * (diffuseContrib + specContrib);
}

vec4 pbr_filterColor(vec4 colorUnused)
{
  // The albedo may be defined from a base texture or a flat color
#ifdef HAS_BASECOLORMAP
  vec4 baseColor = SRGBtoLINEAR(texture(u_BaseColorSampler, pbr_vUV)) * u_BaseColorFactor;
#else
  vec4 baseColor = u_BaseColorFactor;
#endif

#ifdef ALPHA_CUTOFF
  if (baseColor.a < u_AlphaCutoff) {
    discard;
  }
#endif

  vec3 color = vec3(0, 0, 0);

  if(pbr_uUnlit){
    color.rgb = baseColor.rgb;
  }
  else{
    // Metallic and Roughness material properties are packed together
    // In glTF, these factors can be specified by fixed scalar values
    // or from a metallic-roughness map
    float perceptualRoughness = u_MetallicRoughnessValues.y;
    float metallic = u_MetallicRoughnessValues.x;
#ifdef HAS_METALROUGHNESSMAP
    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.
    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data
    vec4 mrSample = texture(u_MetallicRoughnessSampler, pbr_vUV);
    perceptualRoughness = mrSample.g * perceptualRoughness;
    metallic = mrSample.b * metallic;
#endif
    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);
    metallic = clamp(metallic, 0.0, 1.0);
    // Roughness is authored as perceptual roughness; as is convention,
    // convert to material roughness by squaring the perceptual roughness [2].
    float alphaRoughness = perceptualRoughness * perceptualRoughness;

    vec3 f0 = vec3(0.04);
    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
    diffuseColor *= 1.0 - metallic;
    vec3 specularColor = mix(f0, baseColor.rgb, metallic);

    // Compute reflectance.
    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

    // For typical incident reflectance range (between 4% to 100%) set the grazing
    // reflectance to 100% for typical fresnel effect.
    // For very low reflectance range on highly diffuse objects (below 4%),
    // incrementally reduce grazing reflecance to 0%.
    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
    vec3 specularEnvironmentR0 = specularColor.rgb;
    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;

    vec3 n = getNormal();                          // normal at surface point
    vec3 v = normalize(u_Camera - pbr_vPosition);  // Vector from surface point to camera

    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
    vec3 reflection = -normalize(reflect(v, n));

    PBRInfo pbrInputs = PBRInfo(
      0.0, // NdotL
      NdotV,
      0.0, // NdotH
      0.0, // LdotH
      0.0, // VdotH
      perceptualRoughness,
      metallic,
      specularEnvironmentR0,
      specularEnvironmentR90,
      alphaRoughness,
      diffuseColor,
      specularColor,
      n,
      v
    );

#ifdef USE_LIGHTS
    // Apply ambient light
    PBRInfo_setAmbientLight(pbrInputs);
    color += calculateFinalColor(pbrInputs, lighting_uAmbientLight.color);

    // Apply directional light
    SMART_FOR(int i = 0, i < MAX_LIGHTS, i < lighting_uDirectionalLightCount, i++) {
      if (i < lighting_uDirectionalLightCount) {
        PBRInfo_setDirectionalLight(pbrInputs, lighting_uDirectionalLight[i].direction);
        color += calculateFinalColor(pbrInputs, lighting_uDirectionalLight[i].color);
      }
    }

    // Apply point light
    SMART_FOR(int i = 0, i < MAX_LIGHTS, i < lighting_uPointLightCount, i++) {
      if (i < lighting_uPointLightCount) {
        PBRInfo_setPointLight(pbrInputs, lighting_uPointLight[i]);
        float attenuation = getPointLightAttenuation(lighting_uPointLight[i], distance(lighting_uPointLight[i].position, pbr_vPosition));
        color += calculateFinalColor(pbrInputs, lighting_uPointLight[i].color / attenuation);
      }
    }
#endif

    // Calculate lighting contribution from image based lighting source (IBL)
#ifdef USE_IBL
    color += getIBLContribution(pbrInputs, n, reflection);
#endif

    // Apply optional PBR terms for additional (optional) shading
#ifdef HAS_OCCLUSIONMAP
    float ao = texture(u_OcclusionSampler, pbr_vUV).r;
    color = mix(color, color * ao, u_OcclusionStrength);
#endif

#ifdef HAS_EMISSIVEMAP
    vec3 emissive = SRGBtoLINEAR(texture(u_EmissiveSampler, pbr_vUV)).rgb * u_EmissiveFactor;
    color += emissive;
#endif

    // This section uses mix to override final color for reference app visualization
    // of various parameters in the lighting equation.
#ifdef PBR_DEBUG
    // TODO: Figure out how to debug multiple lights

    // color = mix(color, F, u_ScaleFGDSpec.x);
    // color = mix(color, vec3(G), u_ScaleFGDSpec.y);
    // color = mix(color, vec3(D), u_ScaleFGDSpec.z);
    // color = mix(color, specContrib, u_ScaleFGDSpec.w);

    // color = mix(color, diffuseContrib, u_ScaleDiffBaseMR.x);
    color = mix(color, baseColor.rgb, u_ScaleDiffBaseMR.y);
    color = mix(color, vec3(metallic), u_ScaleDiffBaseMR.z);
    color = mix(color, vec3(perceptualRoughness), u_ScaleDiffBaseMR.w);
#endif

  }

  return vec4(pow(color,vec3(1.0/2.2)), baseColor.a);
}
`],[`\\
#if defined(USE_TEX_LOD) && !defined(FEATURE_GLSL_TEXTURE_LOD)
# error PBR fragment shader: Texture LOD is not available
#endif

#if !defined(HAS_TANGENTS) && !defined(FEATURE_GLSL_DERIVATIVES)
# error PBR fragment shader: Derivatives are not available
#endif

// WebGL 1.0 does not support non-constant in for loops
// This provides an easy way to handle these cases
// and still take advantage of WebGL 2.0
#if (__VERSION__ < 300)
  #define SMART_FOR(INIT, WEBGL1COND, WEBGL2COND, INCR) for (INIT; WEBGL1COND; INCR)
#else
  #define SMART_FOR(INIT, WEBGL1COND, WEBGL2COND, INCR) for (INIT; WEBGL2COND; INCR)
#endif

precision highp float;

uniform bool pbr_uUnlit;

#ifdef USE_IBL
uniform samplerCube u_DiffuseEnvSampler;
uniform samplerCube u_SpecularEnvSampler;
uniform sampler2D u_brdfLUT;
uniform vec2 u_ScaleIBLAmbient;
#endif

#ifdef HAS_BASECOLORMAP
uniform sampler2D u_BaseColorSampler;
#endif
#ifdef HAS_NORMALMAP
uniform sampler2D u_NormalSampler;
uniform float u_NormalScale;
#endif
#ifdef HAS_EMISSIVEMAP
uniform sampler2D u_EmissiveSampler;
uniform vec3 u_EmissiveFactor;
#endif
#ifdef HAS_METALROUGHNESSMAP
uniform sampler2D u_MetallicRoughnessSampler;
#endif
#ifdef HAS_OCCLUSIONMAP
uniform sampler2D u_OcclusionSampler;
uniform float u_OcclusionStrength;
#endif

#ifdef ALPHA_CUTOFF
uniform float u_AlphaCutoff;
#endif

uniform vec2 u_MetallicRoughnessValues;
uniform vec4 u_BaseColorFactor;

uniform vec3 u_Camera;

// debugging flags used for shader output of intermediate PBR variables
#ifdef PBR_DEBUG
uniform vec4 u_ScaleDiffBaseMR;
uniform vec4 u_ScaleFGDSpec;
#endif

in vec3 pbr_vPosition;

in vec2 pbr_vUV;

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
in mat3 pbr_vTBN;
#else
in vec3 pbr_vNormal;
#endif
#endif

// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo
{
  float NdotL;                  // cos angle between normal and light direction
  float NdotV;                  // cos angle between normal and view direction
  float NdotH;                  // cos angle between normal and half vector
  float LdotH;                  // cos angle between light direction and half vector
  float VdotH;                  // cos angle between view direction and half vector
  float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
  float metalness;              // metallic value at the surface
  vec3 reflectance0;            // full reflectance color (normal incidence angle)
  vec3 reflectance90;           // reflectance color at grazing angle
  float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
  vec3 diffuseColor;            // color contribution from diffuse lighting
  vec3 specularColor;           // color contribution from specular lighting
  vec3 n;                       // normal at surface point
  vec3 v;                       // vector from surface point to camera
};

const float M_PI = 3.141592653589793;
const float c_MinRoughness = 0.04;

vec4 SRGBtoLINEAR(vec4 srgbIn)
{
#ifdef MANUAL_SRGB
#ifdef SRGB_FAST_APPROXIMATION
  vec3 linOut = pow(srgbIn.xyz,vec3(2.2));
#else //SRGB_FAST_APPROXIMATION
  vec3 bLess = step(vec3(0.04045),srgbIn.xyz);
  vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );
#endif //SRGB_FAST_APPROXIMATION
  return vec4(linOut,srgbIn.w);;
#else //MANUAL_SRGB
  return srgbIn;
#endif //MANUAL_SRGB
}

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
  // Retrieve the tangent space matrix
#ifndef HAS_TANGENTS
  vec3 pos_dx = dFdx(pbr_vPosition);
  vec3 pos_dy = dFdy(pbr_vPosition);
  vec3 tex_dx = dFdx(vec3(pbr_vUV, 0.0));
  vec3 tex_dy = dFdy(vec3(pbr_vUV, 0.0));
  vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);

#ifdef HAS_NORMALS
  vec3 ng = normalize(pbr_vNormal);
#else
  vec3 ng = cross(pos_dx, pos_dy);
#endif

  t = normalize(t - ng * dot(ng, t));
  vec3 b = normalize(cross(ng, t));
  mat3 tbn = mat3(t, b, ng);
#else // HAS_TANGENTS
  mat3 tbn = pbr_vTBN;
#endif

#ifdef HAS_NORMALMAP
  vec3 n = texture(u_NormalSampler, pbr_vUV).rgb;
  n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_NormalScale, u_NormalScale, 1.0)));
#else
  // The tbn matrix is linearly interpolated, so we need to re-normalize
  vec3 n = normalize(tbn[2].xyz);
#endif

  return n;
}

// Calculation of the lighting contribution from an optional Image Based Light source.
// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].
// See our README.md on Environment Maps [3] for additional discussion.
#ifdef USE_IBL
vec3 getIBLContribution(PBRInfo pbrInputs, vec3 n, vec3 reflection)
{
  float mipCount = 9.0; // resolution of 512x512
  float lod = (pbrInputs.perceptualRoughness * mipCount);
  // retrieve a scale and bias to F0. See [1], Figure 3
  vec3 brdf = SRGBtoLINEAR(texture(u_brdfLUT,
    vec2(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness))).rgb;
  vec3 diffuseLight = SRGBtoLINEAR(textureCube(u_DiffuseEnvSampler, n)).rgb;

#ifdef USE_TEX_LOD
  vec3 specularLight = SRGBtoLINEAR(textureCubeLod(u_SpecularEnvSampler, reflection, lod)).rgb;
#else
  vec3 specularLight = SRGBtoLINEAR(textureCube(u_SpecularEnvSampler, reflection)).rgb;
#endif

  vec3 diffuse = diffuseLight * pbrInputs.diffuseColor;
  vec3 specular = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);

  // For presentation, this allows us to disable IBL terms
  diffuse *= u_ScaleIBLAmbient.x;
  specular *= u_ScaleIBLAmbient.y;

  return diffuse + specular;
}
#endif

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
vec3 diffuse(PBRInfo pbrInputs)
{
  return pbrInputs.diffuseColor / M_PI;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
vec3 specularReflection(PBRInfo pbrInputs)
{
  return pbrInputs.reflectance0 +
    (pbrInputs.reflectance90 - pbrInputs.reflectance0) *
    pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float geometricOcclusion(PBRInfo pbrInputs)
{
  float NdotL = pbrInputs.NdotL;
  float NdotV = pbrInputs.NdotV;
  float r = pbrInputs.alphaRoughness;

  float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
  float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
  return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across
// the area being drawn (aka D())
// Implementation from "Average Irregularity Representation of a Roughened Surface
// for Ray Reflection" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes
// from EPIC Games [1], Equation 3.
float microfacetDistribution(PBRInfo pbrInputs)
{
  float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;
  float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;
  return roughnessSq / (M_PI * f * f);
}

void PBRInfo_setAmbientLight(inout PBRInfo pbrInputs) {
  pbrInputs.NdotL = 1.0;
  pbrInputs.NdotH = 0.0;
  pbrInputs.LdotH = 0.0;
  pbrInputs.VdotH = 1.0;
}

void PBRInfo_setDirectionalLight(inout PBRInfo pbrInputs, vec3 lightDirection) {
  vec3 n = pbrInputs.n;
  vec3 v = pbrInputs.v;
  vec3 l = normalize(lightDirection);             // Vector from surface point to light
  vec3 h = normalize(l+v);                        // Half vector between both l and v

  pbrInputs.NdotL = clamp(dot(n, l), 0.001, 1.0);
  pbrInputs.NdotH = clamp(dot(n, h), 0.0, 1.0);
  pbrInputs.LdotH = clamp(dot(l, h), 0.0, 1.0);
  pbrInputs.VdotH = clamp(dot(v, h), 0.0, 1.0);
}

void PBRInfo_setPointLight(inout PBRInfo pbrInputs, PointLight pointLight) {
  vec3 light_direction = normalize(pointLight.position - pbr_vPosition);
  PBRInfo_setDirectionalLight(pbrInputs, light_direction);
}

vec3 calculateFinalColor(PBRInfo pbrInputs, vec3 lightColor) {
  // Calculate the shading terms for the microfacet specular shading model
  vec3 F = specularReflection(pbrInputs);
  float G = geometricOcclusion(pbrInputs);
  float D = microfacetDistribution(pbrInputs);

  // Calculation of analytical lighting contribution
  vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);
  vec3 specContrib = F * G * D / (4.0 * pbrInputs.NdotL * pbrInputs.NdotV);
  // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
  return pbrInputs.NdotL * lightColor * (diffuseContrib + specContrib);
}

vec4 pbr_filterColor(vec4 colorUnused)
{
  // The albedo may be defined from a base texture or a flat color
#ifdef HAS_BASECOLORMAP
  vec4 baseColor = SRGBtoLINEAR(texture(u_BaseColorSampler, pbr_vUV)) * u_BaseColorFactor;
#else
  vec4 baseColor = u_BaseColorFactor;
#endif

#ifdef ALPHA_CUTOFF
  if (baseColor.a < u_AlphaCutoff) {
    discard;
  }
#endif

  vec3 color = vec3(0, 0, 0);

  if(pbr_uUnlit){
    color.rgb = baseColor.rgb;
  }
  else{
    // Metallic and Roughness material properties are packed together
    // In glTF, these factors can be specified by fixed scalar values
    // or from a metallic-roughness map
    float perceptualRoughness = u_MetallicRoughnessValues.y;
    float metallic = u_MetallicRoughnessValues.x;
#ifdef HAS_METALROUGHNESSMAP
    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.
    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data
    vec4 mrSample = texture(u_MetallicRoughnessSampler, pbr_vUV);
    perceptualRoughness = mrSample.g * perceptualRoughness;
    metallic = mrSample.b * metallic;
#endif
    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);
    metallic = clamp(metallic, 0.0, 1.0);
    // Roughness is authored as perceptual roughness; as is convention,
    // convert to material roughness by squaring the perceptual roughness [2].
    float alphaRoughness = perceptualRoughness * perceptualRoughness;

    vec3 f0 = vec3(0.04);
    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
    diffuseColor *= 1.0 - metallic;
    vec3 specularColor = mix(f0, baseColor.rgb, metallic);

    // Compute reflectance.
    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

    // For typical incident reflectance range (between 4% to 100%) set the grazing
    // reflectance to 100% for typical fresnel effect.
    // For very low reflectance range on highly diffuse objects (below 4%),
    // incrementally reduce grazing reflecance to 0%.
    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
    vec3 specularEnvironmentR0 = specularColor.rgb;
    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;

    vec3 n = getNormal();                          // normal at surface point
    vec3 v = normalize(u_Camera - pbr_vPosition);  // Vector from surface point to camera

    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
    vec3 reflection = -normalize(reflect(v, n));

    PBRInfo pbrInputs = PBRInfo(
      0.0, // NdotL
      NdotV,
      0.0, // NdotH
      0.0, // LdotH
      0.0, // VdotH
      perceptualRoughness,
      metallic,
      specularEnvironmentR0,
      specularEnvironmentR90,
      alphaRoughness,
      diffuseColor,
      specularColor,
      n,
      v
    );

#ifdef USE_LIGHTS
    // Apply ambient light
    PBRInfo_setAmbientLight(pbrInputs);
    color += calculateFinalColor(pbrInputs, lighting_uAmbientLight.color);

    // Apply directional light
    SMART_FOR(int i = 0, i < MAX_LIGHTS, i < lighting_uDirectionalLightCount, i++) {
      if (i < lighting_uDirectionalLightCount) {
        PBRInfo_setDirectionalLight(pbrInputs, lighting_uDirectionalLight[i].direction);
        color += calculateFinalColor(pbrInputs, lighting_uDirectionalLight[i].color);
      }
    }

    // Apply point light
    SMART_FOR(int i = 0, i < MAX_LIGHTS, i < lighting_uPointLightCount, i++) {
      if (i < lighting_uPointLightCount) {
        PBRInfo_setPointLight(pbrInputs, lighting_uPointLight[i]);
        float attenuation = getPointLightAttenuation(lighting_uPointLight[i], distance(lighting_uPointLight[i].position, pbr_vPosition));
        color += calculateFinalColor(pbrInputs, lighting_uPointLight[i].color / attenuation);
      }
    }
#endif

    // Calculate lighting contribution from image based lighting source (IBL)
#ifdef USE_IBL
    color += getIBLContribution(pbrInputs, n, reflection);
#endif

    // Apply optional PBR terms for additional (optional) shading
#ifdef HAS_OCCLUSIONMAP
    float ao = texture(u_OcclusionSampler, pbr_vUV).r;
    color = mix(color, color * ao, u_OcclusionStrength);
#endif

#ifdef HAS_EMISSIVEMAP
    vec3 emissive = SRGBtoLINEAR(texture(u_EmissiveSampler, pbr_vUV)).rgb * u_EmissiveFactor;
    color += emissive;
#endif

    // This section uses mix to override final color for reference app visualization
    // of various parameters in the lighting equation.
#ifdef PBR_DEBUG
    // TODO: Figure out how to debug multiple lights

    // color = mix(color, F, u_ScaleFGDSpec.x);
    // color = mix(color, vec3(G), u_ScaleFGDSpec.y);
    // color = mix(color, vec3(D), u_ScaleFGDSpec.z);
    // color = mix(color, specContrib, u_ScaleFGDSpec.w);

    // color = mix(color, diffuseContrib, u_ScaleDiffBaseMR.x);
    color = mix(color, baseColor.rgb, u_ScaleDiffBaseMR.y);
    color = mix(color, vec3(metallic), u_ScaleDiffBaseMR.z);
    color = mix(color, vec3(perceptualRoughness), u_ScaleDiffBaseMR.w);
#endif

  }

  return vec4(pow(color,vec3(1.0/2.2)), baseColor.a);
}
`])));var Fo={name:"pbr",vs:No,fs:Co,defines:{LIGHTING_FRAGMENT:1},dependencies:[fe]};return zo(Xc);})();
/**
 * ORIGINAL LICENCE
 * @license
 * Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *  * Neither the name of NVIDIA CORPORATION nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
      return __exports__;
      });
