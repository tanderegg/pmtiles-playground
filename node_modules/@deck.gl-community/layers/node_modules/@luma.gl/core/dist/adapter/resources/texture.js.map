{"version":3,"file":"texture.js","names":["Resource","_Symbol$toStringTag","Symbol","toStringTag","Texture","constructor","device","props","defaultProps","arguments","length","undefined","dimension","format","width","height","depth","sampler","data","mipmaps","compressed","usage","mipLevels","samples","type","COPY_SRC","COPY_DST","TEXTURE_BINDING","STORAGE_BINDING","RENDER_ATTACHMENT"],"sources":["../../../src/adapter/resources/texture.ts"],"sourcesContent":["// luma.gl, MIT license\nimport type {Device} from '../device';\nimport type {TypedArray} from '../../types';\nimport type {TextureFormat} from '../types/texture-formats';\nimport {Resource, ResourceProps} from './resource';\nimport {Sampler, SamplerProps} from './sampler';\n\n// required GPUExtent3D size;\n// GPUIntegerCoordinate mipLevelCount = 1;\n// GPUSize32 sampleCount = 1;\n// GPUTextureDimension dimension = \"2d\";\n// required GPUTextureFormat format;\n// required GPUTextureUsageFlags usage;\n\n/** Data types that can be used to initialize textures */\nexport type TextureData = \n  TypedArray | ArrayBuffer | Buffer | ImageBitmap | HTMLImageElement\n  ;\n\nexport type CubeTextureData = \n  Record<string, TextureData> |\n  Record<string, Promise<TextureData>>\n  ;\n\nexport type ExternalTextureData = HTMLVideoElement;\n\n/** Abstract Texture interface */\nexport type TextureProps = ResourceProps & {\n  format?: TextureFormat;\n  dimension?: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  width?: number | undefined;\n  height?: number | undefined;\n  depth?: number;\n  usage?: number;\n\n  data?: TextureData | Promise<TextureData> | CubeTextureData | string | HTMLVideoElement | null;\n  mipmaps?: boolean;\n  sampler?: Sampler | SamplerProps;\n\n  mipLevels?: number;\n  samples?: number;\n  type?: number;\n  compressed?: boolean;\n};\n\nexport type WebGPUTextureProps = ResourceProps & {\n  width: number;\n  height: number;\n  depth?: number;\n  mipLevels?: number;\n  format?: string;\n};\n\nexport type TextureViewProps = {\n  format: string;\n  dimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\n  arrayLayerCount: number;\n  baseArrayLayer?: number;\n  mipLevels?: number;\n  baseMipLevel?: number;\n};\n\n/** \n * @deprecated\n * @todo remove, are these even used anymore?\n */\nexport type DeprecatedWebGLTextureProps = {\n  /** @deprecated use props.sampler */\n  parameters?: Record<number, number>;\n  /** @deprecated use props.data */\n  pixels?: any;\n  /** @deprecated use props.format */\n  dataFormat?: number | null;\n  /** @deprecated rarely supported */\n  border?: number;\n  /** @deprecated WebGL only. */\n  pixelStore?: object;\n  /** @deprecated WebGL only. */\n  textureUnit?: number;\n  /** @deprecated WebGL only. Use dimension. */\n  target?: number;\n};\n\n/**\n * Abstract Texture interface\n * Texture Object\n * https://gpuweb.github.io/gpuweb/#gputexture\n */\nexport abstract class Texture<Props extends TextureProps = TextureProps> extends Resource<Props> {\n  static override defaultProps: Required<TextureProps> = {\n    ...Resource.defaultProps,\n    data: null,\n    dimension: '2d',\n    format: 'rgba8unorm',\n    width: undefined!,\n    height: undefined!,\n    depth: 1,\n    mipmaps: true,\n    sampler: {},\n    // type: undefined,\n    compressed: false,\n    // mipLevels: 1,\n    usage: 0,\n    // usage: GPUTextureUsage.COPY_DST\n    mipLevels: undefined!,\n    samples: undefined!,\n    type: undefined!\n  };\n  \n  static COPY_SRC = 0x01;\n  static COPY_DST = 0x02;\n  static TEXTURE_BINDING = 0x04;\n  static STORAGE_BINDING = 0x08;\n  static RENDER_ATTACHMENT = 0x10;\n\n  override get [Symbol.toStringTag](): string { return 'Texture'; }\n\n  /** dimension of this texture */\n  readonly dimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  /** format of this texture */\n  readonly format: TextureFormat;\n  /** width in pixels of this texture */\n  width: number;\n  /** height in pixels of this texture */\n  height: number;\n  /** depth of this texture */\n  readonly depth: number;\n  /** Default sampler for this texture */\n  abstract sampler: Sampler;\n\n  constructor(device: Device, props: Props, defaultProps = Texture.defaultProps as Required<Props>) {\n    super(device, props, defaultProps);\n    this.dimension = this.props.dimension;\n    this.format = this.props.format ;\n    this.width = this.props.width;\n    this.height = this.props.height;\n    this.depth = this.props.depth;\n  }\n}\n"],"mappings":";SAIQA,QAAQ;AAAAC,mBAAA,GAgHAC,MAAM,CAACC,WAAW;AA3BlC,OAAO,MAAeC,OAAO,SAAoDJ,QAAQ,CAAQ;EA2B/F,KAAAC,mBAAA,IAA4C;IAAE,OAAO,SAAS;EAAE;EAehEI,WAAWA,CAACC,MAAc,EAAEC,KAAY,EAA0D;IAAA,IAAxDC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGL,OAAO,CAACI,YAAY;IAC3E,KAAK,CAACF,MAAM,EAAEC,KAAK,EAAEC,YAAY,CAAC;IAAC,KAb5BI,SAAS;IAAA,KAETC,MAAM;IAAA,KAEfC,KAAK;IAAA,KAELC,MAAM;IAAA,KAEGC,KAAK;IAAA,KAELC,OAAO;IAId,IAAI,CAACL,SAAS,GAAG,IAAI,CAACL,KAAK,CAACK,SAAS;IACrC,IAAI,CAACC,MAAM,GAAG,IAAI,CAACN,KAAK,CAACM,MAAM;IAC/B,IAAI,CAACC,KAAK,GAAG,IAAI,CAACP,KAAK,CAACO,KAAK;IAC7B,IAAI,CAACC,MAAM,GAAG,IAAI,CAACR,KAAK,CAACQ,MAAM;IAC/B,IAAI,CAACC,KAAK,GAAG,IAAI,CAACT,KAAK,CAACS,KAAK;EAC/B;AACF;AAlDsBZ,OAAO,CACXI,YAAY,GAA2B;EACrD,GAAGR,QAAQ,CAACQ,YAAY;EACxBU,IAAI,EAAE,IAAI;EACVN,SAAS,EAAE,IAAI;EACfC,MAAM,EAAE,YAAY;EACpBC,KAAK,EAAEH,SAAU;EACjBI,MAAM,EAAEJ,SAAU;EAClBK,KAAK,EAAE,CAAC;EACRG,OAAO,EAAE,IAAI;EACbF,OAAO,EAAE,CAAC,CAAC;EAEXG,UAAU,EAAE,KAAK;EAEjBC,KAAK,EAAE,CAAC;EAERC,SAAS,EAAEX,SAAU;EACrBY,OAAO,EAAEZ,SAAU;EACnBa,IAAI,EAAEb;AACR,CAAC;AAnBmBP,OAAO,CAqBpBqB,QAAQ,GAAG,IAAI;AArBFrB,OAAO,CAsBpBsB,QAAQ,GAAG,IAAI;AAtBFtB,OAAO,CAuBpBuB,eAAe,GAAG,IAAI;AAvBTvB,OAAO,CAwBpBwB,eAAe,GAAG,IAAI;AAxBTxB,OAAO,CAyBpByB,iBAAiB,GAAG,IAAI"}