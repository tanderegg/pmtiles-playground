{"version":3,"file":"command-encoder.js","names":["Resource","_Symbol$toStringTag","Symbol","toStringTag","CommandEncoder","constructor","device","props","defaultProps","pushDebugGroup","groupLabel","popDebugGroup","insertDebugMarker","markerLabel","measureExecutionTime","undefined"],"sources":["../../../src/adapter/resources/command-encoder.ts"],"sourcesContent":["// luma.gl, MIT license\nimport {Device} from '../device';\nimport {Resource, ResourceProps} from './resource';\nimport {Buffer} from './buffer';\nimport {Texture} from './texture';\n\nexport type WriteBufferOptions = {\n  buffer: Buffer,\n  bufferOffset?: number,\n  data: BufferSource,\n  dataOffset?: number,\n  size?: number\n};\n\nexport type WriteTextureOptions = {\n  destination: Texture;\n  mipLevel?: number; //  = 0;\n  origin?: [number, number, number] | number[];\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\n  data: BufferSource;\n  // dataLayout;\n  offset: number;\n  bytesPerRow: number;\n  rowsPerImage: number;\n  size: [number, number, number] | number[];\n}\n\nexport type CopyBufferToBufferOptions = {\n  source: Buffer;\n  sourceOffset?: number;\n  destination: Buffer;\n  destinationOffset?: number;\n  size: number;\n};\n\nexport type CopyBufferToTextureOptions = {\n  source: Buffer;\n  byteOffset?: number;\n  destination: Texture;\n  mipLevel?: number //  = 0;\n  origin?: [number, number, number] | number[];\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\n  bytesPerRow: number;\n  rowsPerImage: number;\n  size: [number, number, number] | number[];\n};\n\nexport type CopyTextureToBufferOptions = {\n  /** Texture to copy to/from. */\n  source: Texture;\n  /**  Mip-map level of the texture to copy to/from. (Default 0) */\n  mipLevel?: number;\n  /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to/from.\n   * Together with `copySize`, defines the full copy sub-region.\n   */\n  /** Defines which aspects of the texture to copy to/from. */\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\n\n  /** Width to copy */\n  width?: number;\n  height?: number;\n  depthOrArrayLayers?: number;\n  origin?: number[];\n\n  /** Destination buffer */\n  destination: Buffer;\n  /** Offset, in bytes, from the beginning of the buffer to the start of the image data (default 0) */\n  byteOffset?: number;\n  /**\n   * The stride, in bytes, between the beginning of each block row and the subsequent block row.\n   * Required if there are multiple block rows (i.e. the copy height or depth is more than one block).\n   */\n  bytesPerRow?: number;\n  /**\n   * Number of block rows per single image of the texture.\n   * rowsPerImage &times; bytesPerRow is the stride, in bytes, between the beginning of each image of data and the subsequent image.\n   * Required if there are multiple images (i.e. the copy depth is more than one).\n   */\n  rowsPerImage?: number;\n};\n\nexport type CopyTextureToTextureOptions = {\n  /** Texture to copy to/from. */\n  source: Texture;\n  /**  Mip-map level of the texture to copy to/from. (Default 0) */\n  mipLevel?: number;\n  /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy from. */\n  /** Defines which aspects of the {@link GPUImageCopyTexture#texture} to copy to/from. */\n  aspect?: 'all' | 'stencil-only' | 'depth-only';\n\n  /** Texture to copy to/from. */\n  destination: Texture;\n  /**  Mip-map level of the texture to copy to/from. (Default 0) */\n  destinationMipLevel?: number;\n  /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to. */\n  destinationOrigin?: number[];\n  /** Defines which aspects of the {@link GPUImageCopyTexture#texture} to copy to/from. */\n  destinationAspect?: 'all' | 'stencil-only' | 'depth-only';\n\n  origin?: number[];\n  /** Width to copy */\n  width?: number;\n  height?: number;\n  depthOrArrayLayers?: number;\n};\n\n// interface Queue {\n//   submit(commandBuffers);\n\n//   // onSubmittedWorkDone(): Promise<undefined>;\n\n//   writeBuffer(options: WriteBufferOptions): void;\n//   writeTexture(options: WriteTextureOptions): void;\n\n//   // copyExternalImageToTexture(\n//   //   GPUImageCopyExternalImage source,\n//   //   GPUImageCopyTextureTagged destination,\n//   //   GPUExtent3D copySize\n//   // ): void;\n// }\n\nexport type CommandEncoderProps = ResourceProps & {\n  measureExecutionTime?: boolean;\n};\n\n/**\n * Encodes commands to queue that can be executed later\n */\nexport abstract class CommandEncoder extends Resource<CommandEncoderProps> {\n  static override defaultProps: Required<CommandEncoderProps> = {\n    ...Resource.defaultProps,\n    measureExecutionTime: undefined\n  };\n  \n  override get [Symbol.toStringTag](): string {\n    return 'CommandEncoder';\n  }\n\n  constructor(device: Device, props: CommandEncoderProps) {\n    super(device, props, CommandEncoder.defaultProps);\n  }\n  \n  abstract finish(): void; // TODO - return the CommandBuffer?\n\n  // beginRenderPass(GPURenderPassDescriptor descriptor): GPURenderPassEncoder;\n  // beginComputePass(optional GPUComputePassDescriptor descriptor = {}): GPUComputePassEncoder;\n  // finish(options?: {id?: string}): GPUCommandBuffer;\n\n  abstract copyBufferToBuffer(options: CopyBufferToBufferOptions): void;\n\n  abstract copyBufferToTexture(options: CopyBufferToTextureOptions): void;\n\n  abstract copyTextureToBuffer(options: CopyTextureToBufferOptions): void;\n\n  abstract copyTextureToTexture(options: CopyTextureToTextureOptions): void;\n\n  pushDebugGroup(groupLabel: string): void {}\n\n  popDebugGroup() {}\n\n  insertDebugMarker(markerLabel: string): void {}\n\n  // writeTimestamp(querySet: Query, queryIndex: number): void;\n\n  // resolveQuerySet(options: {\n  //   querySet: GPUQuerySet,\n  //   firstQuery: number,\n  //   queryCount: number,\n  //   destination: Buffer,\n  //   destinationOffset?: number;\n  // }): void;\n}\n"],"mappings":";SAEQA,QAAQ;AAAAC,mBAAA,GAoIAC,MAAM,CAACC,WAAW;AANlC,OAAO,MAAeC,cAAc,SAASJ,QAAQ,CAAsB;EAMzE,KAAAC,mBAAA,IAA4C;IAC1C,OAAO,gBAAgB;EACzB;EAEAI,WAAWA,CAACC,MAAc,EAAEC,KAA0B,EAAE;IACtD,KAAK,CAACD,MAAM,EAAEC,KAAK,EAAEH,cAAc,CAACI,YAAY,CAAC;EACnD;EAgBAC,cAAcA,CAACC,UAAkB,EAAQ,CAAC;EAE1CC,aAAaA,CAAA,EAAG,CAAC;EAEjBC,iBAAiBA,CAACC,WAAmB,EAAQ,CAAC;AAWhD;AA3CsBT,cAAc,CAClBI,YAAY,GAAkC;EAC5D,GAAGR,QAAQ,CAACQ,YAAY;EACxBM,oBAAoB,EAAEC;AACxB,CAAC"}