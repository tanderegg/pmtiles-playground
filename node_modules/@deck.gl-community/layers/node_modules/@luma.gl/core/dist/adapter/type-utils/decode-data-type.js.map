{"version":3,"file":"decode-data-type.js","names":["decodeVertexType","type","dataType","TYPE_MAP","bytes","getDataTypeBytes","normalized","includes","integer","startsWith","signed","byteLength","TYPE_SIZES","uint8","sint8","unorm8","snorm8","uint16","sint16","unorm16","snorm16","float16","float32","uint32","sint32"],"sources":["../../../src/adapter/type-utils/decode-data-type.ts"],"sourcesContent":["import {DataType, NormalizedDataType} from '../types/vertex-formats';\n\nexport type DecodedVertexType = {\n  /** WebGPU data type */\n  dataType: DataType,\n  /** Length in bytes of the data for one vertex */\n  byteLength: number;\n  /** Whether this is for integer or float vert */\n  integer: boolean;\n  /** Whether this data type is signed */\n  signed: boolean;\n  /** Whether this is a normalized integer (that must be used as float) */\n  normalized: boolean;\n};\n\n/** Decodes a vertex type, returning byte length and flags (integer, signed, normalized) */\nexport function decodeVertexType(type: NormalizedDataType): DecodedVertexType {\n  const dataType = TYPE_MAP[type];\n  const bytes = getDataTypeBytes(dataType);\n  const normalized: boolean = type.includes('norm');\n  const integer: boolean = !normalized && !type.startsWith('float');\n  const signed: boolean = type.startsWith('s');\n  return {\n    dataType: TYPE_MAP[type],\n    byteLength: bytes,\n    integer,\n    signed,\n    normalized\n  };\n}\n\nfunction getDataTypeBytes(type: DataType): number {\n  const bytes = TYPE_SIZES[type];\n  // assert(bytes);\n  return bytes;\n}\n\nconst TYPE_MAP: Record<NormalizedDataType, DataType> = {\n  uint8: 'uint8',\n  sint8: 'sint8',\n  unorm8: 'uint8',\n  snorm8: 'sint8',\n  uint16: 'uint16',\n  sint16: 'sint16',\n  unorm16: 'uint16',\n  snorm16: 'sint16',\n  float16: 'float16',\n  float32: 'float32',\n  uint32: 'uint32',\n  sint32: 'sint32'\n};\n\nconst TYPE_SIZES: Record<DataType, number> = {\n  uint8: 1,\n  sint8: 1,\n  uint16: 2,\n  sint16: 2,\n  float16: 2,\n  float32: 4,\n  uint32: 4,\n  sint32: 4\n};\n"],"mappings":"AAgBA,OAAO,SAASA,gBAAgBA,CAACC,IAAwB,EAAqB;EAC5E,MAAMC,QAAQ,GAAGC,QAAQ,CAACF,IAAI,CAAC;EAC/B,MAAMG,KAAK,GAAGC,gBAAgB,CAACH,QAAQ,CAAC;EACxC,MAAMI,UAAmB,GAAGL,IAAI,CAACM,QAAQ,CAAC,MAAM,CAAC;EACjD,MAAMC,OAAgB,GAAG,CAACF,UAAU,IAAI,CAACL,IAAI,CAACQ,UAAU,CAAC,OAAO,CAAC;EACjE,MAAMC,MAAe,GAAGT,IAAI,CAACQ,UAAU,CAAC,GAAG,CAAC;EAC5C,OAAO;IACLP,QAAQ,EAAEC,QAAQ,CAACF,IAAI,CAAC;IACxBU,UAAU,EAAEP,KAAK;IACjBI,OAAO;IACPE,MAAM;IACNJ;EACF,CAAC;AACH;AAEA,SAASD,gBAAgBA,CAACJ,IAAc,EAAU;EAChD,MAAMG,KAAK,GAAGQ,UAAU,CAACX,IAAI,CAAC;EAE9B,OAAOG,KAAK;AACd;AAEA,MAAMD,QAA8C,GAAG;EACrDU,KAAK,EAAE,OAAO;EACdC,KAAK,EAAE,OAAO;EACdC,MAAM,EAAE,OAAO;EACfC,MAAM,EAAE,OAAO;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,OAAO,EAAE,QAAQ;EACjBC,OAAO,EAAE,QAAQ;EACjBC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE,SAAS;EAClBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE;AACV,CAAC;AAED,MAAMZ,UAAoC,GAAG;EAC3CC,KAAK,EAAE,CAAC;EACRC,KAAK,EAAE,CAAC;EACRG,MAAM,EAAE,CAAC;EACTC,MAAM,EAAE,CAAC;EACTG,OAAO,EAAE,CAAC;EACVC,OAAO,EAAE,CAAC;EACVC,MAAM,EAAE,CAAC;EACTC,MAAM,EAAE;AACV,CAAC"}