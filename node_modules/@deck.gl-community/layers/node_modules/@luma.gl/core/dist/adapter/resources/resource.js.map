{"version":3,"file":"resource.js","names":["uid","Resource","constructor","device","props","defaultProps","id","userData","_device","destroyed","allocatedBytes","_attachedResources","Set","Error","selectivelyMerge","Symbol","toStringTag","addStats","destroy","destroyResource","delete","toString","name","getProps","attachResource","resource","add","detachResource","destroyAttachedResource","destroyAttachedResources","Object","values","removeStats","stats","statsManager","getStats","get","decrementCount","trackAllocatedMemory","bytes","arguments","length","undefined","addCount","trackDeallocatedMemory","subtractCount","incrementCount","handle","mergedProps","key"],"sources":["../../../src/adapter/resources/resource.ts"],"sourcesContent":["// luma.gl, MIT license\nimport type {Device} from '../device';\nimport {uid} from '../../utils/utils';\n\nexport type ResourceProps = {\n  /** Name of resource, mainly for debugging purposes. A unique name will be assigned if not provided */\n  id?: string;\n  /** Handle for the underlying resources (WebGL object or WebGPU handle) */\n  handle?: any;\n  /** User provided data stored on this resource  */\n  userData?: {[key: string]: any};\n}\n\n/**\n * Base class for GPU (WebGPU/WebGL) Resources\n */\nexport abstract class Resource<Props extends ResourceProps> {\n  /** Default properties for resource */\n  static defaultProps: Required<ResourceProps> = {\n    id: 'undefined',\n    handle: undefined,\n    userData: undefined,\n  };\n  \n  abstract get [Symbol.toStringTag](): string;\n\n  /** props.id, for debugging. */\n  id: string;\n  readonly props: Required<Props>;\n  readonly userData: Record<string, unknown> = {};\n  abstract readonly device: Device;\n  private _device: Device;\n\n  /** Whether this resource has been destroyed */\n  destroyed: boolean = false;\n  /** For resources that allocate GPU memory */\n  private allocatedBytes: number = 0;\n  /** Attached resources will be destroyed when this resource is destroyed. Tracks auto-created \"sub\" resources. */\n  private _attachedResources = new Set<Resource<unknown>>();\n\n\n  /**\n   * Create a new Resource. Called from Subclass\n   */\n  constructor(device: Device, props: Props, defaultProps: Required<Props>) {\n    if (!device) {\n      throw new Error('no device');\n    }\n    this._device = device;\n    this.props = selectivelyMerge<Props>(props, defaultProps);\n\n    const id = this.props.id !== 'undefined' ? this.props.id as string : uid(this[Symbol.toStringTag]);\n    this.props.id = id;\n    this.id = id;\n    this.userData = this.props.userData || {};\n\n    this.addStats();\n  }\n\n  /**\n   * destroy can be called on any resource to release it before it is garbage collected.\n   */\n  destroy(): void {\n    this.destroyResource();\n  }\n\n  /** @deprecated Use destroy() */\n  delete(): this {\n    this.destroy();\n    return this;\n  }\n\n  toString(): string {\n    return `${this[Symbol.toStringTag] || this.constructor.name}(${this.id})`;\n  }\n\n  /**\n   * Combines a map of user props and default props, only including props from defaultProps\n   * @returns returns a map of overridden default props\n   */\n  getProps(): object {\n    return this.props;\n  }\n\n  // ATTACHED RESOURCES\n\n  /** \n   * Attaches a resource. Attached resources are auto destroyed when this resource is destroyed\n   * Called automatically when sub resources are auto created but can be called by application\n   */\n  attachResource(resource: Resource<unknown>): void {\n    this._attachedResources.add(resource);\n  }\n\n  /** \n   * Detach an attached resource. The resource will no longer be auto-destroyed when this resource is destroyed.\n   */\n  detachResource(resource: Resource<unknown>): void {\n    this._attachedResources.delete(resource);\n  }\n  \n  /** \n   * Destroys a resource (only if owned), and removes from the owned (auto-destroy) list for this resource.\n   */\n  destroyAttachedResource(resource: Resource<unknown>): void {\n    if (this._attachedResources.delete(resource)) {\n      resource.destroy();\n    }\n  }\n\n  /** Destroy all owned resources. Make sure the resources are no longer needed before calling. */\n  destroyAttachedResources(): void {\n    for (const resource of Object.values(this._attachedResources)) {\n      resource.destroy();\n    }\n    // don't remove while we are iterating\n    this._attachedResources = new Set<Resource<unknown>>();\n  }\n\n  // PROTECTED METHODS\n\n  /** Perform all destroy steps. Can be called by derived resources when overriding destroy() */\n  protected destroyResource(): void {\n    this.destroyAttachedResources();\n    this.removeStats();\n    this.destroyed = true;\n  }\n\n  /** Called by .destroy() to track object destruction. Subclass must call if overriding destroy() */\n  protected removeStats(): void {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    const name = this[Symbol.toStringTag];\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  /** Called by subclass to track memory allocations */\n  protected trackAllocatedMemory(bytes: number, name = this[Symbol.toStringTag]): void {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n    this.allocatedBytes = bytes;\n  }\n\n  /** Called by subclass to track memory deallocations */\n  protected trackDeallocatedMemory(name = this[Symbol.toStringTag]): void {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    stats.get('GPU Memory').subtractCount(this.allocatedBytes);\n    stats.get(`${name} Memory`).subtractCount(this.allocatedBytes);\n    this.allocatedBytes = 0;\n  }\n\n  /** Called by resource constructor to track object creation */\n  private addStats(): void {\n    const stats = this._device.statsManager.getStats('Resource Counts');\n    const name = this[Symbol.toStringTag];\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n}\n\n/**\n * Combines a map of user props and default props, only including props from defaultProps\n * @param props\n * @param defaultProps\n * @returns returns a map of overridden default props\n */\nfunction selectivelyMerge<Props>(props: Props, defaultProps: Required<Props>): Required<Props> {\n  const mergedProps = {...defaultProps};\n  for (const key in props) {\n    if (props[key] !== undefined) {\n      mergedProps[key] = props[key];\n    }\n  }\n  return mergedProps;\n}\n"],"mappings":"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"}