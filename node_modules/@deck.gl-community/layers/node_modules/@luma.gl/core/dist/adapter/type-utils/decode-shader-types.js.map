{"version":3,"file":"decode-shader-types.js","names":["assert","UNIFORM_FORMATS","type","components","decodeShaderUniformType","format","decoded","alignTo","size","count"],"sources":["../../../src/adapter/type-utils/decode-shader-types.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {assert} from '../../utils/assert';\nimport {ShaderUniformType, ShaderDataType} from '../types/shader-types';\n\nconst UNIFORM_FORMATS: Record<ShaderUniformType, {type: ShaderDataType, components: number}> = {\n  'f32': {type: 'f32', components: 1},\n  'i32': {type: 'i32', components: 1},\n  'u32': {type: 'u32', components: 1},\n  // 'bool-webgl': {type: 'bool-webgl', components: 1},\n  'vec2<f32>': {type: 'f32', components: 2},\n  'vec3<f32>': {type: 'f32', components: 3},\n  'vec4<f32>': {type: 'f32', components: 4},\n  'vec2<i32>': {type: 'i32', components: 2},\n  'vec3<i32>': {type: 'i32', components: 3},\n  'vec4<i32>': {type: 'i32', components: 4},\n  'vec2<u32>': {type: 'u32', components: 2},\n  'vec3<u32>': {type: 'u32', components: 3},\n  'vec4<u32>': {type: 'u32', components: 4},\n  'mat2x2<f32>': {type: 'f32', components: 4},\n  'mat2x3<f32>': {type: 'f32', components: 6},\n  'mat2x4<f32>': {type: 'f32', components: 8},\n  'mat3x2<f32>': {type: 'f32', components: 6},\n  'mat3x3<f32>': {type: 'f32', components: 9},\n  'mat3x4<f32>': {type: 'f32', components: 12},\n  'mat4x2<f32>': {type: 'f32', components: 8},\n  'mat4x3<f32>': {type: 'f32', components: 12},\n  'mat4x4<f32>': {type: 'f32', components: 16},\n};\n\n/** Split a uniform type string into type and components */\nexport function decodeShaderUniformType(format: ShaderUniformType): {type: ShaderDataType, components: number} {\n  const decoded = UNIFORM_FORMATS[format];\n  assert(format);\n  return decoded;\n} \n\n/** Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes) */\nexport function alignTo(size: number, count: number): number {\n  // prettier-ignore\n  switch (count) {\n    case 1: return size; // Pad upwards to even multiple of 2\n    case 2: return size + (size % 2); // Pad upwards to even multiple of 2\n    default: return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4\n  }\n}\n\n"],"mappings":"SAGQA,MAAM;AAGd,MAAMC,eAAsF,GAAG;EAC7F,KAAK,EAAE;IAACC,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACnC,KAAK,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACnC,KAAK,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EAEnC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,WAAW,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EACzC,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EAC3C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EAC3C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EAC3C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EAC3C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EAC3C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAE,CAAC;EAC5C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAC,CAAC;EAC3C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAE,CAAC;EAC5C,aAAa,EAAE;IAACD,IAAI,EAAE,KAAK;IAAEC,UAAU,EAAE;EAAE;AAC7C,CAAC;AAGD,OAAO,SAASC,uBAAuBA,CAACC,MAAyB,EAA8C;EAC7G,MAAMC,OAAO,GAAGL,eAAe,CAACI,MAAM,CAAC;EACvCL,MAAM,CAACK,MAAM,CAAC;EACd,OAAOC,OAAO;AAChB;AAGA,OAAO,SAASC,OAAOA,CAACC,IAAY,EAAEC,KAAa,EAAU;EAE3D,QAAQA,KAAK;IACX,KAAK,CAAC;MAAE,OAAOD,IAAI;IACnB,KAAK,CAAC;MAAE,OAAOA,IAAI,GAAIA,IAAI,GAAG,CAAE;IAChC;MAAS,OAAOA,IAAI,GAAI,CAAC,CAAC,GAAIA,IAAI,GAAG,CAAE,IAAI,CAAE;EAC/C;AACF"}