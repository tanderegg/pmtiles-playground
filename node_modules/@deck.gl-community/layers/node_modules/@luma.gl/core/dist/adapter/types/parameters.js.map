{"version":3,"file":"parameters.js","names":["DEFAULT_PARAMETERS","cullMode","frontFace","depthWriteEnabled","depthCompare","depthFormat","depthClamp","depthBias","depthBiasSlopeScale","depthBiasClamp","stencilReadMask","stencilWriteMask","stencilCompare","stencilPassOperation","stencilFailOperation","stencilDepthFailOperation","sampleCount","sampleMask","sampleAlphaToCoverageEnabled","blendColorOperation","blendColorSrcFactor","blendColorDstFactor","blendAlphaOperation","blendAlphaSrcFactor","blendAlphaDstFactor","colorMask"],"sources":["../../../src/adapter/types/parameters.ts"],"sourcesContent":["import {DepthStencilTextureFormat} from './texture-formats';\n\nexport type CompareFunction =\n  'never' |\n  'less' |\n  'equal' |\n  'less-equal' |\n  'greater' |\n  'not-equal' |\n  'greater-equal' |\n  'always';\n\n// Primitive state\n\nexport type PrimitiveTopology =\n  'point-list' |\n  'line-list' |\n  'line-strip' |\n  /** @deprecated */\n  'line-loop-webgl' |\n  'triangle-list' |\n  'triangle-strip' |\n  /** @deprecated */\n  'triangle-fan-webgl';\n\nexport type IndexFormat = 'uint16' | 'uint32';\n\nexport type CullMode = 'none' | 'front' | 'back';\nexport type FrontFace = 'ccw' | 'cw';\n\n// Rasterization Parameters\n\ntype _RenderParameters = {\n  /** Defines which polygon orientation will be culled, if any. Only applies to triangle topologies/ */\n  cullMode?: CullMode;\n  /** Defines which polygons are considered front-facing. Only applies to triangle topologies. Default to \"ccw\" */\n  frontFace?: FrontFace;\n  /** TBD */\n  depthClamp?: boolean;\n  /** Constant depth bias (polygon offset) added to each fragment. */\n  depthBias?: number;\n  /** Depth bias (polygon offset) that scales with the fragment’s slope. */\n  depthBiasSlopeScale?: number;\n  /** Maximum depth bias of a fragment. */\n  depthBiasClamp?: number;\n}\n\nexport type RasterizationParameters = _RenderParameters & {\n  /** The type of primitive to be constructed from the vertex inputs. Defaults to \"triangle-list\". */\n  topology?: PrimitiveTopology;\n  /** For pipelines with strip topologies (\"line-strip\" or \"triangle-strip\"), this determines the index buffer format and primitive restart value (\"uint16\"/0xFFFF or \"uint32\"/0xFFFFFFFF). It is not allowed on pipelines with non-strip topologies. */\n  stripIndexFormat?: IndexFormat; // WebGPU only\n}\n\n// Depth Stencil Parameters\n\n/** Types of operations that can be performed on stencil buffers when various tests pass */\nexport type StencilOperation =\n  'keep' |\n  'zero' |\n  'replace' |\n  'invert' |\n  'increment-clamp' |\n  'decrement-clamp' |\n  'increment-wrap' |\n  'decrement-wrap';\n\nexport type DepthStencilParameters = {\n  /** Whether this GPURenderPipeline can modify depthStencilAttachment depth values. */\n  depthWriteEnabled?: boolean;\n  /** The comparison operation used to test fragment depths against existing depthStencilAttachment depth values. */\n  depthCompare?: CompareFunction;\n  /** The format of depthStencilAttachment this GPURenderPipeline will be compatible with. */\n  depthFormat?: DepthStencilTextureFormat;\n\n  /** Bitmask controlling which depthStencilAttachment stencil value bits are read when performing stencil comparison tests. */\n  stencilReadMask?: number;\n  /** Bitmask controlling which depthStencilAttachment stencil value bits are written to when performing stencil operations. */\n  stencilWriteMask?: number;\n\n  /** The CompareFunction used when testing fragments against depthStencilAttachment stencil values. */\n  stencilCompare?: CompareFunction;\n  /** The StencilOperation performed if the fragment stencil comparison test described by compare fails. */\n  stencilPassOperation?: StencilOperation;\n  /** The GPUStencilOperation performed if the fragment depth comparison described by depthCompare fails. */\n  stencilFailOperation?: StencilOperation;\n  /** The GPUStencilOperation performed if the fragment stencil comparison test described by compare passes. */\n  stencilDepthFailOperation?: StencilOperation;\n}\n\n// Color Parameters\n\n/** BlendFactor defines how either a source or destination blend factors is calculated */\nexport type BlendFactor =\n  'zero' |\n  'one' |\n  'src-color' |\n  'one-minus-src-color' |\n  'src-alpha' |\n  'one-minus-src-alpha' |\n  'dst-color' |\n  'one-minus-dst-color' |\n  'dst-alpha' |\n  'one-minus-dst-alpha' |\n  'src-alpha-saturated' |\n  'blend-color' |\n  'one-minus-blend-color';\n\n/** BlendOperation defines the algorithm used to combine source and destination blend factors: */\nexport type BlendOperation =\n  'add' |\n  'subtract' |\n  'reverse-subtract' |\n  'min' |\n  'max';\n\n/*\nexport const ColorWrite = {\n  RED: 0x1,\n  GREEN: 0x2,\n  BLUE: 0x4,\n  ALPHA: 0x8,\n  ALL: 0xF\n};\n\nblend: {\n  color: {operation, srcFactor, dstFactor}\n  alpha: {operation, srcFactor, dstFactor}\n}\ncolorWriteMask\n\nrgba\nrgb\nrga\nrba\ngba\nrg\nrb\nra\ngb\nga\nba\nr\ng\nb\na\nnone\n*/\n\n/* Color parameters are set on the RenderPipeline */\nexport type ColorParameters = {\n  /** Defines the operation used to calculate the values written to the target attachment components. */\n  blendColorOperation?: BlendOperation;\n  /** Defines the operation to be performed on values from the fragment shader. */\n  blendColorSrcFactor?: BlendFactor;\n  /** Defines the operation to be performed on values from the target attachment. */\n  blendColorDstFactor?: BlendFactor;\n\n  /** Defines the operation used to calculate the values written to the target attachment components. */\n  blendAlphaOperation?: BlendOperation;\n  /** Defines the operation to be performed on values from the fragment shader. */\n  blendAlphaSrcFactor?: BlendFactor;\n  /** Defines the operation to be performed on values from the target attachment. */\n  blendAlphaDstFactor?: BlendFactor;\n\n  /** Bitmask controlling which channels are are written to when drawing to this color target. defaulting to 0xF */\n  colorMask?: number;\n}\n\n/** Multisample */\nexport type MultisampleParameters = {\n  /** Number of samples per pixel. RenderPipeline will be compatible only with attachment textures with matching sampleCounts. */\n  sampleCount?: number; //  = 1;\n  /** Mask determining which samples are written to. defaulting to 0xFFFFFFFF */\n  sampleMask?: number; \n  /** When true indicates that a fragment’s alpha channel should be used to generate a sample coverage mask. */\n  sampleAlphaToCoverageEnabled?: boolean; //  = false;\n};\n\n/** These parameters are set on the render pass and are thus easy to change frequently */\nexport type RenderPassParameters = {\n  /** Linear map from normalized device coordinates to viewport coordinates [x, y, width, height, minDepth, maxDepth] */\n  viewport?: number[]; \n  /** Sets scissor rectangle used during rasterization. Discards fragments outside viewport coords [x, y, width, height]. */\n  scissorRect?: number[]; // ;\n  /** Sets constant blend color and alpha values used with \"constant\" and \"one-minus-constant\" blend factors. */\n  blendConstant?: number[]; // GPUColor\n  /** Stencil operation \"replace\" sets the value to stencilReference */\n  stencilReference?: number; // GPUStencilValue\n};\n\nexport type RenderPipelineParameters =\n  RasterizationParameters &\n  DepthStencilParameters &\n  ColorParameters &\n  MultisampleParameters;\n\nexport type Parameters =\n  _RenderParameters &\n  DepthStencilParameters &\n  ColorParameters &\n  MultisampleParameters;\n\n// export const DEFAULT_PARAMETERS: Parameters;\n\nexport const DEFAULT_PARAMETERS: Required<Parameters> = {\n\n  // Rasterization Parameters\n\n  cullMode: 'none',\n  frontFace: 'ccw',\n\n  // Depth Parameters\n\n  depthWriteEnabled: false,\n  depthCompare: 'always',\n  depthFormat: 'depth24plus',\n\n  depthClamp: false,\n  depthBias: 0,\n  depthBiasSlopeScale: 0,\n  depthBiasClamp: 0,\n\n  // Stencil parameters\n\n  stencilReadMask: 0xFFFFFFFF,\n  stencilWriteMask: 0xFFFFFFFF,\n\n  stencilCompare: 'always',\n  stencilPassOperation: 'keep',\n  stencilFailOperation: 'keep',\n  stencilDepthFailOperation: 'keep',\n\n  // Multisample parameters\n  sampleCount: 0,\n  sampleMask: 0xFFFFFFFF,\n  sampleAlphaToCoverageEnabled: false,\n\n  // Color and blend parameters\n\n  blendColorOperation: 'add',\n  blendColorSrcFactor: 'one',\n  blendColorDstFactor: 'zero',\n\n  blendAlphaOperation: 'add',\n  blendAlphaSrcFactor: 'one',\n  blendAlphaDstFactor: 'zero',\n\n  colorMask: 0xF\n};\n"],"mappings":"AA6MA,OAAO,MAAMA,kBAAwC,GAAG;EAItDC,QAAQ,EAAE,MAAM;EAChBC,SAAS,EAAE,KAAK;EAIhBC,iBAAiB,EAAE,KAAK;EACxBC,YAAY,EAAE,QAAQ;EACtBC,WAAW,EAAE,aAAa;EAE1BC,UAAU,EAAE,KAAK;EACjBC,SAAS,EAAE,CAAC;EACZC,mBAAmB,EAAE,CAAC;EACtBC,cAAc,EAAE,CAAC;EAIjBC,eAAe,EAAE,UAAU;EAC3BC,gBAAgB,EAAE,UAAU;EAE5BC,cAAc,EAAE,QAAQ;EACxBC,oBAAoB,EAAE,MAAM;EAC5BC,oBAAoB,EAAE,MAAM;EAC5BC,yBAAyB,EAAE,MAAM;EAGjCC,WAAW,EAAE,CAAC;EACdC,UAAU,EAAE,UAAU;EACtBC,4BAA4B,EAAE,KAAK;EAInCC,mBAAmB,EAAE,KAAK;EAC1BC,mBAAmB,EAAE,KAAK;EAC1BC,mBAAmB,EAAE,MAAM;EAE3BC,mBAAmB,EAAE,KAAK;EAC1BC,mBAAmB,EAAE,KAAK;EAC1BC,mBAAmB,EAAE,MAAM;EAE3BC,SAAS,EAAE;AACb,CAAC"}