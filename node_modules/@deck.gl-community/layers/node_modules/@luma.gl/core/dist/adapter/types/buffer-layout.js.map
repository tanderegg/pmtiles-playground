{"version":3,"file":"buffer-layout.js","names":[],"sources":["../../../src/adapter/types/buffer-layout.ts"],"sourcesContent":["import type {VertexFormat} from './vertex-formats';\n\n/** \n * Provides specific details about the memory layout of the actual buffers \n * that will be provided to a `RenderPipeline`.\n *  \n * BufferLayout lets the application describe whether\n * - A single buffer can be used for multiple attributes (using interleaving or offsets), \n * - The data format of the memory being supplied to a specific shader attribute.\n * \n * `BufferLayout` complements the \"static\" attribute declarations in a ShaderLayout \n * with information about the \"dynamic\" memory layout of each buffer that will be bound \n * to the render pipeline.\n */\n\n/** \n * Specify memory layout for one buffer, describing how it is used by one or more attribute\n * @note Specifies format, stride, offset and step mode\n * @note The buffer can be set using the buffer name:`.setAttributes({[bufferName]: buffer})`.\n * @note Needs to match type/components of the ShaderLayout ('f32', 'i32', 's32')\n *\n * A buffer layout is used to specify \"non-standard\" buffer layouts (buffers with offsets, interleaved buffers etc)\n *\n * @example\n * ```\n  device.createRenderPipeline({\n    ...\n    shaderLayout,\n    bufferLayout: [\n      {name: 'positions', stepMode: 'vertex', format: 'float32x3'},\n      // interleaved bindings, auto offset\n      {name: 'particles', stepMode: 'instance', byteStride: 32, attributes: [\n        {name: 'instancePositions', format: 'float32x4', byteOffset: 0},\n        {name: 'instanceVelocities', format: 'float32x4', byteOffset: 16}\n      ]},\n    ]\n  ];\n  ```\n  */\nexport type BufferLayout = {\n  /** Name of buffer */\n  name: string;\n  /** Is the attribute is instanced. Default: auto-deduced from shader name. */\n  stepMode?: 'vertex' | 'instance';\n  /** bytes between successive elements. If omitted, stride is set to reflect a \"packed\" buffer */\n  byteStride?: number;\n  /** Option 1: interleaved attributes that read from this buffer */\n  attributes?: BufferAttributeLayout[];\n  /** Option 2: Single attribute with same name as buffer. */\n  format?: VertexFormat;\n};\n\n/** Specifies how the GPU should read one specific attribute from a buffer.  */\nexport type BufferAttributeLayout = {\n  /** Name of attribute that maps to a \"view\" of this buffer */\n  attribute: string;\n  /** Data format of the memory in the buffer that is mapped to this attribute */\n  format: VertexFormat;\n  /** Sum up any the \"global\" offset (or 0) and the offset each stride (for interleaved data). */\n  byteOffset: number;\n};\n\n"],"mappings":""}