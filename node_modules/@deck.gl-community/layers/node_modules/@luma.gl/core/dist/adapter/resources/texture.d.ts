/// <reference types="node" />
import type { Device } from '../device';
import type { TypedArray } from '../../types';
import type { TextureFormat } from '../types/texture-formats';
import { Resource, ResourceProps } from './resource';
import { Sampler, SamplerProps } from './sampler';
/** Data types that can be used to initialize textures */
export type TextureData = TypedArray | ArrayBuffer | Buffer | ImageBitmap | HTMLImageElement;
export type CubeTextureData = Record<string, TextureData> | Record<string, Promise<TextureData>>;
export type ExternalTextureData = HTMLVideoElement;
/** Abstract Texture interface */
export type TextureProps = ResourceProps & {
    format?: TextureFormat;
    dimension?: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';
    width?: number | undefined;
    height?: number | undefined;
    depth?: number;
    usage?: number;
    data?: TextureData | Promise<TextureData> | CubeTextureData | string | HTMLVideoElement | null;
    mipmaps?: boolean;
    sampler?: Sampler | SamplerProps;
    mipLevels?: number;
    samples?: number;
    type?: number;
    compressed?: boolean;
};
export type WebGPUTextureProps = ResourceProps & {
    width: number;
    height: number;
    depth?: number;
    mipLevels?: number;
    format?: string;
};
export type TextureViewProps = {
    format: string;
    dimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';
    aspect?: 'all' | 'stencil-only' | 'depth-only';
    arrayLayerCount: number;
    baseArrayLayer?: number;
    mipLevels?: number;
    baseMipLevel?: number;
};
/**
 * @deprecated
 * @todo remove, are these even used anymore?
 */
export type DeprecatedWebGLTextureProps = {
    /** @deprecated use props.sampler */
    parameters?: Record<number, number>;
    /** @deprecated use props.data */
    pixels?: any;
    /** @deprecated use props.format */
    dataFormat?: number | null;
    /** @deprecated rarely supported */
    border?: number;
    /** @deprecated WebGL only. */
    pixelStore?: object;
    /** @deprecated WebGL only. */
    textureUnit?: number;
    /** @deprecated WebGL only. Use dimension. */
    target?: number;
};
/**
 * Abstract Texture interface
 * Texture Object
 * https://gpuweb.github.io/gpuweb/#gputexture
 */
export declare abstract class Texture<Props extends TextureProps = TextureProps> extends Resource<Props> {
    static defaultProps: Required<TextureProps>;
    static COPY_SRC: number;
    static COPY_DST: number;
    static TEXTURE_BINDING: number;
    static STORAGE_BINDING: number;
    static RENDER_ATTACHMENT: number;
    get [Symbol.toStringTag](): string;
    /** dimension of this texture */
    readonly dimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';
    /** format of this texture */
    readonly format: TextureFormat;
    /** width in pixels of this texture */
    width: number;
    /** height in pixels of this texture */
    height: number;
    /** depth of this texture */
    readonly depth: number;
    /** Default sampler for this texture */
    abstract sampler: Sampler;
    constructor(device: Device, props: Props, defaultProps?: Required<Props>);
}
//# sourceMappingURL=texture.d.ts.map