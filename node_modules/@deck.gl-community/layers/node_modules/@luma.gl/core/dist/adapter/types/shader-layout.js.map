{"version":3,"file":"shader-layout.js","names":[],"sources":["../../../src/adapter/types/shader-layout.ts"],"sourcesContent":["// luma.gl, MIT license\nimport type {TextureFormat} from '../types/texture-formats';\nimport type {ShaderUniformType, ShaderAttributeType} from './shader-types';\nimport {AccessorObject} from '../types/accessor';\nimport type {Buffer} from '../resources/buffer';\nimport type {Sampler} from '../resources/sampler';\nimport type {Texture} from '../resources/texture';\n\n/**\n * Describes all shader binding points for a `RenderPipeline` or `ComputePipeline`\n * A ShaderLayout describes the static structure of a shader pipeline.\n * It also allows the numeric locations in the shader to accessed with the same variable names\n * used in the shader.\n * @note A ShaderLayout needs to be complemented by a BufferLayout that describes \n * the actual memory layout of the buffers that will be used with the pipeline.\n * \n * @example\n * ```\n  device.createRenderPipeline({\n    shaderLayout: [\n      attributes: [\n        {name: 'instancePositions', location: 0, format: 'vec3<f32>', stepMode: 'instance'},\n        {name: 'instanceVelocities', location: 1, format: 'vec3<f32>', stepMode: 'instance'},\n        {name: 'vertexPositions', location: 2, format: 'vec3<f32>', stepMode: 'vertex'}\n      ],\n      bindings: [...]\n    ]\n  })\n * ```\n */\nexport type ShaderLayout = {\n  /** All attributes, their locations, and basic type information. Also an auto-deduced step mode */\n  attributes: AttributeDeclaration[];\n  /** All bidning points (textures, samplers, uniform buffers) with their locations and type */\n  bindings: BindingDeclaration[];\n  /** WebGL only (WebGPU use bindings and uniform buffers) */\n  uniforms?: any[];\n  /** WebGL2 only (WebGPU use compute shaders) */\n  varyings?: VaryingBinding[];\n};\n\n/**\n * Declares one for attributes\n */\nexport type AttributeDeclaration = {\n  /** The name of this attribute in the shader */\n  name: string;\n  /** The index into the GPU's vertex array buffer bank (usually between 0-15) */\n  location: number;\n  /** WebGPU-style shader type. The declared format of the attribute in the shader code. Buffer's vertex format needs to map to this. */\n  type: ShaderAttributeType;\n  /** Inferred from attribute name. @note Technically not part of static structure of shader */\n  stepMode?: 'vertex' | 'instance';\n};\n\n// BINDING LAYOUTS\n\n/*\ntype Binding = {\n  binding: number;\n  visibility: number;\n\n  buffer?: {\n    type?: 'uniform' | 'storage' | 'read-only-storage';\n    hasDynamicOffset?: false;\n    minBindingSize?: number;\n  };\n\n  // type = sampler\n  samplerType?: 'filtering' | 'non-filtering' | 'comparison';\n\n  // type = texture\n  viewDimension?: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  sampleType?: 'float' | 'unfilterable-float' | 'depth' | 'sint' | 'uint';\n  multisampled?: boolean;\n\n  // type = storage\n  viewDimension?: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  access: 'read-only' | 'write-only';\n  format: string;\n};\n*/\n\n/** ShaderLayout for bindings */\nexport type BindingDeclaration =\n  | UniformBufferBindingLayout\n  | BufferBindingLayout\n  | TextureBindingLayout\n  | SamplerBindingLayout\n  | StorageTextureBindingLayout;\n\nexport type UniformBufferBindingLayout = {\n  type: 'uniform';\n  name: string;\n  location: number;\n  visibility?: number;\n  hasDynamicOffset?: boolean;\n  minBindingSize?: number;\n  uniforms?: UniformInfo[];\n};\n\nexport type UniformInfo = {\n  name: string;\n  format: ShaderUniformType;\n  type?: string;\n  arrayLength: number;\n  byteOffset: number;\n  byteStride: number;\n};\n\nexport type BufferBindingLayout = {\n  type: 'uniform' | 'storage' | 'read-only-storage';\n  name: string;\n  location: number;\n  visibility?: number;\n  hasDynamicOffset?: boolean;\n  minBindingSize?: number;\n};\n\ntype TextureBindingLayout = {\n  type: 'texture';\n  name: string;\n  location: number;\n  visibility?: number;\n  viewDimension?: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d'; // default: '2d'\n  sampleType?: 'float' | 'unfilterable-float' | 'depth' | 'sint' | 'uint'; // default: 'float'\n  multisampled?: boolean;\n};\n\ntype SamplerBindingLayout = {\n  type: 'sampler';\n  name: string;\n  location: number;\n  visibility?: number;\n  samplerType?: 'filtering' | 'non-filtering' | 'comparison'; // default: filtering\n};\n\ntype StorageTextureBindingLayout = {\n  type: 'storage';\n  name: string;\n  location: number;\n  visibility?: number;\n  access?: 'write-only';\n  format: TextureFormat;\n  viewDimension?: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n};\n\n// BINDINGS\n\n/** Binding value */\nexport type Binding = Texture | Sampler | Buffer | {buffer: Buffer; offset?: number; size?: number};\n\n// SHADER LAYOUTS\n\n/**\n * Describes a varying binding for a program\n * @deprecated Varyings are WebGL-only\n */\nexport type VaryingBinding = {\n  location: number;\n  name: string;\n  accessor: AccessorObject;\n};\n\n// Uniform bindings\n\n/** Describes a uniform block binding for a program */\nexport type UniformBlockBinding = {\n  location: number;\n  name: string;\n  byteLength: number;\n  vertex: boolean;\n  fragment: boolean;\n  uniformCount: number;\n  uniformIndices?: number[];\n  uniforms: UniformInfo[];\n};\n\n/** Describes a uniform (sampler etc) binding for a program */\nexport type UniformBinding = {\n  location: number;\n  name: string;\n  size: number;\n  type: number;\n  isArray: boolean;\n};\n\n/** @deprecated */\nexport type AttributeBinding = {\n  name: string;\n  location: number;\n  accessor: AccessorObject;\n};\n"],"mappings":""}