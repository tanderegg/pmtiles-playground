{"version":3,"file":"buffer.js","names":["Resource","_Symbol$toStringTag","Symbol","toStringTag","Buffer","constructor","device","props","deducedProps","usage","INDEX","indexType","data","Uint32Array","Uint16Array","defaultProps","byteLength","debugData","ArrayBuffer","readSyncWebGL2","byteOffset","Error","_setDebugData","buffer","isView","debugDataLength","Math","min","DEBUG_DATA_MAX_LENGTH","slice","mappedAtCreation","MAP_READ","MAP_WRITE","COPY_SRC","COPY_DST","VERTEX","UNIFORM","STORAGE","INDIRECT","QUERY_RESOLVE"],"sources":["../../../src/adapter/resources/buffer.ts"],"sourcesContent":["// luma.gl, MIT license\n\nimport type {Device} from '../device';\nimport {Resource, ResourceProps} from './resource';\n\nexport type BufferProps = ResourceProps & {\n  /** Supply a handle to connect to an existing device-specific buffer */\n  handle?: WebGLBuffer;\n  /** Specifies how this buffer can be used */\n  usage?: number;\n  /** Length in bytes of memory to be allocated. If not specified, `byteLength` of  `props.data` will be used. */\n  byteLength?: number;\n  /** Data to initialize the buffer with. */\n  data?: ArrayBuffer | ArrayBufferView | null;\n  /** Byte offset into the newly created Buffer to store data at */\n  byteOffset?: number;\n  /** If props.usage includes Buffer.INDEX */\n  indexType?: 'uint16' | 'uint32';\n\n  // TBD\n  mappedAtCreation?: boolean;\n}\n\n/** Abstract GPU buffer */\nexport abstract class Buffer extends Resource<BufferProps> {\n  static override defaultProps: Required<BufferProps> = {\n    ...Resource.defaultProps,\n    usage: 0, // Buffer.COPY_DST | Buffer.COPY_SRC\n    byteLength: 0,\n    byteOffset: 0,\n    data: null,\n    indexType: 'uint16',\n    mappedAtCreation: false\n  };\n\n  // Usage Flags\n  static MAP_READ = 0x01;\n  static MAP_WRITE = 0x02;\n  static COPY_SRC = 0x0004;\n  static COPY_DST = 0x0008;\n  /** Index buffer */\n  static INDEX = 0x0010;\n  /** Vertex buffer */\n  static VERTEX = 0x0020;\n  /** Uniform buffer */\n  static UNIFORM = 0x0040;\n  /** Storage buffer */\n  static STORAGE = 0x0080;\n  static INDIRECT = 0x0100;\n  static QUERY_RESOLVE = 0x0200;\n\n  override get [Symbol.toStringTag](): string { return 'Buffer'; }\n\n  /** The usage with which this buffer was created */\n  readonly usage: number;\n  /** For index buffers, whether indices are 16 or 32 bit */\n  readonly indexType?: 'uint16' | 'uint32';\n  /** Length of buffer in bytes */\n  abstract byteLength: number;\n\n  constructor(device: Device, props: BufferProps) {\n    const deducedProps = {...props};\n\n    // Deduce indexType\n    if ((props.usage || 0) & Buffer.INDEX && !props.indexType) {\n      if (props.data instanceof Uint32Array) {\n        deducedProps.indexType = 'uint32';\n      } else if (props.data instanceof Uint16Array) {\n        deducedProps.indexType = 'uint16';\n      }\n    }\n\n    super(device, deducedProps, Buffer.defaultProps);\n\n    this.usage = props.usage || 0;\n    this.indexType = deducedProps.indexType;\n  }\n\n  /** Write data to buffer */\n  abstract write(data: ArrayBufferView, byteOffset?: number): void;\n  /** Read data asynchronoursly */\n  abstract readAsync(byteOffset?: number, byteLength?: number): Promise<Uint8Array>;\n\n  /** Read data synchronously. @note WebGL2 only */\n  readSyncWebGL2(byteOffset?: number, byteLength?: number): Uint8Array  { throw new Error('not implemented'); }\n\n  // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)\n\n  /** Max amount of debug data saved. Two vec4's */\n  static DEBUG_DATA_MAX_LENGTH = 32;\n  /** A partial CPU-side copy of the data in this buffer, for debugging purposes */\n  debugData: ArrayBuffer = new ArrayBuffer(0);\n\n  /** This doesn't handle partial non-zero offset updates correctly */\n  protected _setDebugData(data: ArrayBufferView | ArrayBuffer | null, byteOffset: number, byteLength: number): void {\n    const buffer: ArrayBuffer | null = ArrayBuffer.isView(data) ? data.buffer : data;\n    const debugDataLength = Math.min(data ? data.byteLength : byteLength, Buffer.DEBUG_DATA_MAX_LENGTH);\n    if (data === null) {\n      this.debugData = new ArrayBuffer(debugDataLength);\n    } else if (byteOffset === 0 && byteLength === data.byteLength) {\n      this.debugData = buffer.slice(0, debugDataLength);\n    } else {\n      this.debugData = buffer.slice(byteOffset, byteOffset + debugDataLength);\n    }\n  }\n}\n"],"mappings":";SAGQA,QAAQ;AAAAC,mBAAA,GAgDAC,MAAM,CAACC,WAAW;AA3BlC,OAAO,MAAeC,MAAM,SAASJ,QAAQ,CAAc;EA2BzD,KAAAC,mBAAA,IAA4C;IAAE,OAAO,QAAQ;EAAE;EAS/DI,WAAWA,CAACC,MAAc,EAAEC,KAAkB,EAAE;IAC9C,MAAMC,YAAY,GAAG;MAAC,GAAGD;IAAK,CAAC;IAG/B,IAAI,CAACA,KAAK,CAACE,KAAK,IAAI,CAAC,IAAIL,MAAM,CAACM,KAAK,IAAI,CAACH,KAAK,CAACI,SAAS,EAAE;MACzD,IAAIJ,KAAK,CAACK,IAAI,YAAYC,WAAW,EAAE;QACrCL,YAAY,CAACG,SAAS,GAAG,QAAQ;MACnC,CAAC,MAAM,IAAIJ,KAAK,CAACK,IAAI,YAAYE,WAAW,EAAE;QAC5CN,YAAY,CAACG,SAAS,GAAG,QAAQ;MACnC;IACF;IAEA,KAAK,CAACL,MAAM,EAAEE,YAAY,EAAEJ,MAAM,CAACW,YAAY,CAAC;IAAC,KAlB1CN,KAAK;IAAA,KAELE,SAAS;IAAA,KAETK,UAAU;IAAA,KAiCnBC,SAAS,GAAgB,IAAIC,WAAW,CAAC,CAAC,CAAC;IAjBzC,IAAI,CAACT,KAAK,GAAGF,KAAK,CAACE,KAAK,IAAI,CAAC;IAC7B,IAAI,CAACE,SAAS,GAAGH,YAAY,CAACG,SAAS;EACzC;EAQAQ,cAAcA,CAACC,UAAmB,EAAEJ,UAAmB,EAAe;IAAE,MAAM,IAAIK,KAAK,CAAC,iBAAiB,CAAC;EAAE;EAUlGC,aAAaA,CAACV,IAA0C,EAAEQ,UAAkB,EAAEJ,UAAkB,EAAQ;IAChH,MAAMO,MAA0B,GAAGL,WAAW,CAACM,MAAM,CAACZ,IAAI,CAAC,GAAGA,IAAI,CAACW,MAAM,GAAGX,IAAI;IAChF,MAAMa,eAAe,GAAGC,IAAI,CAACC,GAAG,CAACf,IAAI,GAAGA,IAAI,CAACI,UAAU,GAAGA,UAAU,EAAEZ,MAAM,CAACwB,qBAAqB,CAAC;IACnG,IAAIhB,IAAI,KAAK,IAAI,EAAE;MACjB,IAAI,CAACK,SAAS,GAAG,IAAIC,WAAW,CAACO,eAAe,CAAC;IACnD,CAAC,MAAM,IAAIL,UAAU,KAAK,CAAC,IAAIJ,UAAU,KAAKJ,IAAI,CAACI,UAAU,EAAE;MAC7D,IAAI,CAACC,SAAS,GAAGM,MAAM,CAACM,KAAK,CAAC,CAAC,EAAEJ,eAAe,CAAC;IACnD,CAAC,MAAM;MACL,IAAI,CAACR,SAAS,GAAGM,MAAM,CAACM,KAAK,CAACT,UAAU,EAAEA,UAAU,GAAGK,eAAe,CAAC;IACzE;EACF;AACF;AAjFsBrB,MAAM,CACVW,YAAY,GAA0B;EACpD,GAAGf,QAAQ,CAACe,YAAY;EACxBN,KAAK,EAAE,CAAC;EACRO,UAAU,EAAE,CAAC;EACbI,UAAU,EAAE,CAAC;EACbR,IAAI,EAAE,IAAI;EACVD,SAAS,EAAE,QAAQ;EACnBmB,gBAAgB,EAAE;AACpB,CAAC;AATmB1B,MAAM,CAYnB2B,QAAQ,GAAG,IAAI;AAZF3B,MAAM,CAanB4B,SAAS,GAAG,IAAI;AAbH5B,MAAM,CAcnB6B,QAAQ,GAAG,MAAM;AAdJ7B,MAAM,CAenB8B,QAAQ,GAAG,MAAM;AAfJ9B,MAAM,CAiBnBM,KAAK,GAAG,MAAM;AAjBDN,MAAM,CAmBnB+B,MAAM,GAAG,MAAM;AAnBF/B,MAAM,CAqBnBgC,OAAO,GAAG,MAAM;AArBHhC,MAAM,CAuBnBiC,OAAO,GAAG,MAAM;AAvBHjC,MAAM,CAwBnBkC,QAAQ,GAAG,MAAM;AAxBJlC,MAAM,CAyBnBmC,aAAa,GAAG,MAAM;AAzBTnC,MAAM,CAiEnBwB,qBAAqB,GAAG,EAAE"}