{"version":3,"file":"types.js","names":[],"sources":["../../../src/adapter/types/types.ts"],"sourcesContent":["// luma.gl, MIT license\nimport {NumberArray} from '../../types';\nimport type {ColorTextureFormat, DepthStencilTextureFormat, TextureFormat} from './texture-formats';\nimport type {Buffer} from '../resources/buffer';\nimport type {Texture} from '../resources/texture'; // TextureView...\n\n// UNIFORMS\n\n/** Valid values for uniforms. @note boolean values get converted to 0 or 1 before setting */\nexport type UniformValue = number | boolean | Readonly<NumberArray>; // Float32Array> | Readonly<Int32Array> | Readonly<Uint32Array> | Readonly<number[]>;\n\n// BINDINGS\n\n/** Buffer bindings */\nexport type Binding = Texture | Buffer | {buffer: Buffer,  offset?: number, size?: number};\n\n// BINDING LAYOUTS\n\n/** Describes a buffer binding layout */\ntype BufferBindingLayout = {\n  /** The index of the binding point in the compiled and linked shader */\n  location?: number;\n  visibility: number;\n  /** type of buffer */\n  type: 'uniform' | 'storage' | 'read-only-storage';\n  hasDynamicOffset?: boolean;\n  minBindingSize?: number;\n}\n\n/** Describes a texture binding */\ntype TextureBindingLayout = {\n  /** The index of the binding point in the compiled and linked shader */\n  location?: number;\n  visibility: number;\n  viewDimension?: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  sampleType?: 'float' | 'unfilterable-float' | 'depth' | 'sint' | 'uint';\n  multisampled?: boolean;\n};\n\n/** Describes a storage texture binding */\ntype StorageTextureBindingLayout = {\n  /** The index of the binding point in the compiled and linked shader */\n  location?: number;\n  visibility: number;\n  access?: 'write-only';\n  format: TextureFormat;\n  viewDimension?: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n};\n\nexport type BindingDeclaration = BufferBindingLayout | TextureBindingLayout | StorageTextureBindingLayout;\n\n// TEXTURE VIEWS\n\nexport type TextureView = {\n  texture: WebGLTexture;\n  layer?: number; //  = 0\n  level?: number; // = 0\n};\n\n// ATTACHMENTS (See Framebuffer)\n\n/**\n * Framebuffer attachments lets the user specify the textures that will be used for a RenderPass, \n * together with some additional options for how to clear.\n */\nexport type ColorAttachment = {\n  /** Describes the texture subresource that will be output to for this color attachment. */\n  texture?: Texture;\n  /** Format of the texture resource. Used to auto create texture if not supplied */\n  format?: ColorTextureFormat;\n  /* Describes the texture subresource that will receive  resolved output for this color attachment if multisampled. */\n  // resolveTarget?: GPUTextureView;\n\n  /** Value to clear to prior to executing the render pass. Default: [0, 0, 0, 0]. Ignored if loadOp is not \"clear\". */\n  clearValue?: number[];\n  /** load operation to perform on texture prior to executing the render pass. Default: 'clear'. */\n  loadOp?: 'load' | 'clear';\n  /** The store operation to perform on texture after executing the render pass. Default: 'store'. */\n  storeOp?: 'store' | 'discard';\n};\n\n/**\n * Framebuffer attachments lets the user specify the depth stencil texture that will be used for a RenderPass, \n * together with some additional options for how to clear.\n */\nexport type DepthStencilAttachment = {\n  /** Describes the texture subresource that will be output to and read from for this depth/stencil attachment. */\n  texture?: Texture;\n  /** Format of the texture resource. Used to auto create texture if not supplied */\n  format?: DepthStencilTextureFormat;\n\n  /** Value to clear depth component to prior to executing the render pass, if depthLoadOp is \"clear\". 0.0-1.0. */\n  depthClearValue?: number;\n  /** Indicates load operation to perform on depth component prior to executing the render pass. Default 'clear'. */\n  depthLoadOp?: 'load' | 'clear';\n  /** Store operation to perform on depth component after executing the render pass. Default: 'store'. */\n  depthStoreOp?: 'store' | 'discard';\n  /** Indicates that the depth component is read only. */\n  depthReadOnly?: boolean;\n\n  /** Indicates value to clear stencil component to prior to executing the render pass, if stencilLoadOp is \"clear\". */\n  stencilClearValue?: number;\n  /** Indicates  load operation to perform on stencil component prior to executing the render pass. Prefer clearing. */\n  stencilLoadOp?: 'load' | 'clear';\n  /** Store operation to perform on stencil component after executing the render pass. */\n  stencilStoreOp?: 'store' | 'discard';\n  /** Indicates that the stencil component is read only. */\n  stencilReadOnly?: boolean;\n};\n"],"mappings":""}