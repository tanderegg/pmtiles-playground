import type { ColorTextureFormat, DepthStencilTextureFormat, TextureFormat } from '../types/texture-formats';
import type { Device } from '../device';
import { Resource, ResourceProps } from './resource';
import { Texture } from './texture';
export type FramebufferProps = ResourceProps & {
    width?: number;
    height?: number;
    colorAttachments?: (Texture | ColorTextureFormat)[];
    depthStencilAttachment?: (Texture | DepthStencilTextureFormat) | null;
};
/**
 * Create new textures with correct size for all attachments.
 * @note resize() destroys existing textures (if size has changed).
 */
export declare abstract class Framebuffer extends Resource<FramebufferProps> {
    static defaultProps: Required<FramebufferProps>;
    get [Symbol.toStringTag](): string;
    /** Width of all attachments in this framebuffer */
    width: number;
    /** Height of all attachments in this framebuffer */
    height: number;
    /** Color attachments */
    colorAttachments: Texture[];
    /** Depth-stencil attachment, if provided */
    depthStencilAttachment: Texture | null;
    constructor(device: Device, props?: FramebufferProps);
    /**
     * Resizes all attachments
     * @note resize() destroys existing textures (if size has changed).
     */
    resize(size: {
        width: number;
        height: number;
    }): void;
    resize(size: [width: number, height: number]): void;
    resize(): void;
    /** Auto creates any textures */
    protected autoCreateAttachmentTextures(): void;
    /** Create a color texture */
    protected createColorTexture(format: TextureFormat): Texture;
    /** Create depth stencil texture */
    protected createDepthStencilTexture(format: TextureFormat): Texture;
    /**
     * Default implementation of resize
     * Creates new textures with correct size for all attachments.
     * and destroys existing textures if owned
     */
    protected resizeAttachments(width: number, height: number): void;
}
//# sourceMappingURL=framebuffer.d.ts.map