{"version":3,"file":"check-props.js","names":["log","checkProps","className","props","propChecks","removedProps","deprecatedProps","replacedProps","propName","replacementProp","replacement","removed","deprecated","newProps","Object","entries","assign"],"sources":["../../src/utils/check-props.ts"],"sourcesContent":["import {log} from './log';\n\n/* Use as\nimport {checkProps} from '../util/check-props;'\n\nconst PROP_CHECKS = {\n  // Removed props no longer supported, print error and link to upgrade guide\n  removedProps: {\n  },\n  // Deprecated props\n  deprecatedProps: {\n    offset: 'accessor',\n    stride: 'accessor',\n    type: 'accessor',\n    size: 'accessor',\n    divisor: 'accessor',\n    normalized: 'accessor',\n    integer: 'accessor'\n  },\n  // Deprecated props that can be autosubstituted, print warning and return updated props object\n  replacedProps: {\n    bytes: 'byteLength'\n  }\n}\n\nclass Buffer {\n  setProps(props) {\n    checkProps('Buffer', props, PROP_CHECKS);\n  }\n}\n*/\n\nexport type PropChecks = {\n  removedProps?: Record<string, any>;\n  replacedProps?: Record<string, string>;\n  deprecatedProps?: Record<string, string>;\n};\n\nexport function checkProps(className: string, props: Record<string, any>, propChecks: PropChecks): Record<string, unknown> {\n  const {removedProps = {}, deprecatedProps = {}, replacedProps = {}} = propChecks;\n\n  // removedProps: Removed props no longer supported\n  // print error and link to upgrade guide\n  for (const propName in removedProps) {\n    if (propName in props) {\n      const replacementProp = removedProps[propName];\n      const replacement = replacementProp ? `${className}.${removedProps[propName]}` : 'N/A';\n      log.removed(`${className}.${propName}`, replacement)();\n    }\n  }\n\n  // deprecatedProps: Deprecated props that can not be autosubstituted\n  // print warning and rely on caller to substitute\n  for (const propName in deprecatedProps) {\n    if (propName in props) {\n      const replacementProp = deprecatedProps[propName];\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n    }\n  }\n\n  // replacedProps: Deprecated props that can be autosubstituted\n  // print warning and return updated props object\n  let newProps = null;\n  for (const [propName, replacementProp] of Object.entries(replacedProps)) {\n    if (propName in props) {\n      log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();\n      newProps = newProps || Object.assign({}, props);\n      newProps[replacementProp] = props[propName];\n      delete newProps[propName];\n    }\n  }\n\n  return newProps || props;\n}\n"],"mappings":"SAAQA,GAAG;AAsCX,OAAO,SAASC,UAAUA,CAACC,SAAiB,EAAEC,KAA0B,EAAEC,UAAsB,EAA2B;EACzH,MAAM;IAACC,YAAY,GAAG,CAAC,CAAC;IAAEC,eAAe,GAAG,CAAC,CAAC;IAAEC,aAAa,GAAG,CAAC;EAAC,CAAC,GAAGH,UAAU;EAIhF,KAAK,MAAMI,QAAQ,IAAIH,YAAY,EAAE;IACnC,IAAIG,QAAQ,IAAIL,KAAK,EAAE;MACrB,MAAMM,eAAe,GAAGJ,YAAY,CAACG,QAAQ,CAAC;MAC9C,MAAME,WAAW,GAAGD,eAAe,GAAI,GAAEP,SAAU,IAAGG,YAAY,CAACG,QAAQ,CAAE,EAAC,GAAG,KAAK;MACtFR,GAAG,CAACW,OAAO,CAAE,GAAET,SAAU,IAAGM,QAAS,EAAC,EAAEE,WAAW,CAAC,CAAC,CAAC;IACxD;EACF;EAIA,KAAK,MAAMF,QAAQ,IAAIF,eAAe,EAAE;IACtC,IAAIE,QAAQ,IAAIL,KAAK,EAAE;MACrB,MAAMM,eAAe,GAAGH,eAAe,CAACE,QAAQ,CAAC;MACjDR,GAAG,CAACY,UAAU,CAAE,GAAEV,SAAU,IAAGM,QAAS,EAAC,EAAG,GAAEN,SAAU,IAAGO,eAAgB,EAAC,CAAC,CAAC,CAAC;IACjF;EACF;EAIA,IAAII,QAAQ,GAAG,IAAI;EACnB,KAAK,MAAM,CAACL,QAAQ,EAAEC,eAAe,CAAC,IAAIK,MAAM,CAACC,OAAO,CAACR,aAAa,CAAC,EAAE;IACvE,IAAIC,QAAQ,IAAIL,KAAK,EAAE;MACrBH,GAAG,CAACY,UAAU,CAAE,GAAEV,SAAU,IAAGM,QAAS,EAAC,EAAG,GAAEN,SAAU,IAAGO,eAAgB,EAAC,CAAC,CAAC,CAAC;MAC/EI,QAAQ,GAAGA,QAAQ,IAAIC,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,EAAEb,KAAK,CAAC;MAC/CU,QAAQ,CAACJ,eAAe,CAAC,GAAGN,KAAK,CAACK,QAAQ,CAAC;MAC3C,OAAOK,QAAQ,CAACL,QAAQ,CAAC;IAC3B;EACF;EAEA,OAAOK,QAAQ,IAAIV,KAAK;AAC1B"}