import { Buffer } from "../../adapter/resources/buffer.js";
import { UniformBlock } from "./uniform-block.js";
import { UniformBufferLayout } from "./uniform-buffer-layout.js";
import { log } from "../../utils/log.js";
export class UniformStore {
  constructor(blocks) {
    this.uniformBlocks = new Map();
    this.uniformBufferLayouts = new Map();
    this.uniformBuffers = new Map();
    for (const [bufferName, block] of Object.entries(blocks)) {
      const uniformBufferName = bufferName;
      const uniformBufferLayout = new UniformBufferLayout(block.uniformTypes || {});
      this.uniformBufferLayouts.set(uniformBufferName, uniformBufferLayout);
      const uniformBlock = new UniformBlock({
        name: bufferName
      });
      uniformBlock.setUniforms(block.defaultUniforms || {});
      this.uniformBlocks.set(uniformBufferName, uniformBlock);
    }
  }
  destroy() {
    for (const uniformBuffer of Object.values(this.uniformBuffers)) {
      uniformBuffer.destroy();
    }
  }
  setUniforms(uniforms) {
    for (const [blockName, uniformValues] of Object.entries(uniforms)) {
      this.uniformBlocks.get(blockName).setUniforms(uniformValues);
    }
    this.updateUniformBuffers();
  }
  getUniformBufferByteLength(uniformBufferName) {
    return this.uniformBufferLayouts.get(uniformBufferName).byteLength;
  }
  getUniformBufferData(uniformBufferName) {
    const uniformValues = this.uniformBlocks.get(uniformBufferName).getAllUniforms();
    return this.uniformBufferLayouts.get(uniformBufferName).getData(uniformValues);
  }
  createUniformBuffer(device, uniformBufferName, uniforms) {
    if (uniforms) {
      this.setUniforms(uniforms);
    }
    const byteLength = this.getUniformBufferByteLength(uniformBufferName);
    const uniformBuffer = device.createBuffer({
      usage: Buffer.UNIFORM | Buffer.COPY_DST,
      byteLength
    });
    const uniformBufferData = this.getUniformBufferData(uniformBufferName);
    uniformBuffer.write(uniformBufferData);
    return uniformBuffer;
  }
  getManagedUniformBuffer(device, uniformBufferName) {
    if (!this.uniformBuffers.get(uniformBufferName)) {
      const byteLength = this.getUniformBufferByteLength(uniformBufferName);
      const uniformBuffer = device.createBuffer({
        usage: Buffer.UNIFORM | Buffer.COPY_DST,
        byteLength
      });
      this.uniformBuffers.set(uniformBufferName, uniformBuffer);
    }
    return this.uniformBuffers.get(uniformBufferName);
  }
  updateUniformBuffers() {
    let reason = false;
    for (const uniformBufferName of this.uniformBlocks.keys()) {
      const bufferReason = this.updateUniformBuffer(uniformBufferName);
      reason || (reason = bufferReason);
    }
    if (reason) {
      log.log(3, `UniformStore.updateUniformBuffers(): ${reason}`)();
    }
    return reason;
  }
  updateUniformBuffer(uniformBufferName) {
    const uniformBlock = this.uniformBlocks.get(uniformBufferName);
    const uniformBuffer = this.uniformBuffers.get(uniformBufferName);
    let reason = false;
    if (uniformBuffer && uniformBlock.needsRedraw) {
      reason || (reason = uniformBlock.needsRedraw);
      const uniformBufferData = this.getUniformBufferData(uniformBufferName);
      const uniformBuffer = this.uniformBuffers.get(uniformBufferName);
      uniformBuffer.write(uniformBufferData);
      const uniformValues = this.uniformBlocks.get(uniformBufferName).getAllUniforms();
      log.log(4, `Writing to uniform buffer ${String(uniformBufferName)}`, uniformBufferData, uniformValues)();
    }
    return reason;
  }
}
//# sourceMappingURL=uniform-store.js.map