{"version":3,"file":"pixel-data-utils.js","names":["flipRows","options","data","width","height","bytesPerPixel","temp","bytesPerRow","tempBuffer","Uint8Array","y","topOffset","bottomOffset","set","subarray","copyWithin","scalePixels","newWidth","Math","round","newHeight","newData","x","c"],"sources":["../../src/debug/pixel-data-utils.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {TypedArray} from '@luma.gl/core';\n\n/**\n * Flip rows (can be used on arrays returned from `Framebuffer.readPixels`)\n * https: *stackoverflow.com/questions/41969562/\n * how-can-i-flip-the-result-of-webglrenderingcontext-readpixels\n * @param param0\n */\nexport function flipRows(options: {\n  data: TypedArray;\n  width: number;\n  height: number;\n  bytesPerPixel?: number;\n  temp?: Uint8Array;\n}): void {\n  const {data, width, height, bytesPerPixel = 4, temp} = options;\n  const bytesPerRow = width * bytesPerPixel;\n\n  // make a temp buffer to hold one row\n  const tempBuffer = temp || new Uint8Array(bytesPerRow);\n  for (let y = 0; y < height / 2; ++y) {\n    const topOffset = y * bytesPerRow;\n    const bottomOffset = (height - y - 1) * bytesPerRow;\n    // make copy of a row on the top half\n    tempBuffer.set(data.subarray(topOffset, topOffset + bytesPerRow));\n    // copy a row from the bottom half to the top\n    data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n    // copy the copy of the top half row to the bottom half\n    data.set(tempBuffer, bottomOffset);\n  }\n}\n\nexport function scalePixels(options: {\n  data: TypedArray;\n  width: number;\n  height: number;\n}): {\n  data: Uint8Array;\n  width: number;\n  height: number;\n} {\n  const {data, width, height} = options;\n  const newWidth = Math.round(width / 2);\n  const newHeight = Math.round(height / 2);\n  const newData = new Uint8Array(newWidth * newHeight * 4);\n  for (let y = 0; y < newHeight; y++) {\n    for (let x = 0; x < newWidth; x++) {\n      for (let c = 0; c < 4; c++) {\n        newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];\n      }\n    }\n  }\n  return {data: newData, width: newWidth, height: newHeight};\n}\n"],"mappings":"AAWA,OAAO,SAASA,QAAQA,CAACC,OAMxB,EAAQ;EACP,MAAM;IAACC,IAAI;IAAEC,KAAK;IAAEC,MAAM;IAAEC,aAAa,GAAG,CAAC;IAAEC;EAAI,CAAC,GAAGL,OAAO;EAC9D,MAAMM,WAAW,GAAGJ,KAAK,GAAGE,aAAa;EAGzC,MAAMG,UAAU,GAAGF,IAAI,IAAI,IAAIG,UAAU,CAACF,WAAW,CAAC;EACtD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,GAAG,CAAC,EAAE,EAAEM,CAAC,EAAE;IACnC,MAAMC,SAAS,GAAGD,CAAC,GAAGH,WAAW;IACjC,MAAMK,YAAY,GAAG,CAACR,MAAM,GAAGM,CAAC,GAAG,CAAC,IAAIH,WAAW;IAEnDC,UAAU,CAACK,GAAG,CAACX,IAAI,CAACY,QAAQ,CAACH,SAAS,EAAEA,SAAS,GAAGJ,WAAW,CAAC,CAAC;IAEjEL,IAAI,CAACa,UAAU,CAACJ,SAAS,EAAEC,YAAY,EAAEA,YAAY,GAAGL,WAAW,CAAC;IAEpEL,IAAI,CAACW,GAAG,CAACL,UAAU,EAAEI,YAAY,CAAC;EACpC;AACF;AAEA,OAAO,SAASI,WAAWA,CAACf,OAI3B,EAIC;EACA,MAAM;IAACC,IAAI;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAGH,OAAO;EACrC,MAAMgB,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAAChB,KAAK,GAAG,CAAC,CAAC;EACtC,MAAMiB,SAAS,GAAGF,IAAI,CAACC,KAAK,CAACf,MAAM,GAAG,CAAC,CAAC;EACxC,MAAMiB,OAAO,GAAG,IAAIZ,UAAU,CAACQ,QAAQ,GAAGG,SAAS,GAAG,CAAC,CAAC;EACxD,KAAK,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,SAAS,EAAEV,CAAC,EAAE,EAAE;IAClC,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,EAAEK,CAAC,EAAE,EAAE;MACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1BF,OAAO,CAAC,CAACX,CAAC,GAAGO,QAAQ,GAAGK,CAAC,IAAI,CAAC,GAAGC,CAAC,CAAC,GAAGrB,IAAI,CAAC,CAACQ,CAAC,GAAG,CAAC,GAAGP,KAAK,GAAGmB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAGC,CAAC,CAAC;MAC7E;IACF;EACF;EACA,OAAO;IAACrB,IAAI,EAAEmB,OAAO;IAAElB,KAAK,EAAEc,QAAQ;IAAEb,MAAM,EAAEgB;EAAS,CAAC;AAC5D"}