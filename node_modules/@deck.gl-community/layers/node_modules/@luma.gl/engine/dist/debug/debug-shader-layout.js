export function getDebugTableForShaderLayout(layout, name) {
  var _layout$varyings;
  const table = {};
  const header = 'Values';
  if (layout.attributes.length === 0 && !((_layout$varyings = layout.varyings) !== null && _layout$varyings !== void 0 && _layout$varyings.length)) {
    return {
      'No attributes or varyings': {
        [header]: 'N/A'
      }
    };
  }
  for (const attributeDeclaration of layout.attributes) {
    if (attributeDeclaration) {
      const glslDeclaration = `${attributeDeclaration.location} ${attributeDeclaration.name}: ${attributeDeclaration.type}`;
      table[`in ${glslDeclaration}`] = {
        [header]: attributeDeclaration.stepMode || 'vertex'
      };
    }
  }
  for (const varyingDeclaration of layout.varyings || []) {
    const glslDeclaration = `${varyingDeclaration.location} ${varyingDeclaration.name}`;
    table[`out ${glslDeclaration}`] = {
      [header]: JSON.stringify(varyingDeclaration.accessor)
    };
  }
  return table;
}
//# sourceMappingURL=debug-shader-layout.js.map