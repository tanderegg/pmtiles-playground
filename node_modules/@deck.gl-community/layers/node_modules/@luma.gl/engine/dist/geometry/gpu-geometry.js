import { Buffer, uid, assert, getVertexFormatFromAttribute } from '@luma.gl/core';
export class GPUGeometry {
  constructor(props) {
    this.id = void 0;
    this.userData = {};
    this.topology = void 0;
    this.bufferLayout = [];
    this.vertexCount = void 0;
    this.indices = void 0;
    this.attributes = void 0;
    this.id = props.id || uid('geometry');
    this.topology = props.topology;
    this.indices = props.indices || null;
    this.attributes = props.attributes;
    this.vertexCount = props.vertexCount;
    this.bufferLayout = props.bufferLayout || [];
    if (this.indices) {
      assert(this.indices.usage === Buffer.INDEX);
    }
  }
  destroy() {
    var _this$attributes$colo;
    this.indices.destroy();
    this.attributes.positions.destroy();
    this.attributes.normals.destroy();
    this.attributes.texCoords.destroy();
    (_this$attributes$colo = this.attributes.colors) === null || _this$attributes$colo === void 0 ? void 0 : _this$attributes$colo.destroy();
  }
  getVertexCount() {
    return this.vertexCount;
  }
  getAttributes() {
    return this.attributes;
  }
  getIndexes() {
    return this.indices;
  }
  _calculateVertexCount(positions) {
    const vertexCount = positions.byteLength / 12;
    return vertexCount;
  }
}
export function makeGPUGeometry(device, geometry) {
  if (geometry instanceof GPUGeometry) {
    return geometry;
  }
  const indices = getIndexBufferFromGeometry(device, geometry);
  const {
    attributes,
    bufferLayout
  } = getAttributeBuffersFromGeometry(device, geometry);
  return new GPUGeometry({
    topology: geometry.topology || 'triangle-list',
    bufferLayout,
    vertexCount: geometry.vertexCount,
    indices,
    attributes
  });
}
export function getIndexBufferFromGeometry(device, geometry) {
  if (!geometry.indices) {
    return undefined;
  }
  const data = geometry.indices.value;
  return device.createBuffer({
    usage: Buffer.INDEX,
    data
  });
}
export function getAttributeBuffersFromGeometry(device, geometry) {
  const bufferLayout = [];
  const attributes = {};
  for (const [attributeName, attribute] of Object.entries(geometry.attributes)) {
    let name = attributeName;
    switch (attributeName) {
      case 'POSITION':
        name = 'positions';
        break;
      case 'NORMAL':
        name = 'normals';
        break;
      case 'TEXCOORD_0':
        name = 'texCoords';
        break;
      case 'COLOR_0':
        name = 'colors';
        break;
    }
    attributes[name] = device.createBuffer({
      data: attribute.value,
      id: `${attributeName}-buffer`
    });
    const {
      value,
      size,
      normalized
    } = attribute;
    bufferLayout.push({
      name,
      format: getVertexFormatFromAttribute(value, size, normalized)
    });
  }
  const vertexCount = geometry._calculateVertexCount(geometry.attributes, geometry.indices);
  return {
    attributes,
    bufferLayout,
    vertexCount
  };
}
//# sourceMappingURL=gpu-geometry.js.map