{"version":3,"file":"gpu-table.js","names":[],"sources":["../../src/geometry/gpu-table.ts"],"sourcesContent":["/*\nexport function getAttributeLayoutsFromGeometry(geometry: Geometry) {\n  const layouts: Record<string, {}> = {};\n  let indices = geometry.indices;\n\n  for (const [name, attribute] of Object.entries(geometry.attributes)) {\n    const remappedName = mapAttributeName(name);\n\n    if (attribute.constant) {\n      throw new Error('constant attributes not supported');\n    } else {\n      const typedArray = attribute.value;\n      // Create accessor by copying the attribute and removing `value``\n      const accessor = {...attribute};\n      delete accessor.value;\n      buffers[remappedName] = [device.createBuffer(typedArray), accessor];\n\n      inferAttributeAccessor(name, accessor);\n    }\n  }\n}\n\nexport class Table {\n  length: number;\n  // columns: Record<string, TypedArray> = {};\n}\n\nexport class GPUTable {\n  length: number;\n  columns: Record<string, Buffer> = {};\n}\n\nexport function convertTableToGPUTable(table: Table) {\n  // for (const ) {}\n}\n\nexport function renameTableColumns(table: Table, map: (name: string) => string) {\n  const newColumns = table.columns.reduce()\n  table.clone();\n}\n*/\n"],"mappings":""}