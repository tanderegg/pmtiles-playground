import { RenderPipeline } from '@luma.gl/core';
export class PipelineFactory {
  static getDefaultPipelineFactory(device) {
    device._lumaData.defaultPipelineFactory = device._lumaData.defaultPipelineFactory || new PipelineFactory(device);
    return device._lumaData.defaultPipelineFactory;
  }
  constructor(device) {
    this.device = void 0;
    this._hashCounter = 0;
    this._hashes = {};
    this._useCounts = {};
    this._pipelineCache = {};
    this.device = device;
  }
  createRenderPipeline(options) {
    const props = {
      ...PipelineFactory.defaultProps,
      ...options
    };
    const hash = this._hashRenderPipeline({
      ...props
    });
    if (!this._pipelineCache[hash]) {
      const pipeline = this.device.createRenderPipeline({
        ...props,
        vs: this.device.createShader({
          stage: 'vertex',
          source: props.vs
        }),
        fs: props.fs ? this.device.createShader({
          stage: 'fragment',
          source: props.fs
        }) : null
      });
      pipeline.hash = hash;
      this._pipelineCache[hash] = pipeline;
      this._useCounts[hash] = 0;
    }
    this._useCounts[hash]++;
    return this._pipelineCache[hash];
  }
  release(pipeline) {
    const hash = pipeline.hash;
    this._useCounts[hash]--;
    if (this._useCounts[hash] === 0) {
      this._pipelineCache[hash].destroy();
      delete this._pipelineCache[hash];
      delete this._useCounts[hash];
    }
  }
  _hashRenderPipeline(props) {
    const vsHash = this._getHash(props.vs);
    const fsHash = props.fs ? this._getHash(props.fs) : 0;
    const varyingHash = '-';
    switch (this.device.info.type) {
      case 'webgpu':
        const parameterHash = this._getHash(JSON.stringify(props.parameters));
        const bufferLayoutHash = this._getHash(JSON.stringify(props.bufferLayout));
        return `${vsHash}/${fsHash}V${varyingHash}T${props.topology}P${parameterHash}BL${bufferLayoutHash}}`;
      default:
        return `${vsHash}/${fsHash}V${varyingHash}`;
    }
  }
  _getHash(key) {
    if (this._hashes[key] === undefined) {
      this._hashes[key] = this._hashCounter++;
    }
    return this._hashes[key];
  }
}
PipelineFactory.defaultProps = {
  ...RenderPipeline.defaultProps,
  vs: undefined,
  fs: undefined
};
//# sourceMappingURL=pipeline-factory.js.map