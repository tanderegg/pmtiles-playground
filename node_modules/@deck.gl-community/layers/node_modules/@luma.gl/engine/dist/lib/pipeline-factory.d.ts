import type { RenderPipelineProps } from '@luma.gl/core';
import { Device, RenderPipeline } from '@luma.gl/core';
/** Todo - should be same as RenderPipelineProps */
export type PipelineFactoryProps = Omit<RenderPipelineProps, 'vs' | 'fs'> & {
    vs: string;
    fs: string;
};
/**
 * Efficiently creates / caches pipelines
 */
export declare class PipelineFactory {
    static defaultProps: Required<PipelineFactoryProps>;
    readonly device: Device;
    private _hashCounter;
    private readonly _hashes;
    private readonly _useCounts;
    private readonly _pipelineCache;
    static getDefaultPipelineFactory(device: Device): PipelineFactory;
    constructor(device: Device);
    createRenderPipeline(options: PipelineFactoryProps): RenderPipeline;
    release(pipeline: RenderPipeline): void;
    /** Calculate a hash based on all the inputs for a render pipeline */
    private _hashRenderPipeline;
    private _getHash;
}
//# sourceMappingURL=pipeline-factory.d.ts.map