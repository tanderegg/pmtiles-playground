import { log } from '@luma.gl/core';
import { _resolveModules } from '@luma.gl/shadertools';
export class ShaderInputs {
  constructor(modules) {
    this.modules = void 0;
    this.moduleUniforms = void 0;
    this.moduleBindings = void 0;
    this.moduleUniformsChanged = void 0;
    const allModules = _resolveModules(Object.values(modules));
    log.log(1, 'Creating ShaderInputs with modules', allModules.map(m => m.name))();
    this.modules = modules;
    this.moduleUniforms = {};
    this.moduleBindings = {};
    for (const [name, module] of Object.entries(modules)) {
      const moduleName = name;
      this.moduleUniforms[moduleName] = module.defaultUniforms || {};
      this.moduleBindings[moduleName] = {};
    }
  }
  destroy() {}
  setProps(props) {
    for (const name of Object.keys(props)) {
      var _module$getUniforms;
      const moduleName = name;
      const moduleProps = props[moduleName];
      const module = this.modules[moduleName];
      if (!module) {
        log.warn(`Module ${name} not found`)();
        continue;
      }
      const oldUniforms = this.moduleUniforms[moduleName];
      const uniforms = ((_module$getUniforms = module.getUniforms) === null || _module$getUniforms === void 0 ? void 0 : _module$getUniforms.call(module, moduleProps, this.moduleUniforms[moduleName])) || moduleProps;
      this.moduleUniforms[moduleName] = {
        ...oldUniforms,
        ...uniforms
      };
    }
  }
  getModules() {
    return Object.values(this.modules);
  }
  getUniformValues() {
    return this.moduleUniforms;
  }
  getBindings() {
    const bindings = {};
    for (const moduleBindings of Object.values(this.moduleBindings)) {
      Object.assign(bindings, moduleBindings);
    }
    return bindings;
  }
  getDebugTable() {
    const table = {};
    for (const [moduleName, module] of Object.entries(this.moduleUniforms)) {
      for (const [key, value] of Object.entries(module)) {
        var _this$modules$moduleN;
        table[`${moduleName}.${key}`] = {
          type: (_this$modules$moduleN = this.modules[moduleName].uniformTypes) === null || _this$modules$moduleN === void 0 ? void 0 : _this$modules$moduleN[key],
          value: String(value)
        };
      }
    }
    return table;
  }
}
//# sourceMappingURL=shader-inputs.js.map