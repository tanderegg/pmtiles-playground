import { GL } from '@luma.gl/constants';
import { _LayersPass as LayersPass } from '@deck.gl/core';
export default class MaskPass extends LayersPass {
    constructor(device, props) {
        super(device, props);
        const { mapSize = 2048 } = props;
        this.maskMap = device.createTexture({
            format: 'rgba8unorm',
            width: mapSize,
            height: mapSize,
            sampler: {
                minFilter: 'linear',
                magFilter: 'linear',
                addressModeU: 'clamp-to-edge',
                addressModeV: 'clamp-to-edge'
            }
        });
        this.fbo = device.createFramebuffer({
            id: 'maskmap',
            width: mapSize,
            height: mapSize,
            colorAttachments: [this.maskMap]
        });
    }
    render(options) {
        const colorMask = [false, false, false, false];
        colorMask[options.channel] = true;
        const clearColor = [255, 255, 255, 255];
        return this.device.withParametersWebGL({
            blend: true,
            blendFunc: [GL.ZERO, GL.ONE],
            blendEquation: GL.FUNC_SUBTRACT,
            colorMask,
            depthTest: false
        }, () => super.render({ ...options, clearColor, target: this.fbo, pass: 'mask' }));
    }
    shouldDrawLayer(layer) {
        return layer.props.operation.includes('mask');
    }
    delete() {
        this.fbo.delete();
        this.maskMap.delete();
    }
}
