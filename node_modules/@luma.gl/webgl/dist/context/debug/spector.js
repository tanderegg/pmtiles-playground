import { log, loadScript } from '@luma.gl/core';
const DEFAULT_SPECTOR_PROPS = {
  spector: log.get('spector') || log.get('inspect')
};
const SPECTOR_CDN_URL = 'https://spectorcdn.babylonjs.com/spector.bundle.js';
const LOG_LEVEL = 1;
let spector = null;
let initialized = false;
export async function loadSpectorJS(props) {
  if (!globalThis.SPECTOR) {
    try {
      await loadScript(SPECTOR_CDN_URL);
    } catch (error) {
      log.warn(String(error));
    }
  }
}
export function initializeSpectorJS(props) {
  var _props, _props2;
  props = {
    ...DEFAULT_SPECTOR_PROPS,
    ...props
  };
  if (!((_props = props) !== null && _props !== void 0 && _props.spector)) {
    return null;
  }
  if (!spector && globalThis.SPECTOR) {
    log.probe(LOG_LEVEL, 'SPECTOR found and initialized')();
    spector = new globalThis.SPECTOR.Spector();
    if (globalThis.luma) {
      globalThis.luma.spector = spector;
    }
  }
  if (!spector) {
    return null;
  }
  if (!initialized) {
    var _spector, _spector2;
    initialized = true;
    spector.spyCanvases();
    (_spector = spector) === null || _spector === void 0 ? void 0 : _spector.onCaptureStarted.add(capture => log.info('Spector capture started:', capture)());
    (_spector2 = spector) === null || _spector2 === void 0 ? void 0 : _spector2.onCapture.add(capture => {
      var _spector3, _spector4, _spector5;
      log.info('Spector capture complete:', capture)();
      (_spector3 = spector) === null || _spector3 === void 0 ? void 0 : _spector3.getResultUI();
      (_spector4 = spector) === null || _spector4 === void 0 ? void 0 : _spector4.resultView.display();
      (_spector5 = spector) === null || _spector5 === void 0 ? void 0 : _spector5.resultView.addCapture(capture);
    });
  }
  if ((_props2 = props) !== null && _props2 !== void 0 && _props2.canvas) {
    var _spector6, _props3;
    if (typeof props.spector === 'string' && props.spector !== props.canvas.id) {
      return spector;
    }
    (_spector6 = spector) === null || _spector6 === void 0 ? void 0 : _spector6.startCapture((_props3 = props) === null || _props3 === void 0 ? void 0 : _props3.canvas, 500);
    new Promise(resolve => setTimeout(resolve, 2000)).then(_ => {
      var _spector7;
      log.info('Spector capture stopped after 2 seconds')();
      (_spector7 = spector) === null || _spector7 === void 0 ? void 0 : _spector7.stopCapture();
    });
  }
  return spector;
}
//# sourceMappingURL=spector.js.map