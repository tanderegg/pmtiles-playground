{"version":3,"file":"unified-parameter-api.js","names":["GL_PARAMETER_DEFAULTS","GL_PARAMETER_SETTERS","GL_COMPOSITE_PARAMETER_SETTERS","GL_PARAMETER_GETTERS","WebGLDevice","setGLParameters","device","parameters","webglDevice","attach","gl","isObjectEmpty","compositeSetters","key","glConstant","Number","setter","cache","state","compositeSetter","getGLParameters","arguments","length","undefined","getter","getParameter","parameterKeys","Array","isArray","Object","keys","resetGLParameters","object"],"sources":["../../../src/context/parameters/unified-parameter-api.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\n// Provides a unified API for getting and setting any WebGL parameter\n// Also knows default values of all parameters, enabling fast cache initialization\n// Provides base functionality for the state caching.\nimport {Device} from '@luma.gl/core';\nimport type {GLParameters} from '@luma.gl/constants';\nimport {\n  GL_PARAMETER_DEFAULTS,\n  GL_PARAMETER_SETTERS,\n  GL_COMPOSITE_PARAMETER_SETTERS,\n  GL_PARAMETER_GETTERS\n} from './webgl-parameter-tables';\n\nimport {WebGLDevice} from '../../adapter/webgl-device';\n\nexport type {GLParameters};\n\n/**\n * Sets any GL parameter regardless of function (gl.blendMode, ...)\n *\n * @note requires a `cache` object to be set on the context (gl.state.cache)\n * This object is used to fill in any missing values for composite setter functions\n */\nexport function setGLParameters(\n  device: Device | WebGLRenderingContext,\n  parameters: GLParameters\n): void {\n  const webglDevice = WebGLDevice.attach(device);\n  const gl = webglDevice.gl;\n\n  if (isObjectEmpty(parameters)) {\n    return;\n  }\n\n  const compositeSetters = {};\n\n  // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)\n\n  for (const key in parameters) {\n    const glConstant = Number(key);\n    const setter = GL_PARAMETER_SETTERS[key];\n    if (setter) {\n      // Composite setters should only be called once, so save them\n      if (typeof setter === 'string') {\n        compositeSetters[setter] = true;\n      } else {\n        // if (gl[glConstant] !== undefined) {\n        // TODO - added above check since this is being called on WebGL2 parameters in WebGL1...\n        // TODO - deep equal on values? only call setter if value has changed?\n        // NOTE - the setter will automatically update this.state\n        setter(gl, parameters[key], glConstant);\n      }\n    }\n  }\n\n  // HANDLE COMPOSITE SETTERS\n\n  // NOTE: any non-provided values needed by composite setters are filled in from state cache\n  // The cache parameter is automatically retrieved from the context\n  // This depends on `trackContextState`, which is technically a \"circular\" dependency.\n  // But it is too inconvenient to always require a cache parameter here.\n  // This is the ONLY external dependency in this module/\n  // @ts-expect-error\n  const cache = gl.state && gl.state.cache;\n  if (cache) {\n    for (const key in compositeSetters) {\n      // TODO - avoid calling composite setters if values have not changed.\n      const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];\n      // Note - if `trackContextState` has been called,\n      // the setter will automatically update this.state.cache\n      compositeSetter(gl, parameters, cache);\n    }\n  }\n\n  // Add a log for the else case?\n}\n\n/**\n * Reads the entire WebGL state from a context\n\n  // default to querying all parameters\n\n  * @returns - a newly created map, with values keyed by GL parameters\n *\n * @note Copies the state from a context (gl.getParameter should not be overriden)\n * Reads the entire WebGL state from a context\n *\n * @note This can generates a huge amount of synchronous driver roundtrips and should be\n * considered a very slow operation, to be used only if/when a context already manipulated\n * by external code needs to be synchronized for the first time\n */\nexport function getGLParameters(\n  device: Device | WebGLRenderingContext,\n  parameters: keyof GLParameters | (keyof GLParameters)[] | GLParameters = GL_PARAMETER_DEFAULTS\n): GLParameters {\n  const webglDevice = WebGLDevice.attach(device);\n  const gl = webglDevice.gl;\n\n  // support both arrays of parameters and objects (keys represent parameters)\n\n  if (typeof parameters === 'number') {\n    // single GL enum\n    const key = parameters;\n    const getter = GL_PARAMETER_GETTERS[key];\n    return getter ? getter(gl, key) : gl.getParameter(key);\n  }\n\n  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);\n\n  const state = {};\n  for (const key of parameterKeys) {\n    const getter = GL_PARAMETER_GETTERS[key];\n    state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));\n  }\n  return state;\n}\n\n/**\n * Reset all parameters to a (almost) pure context state\n * @note viewport and scissor will be set to the values in GL_PARAMETER_DEFAULTS,\n * NOT the canvas size dimensions, so they will have to be properly set after\n * calling this function.\n */\nexport function resetGLParameters(device: Device | WebGLRenderingContext): void {\n  setGLParameters(device, GL_PARAMETER_DEFAULTS);\n}\n\n// Helpers\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(object) {\n  // @ts-ignore dummy key variable\n  for (const key in object) {\n    return false;\n  }\n  return true;\n}\n"],"mappings":"SASEA,qBAAqB,EACrBC,oBAAoB,EACpBC,8BAA8B,EAC9BC,oBAAoB;AAAA,SAGdC,WAAW;AAUnB,OAAO,SAASC,eAAeA,CAC7BC,MAAsC,EACtCC,UAAwB,EAClB;EACN,MAAMC,WAAW,GAAGJ,WAAW,CAACK,MAAM,CAACH,MAAM,CAAC;EAC9C,MAAMI,EAAE,GAAGF,WAAW,CAACE,EAAE;EAEzB,IAAIC,aAAa,CAACJ,UAAU,CAAC,EAAE;IAC7B;EACF;EAEA,MAAMK,gBAAgB,GAAG,CAAC,CAAC;EAI3B,KAAK,MAAMC,GAAG,IAAIN,UAAU,EAAE;IAC5B,MAAMO,UAAU,GAAGC,MAAM,CAACF,GAAG,CAAC;IAC9B,MAAMG,MAAM,GAAGf,oBAAoB,CAACY,GAAG,CAAC;IACxC,IAAIG,MAAM,EAAE;MAEV,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;QAC9BJ,gBAAgB,CAACI,MAAM,CAAC,GAAG,IAAI;MACjC,CAAC,MAAM;QAKLA,MAAM,CAACN,EAAE,EAAEH,UAAU,CAACM,GAAG,CAAC,EAAEC,UAAU,CAAC;MACzC;IACF;EACF;EAUA,MAAMG,KAAK,GAAGP,EAAE,CAACQ,KAAK,IAAIR,EAAE,CAACQ,KAAK,CAACD,KAAK;EACxC,IAAIA,KAAK,EAAE;IACT,KAAK,MAAMJ,GAAG,IAAID,gBAAgB,EAAE;MAElC,MAAMO,eAAe,GAAGjB,8BAA8B,CAACW,GAAG,CAAC;MAG3DM,eAAe,CAACT,EAAE,EAAEH,UAAU,EAAEU,KAAK,CAAC;IACxC;EACF;AAGF;AAgBA,OAAO,SAASG,eAAeA,CAC7Bd,MAAsC,EAExB;EAAA,IADdC,UAAsE,GAAAc,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGrB,qBAAqB;EAE9F,MAAMQ,WAAW,GAAGJ,WAAW,CAACK,MAAM,CAACH,MAAM,CAAC;EAC9C,MAAMI,EAAE,GAAGF,WAAW,CAACE,EAAE;EAIzB,IAAI,OAAOH,UAAU,KAAK,QAAQ,EAAE;IAElC,MAAMM,GAAG,GAAGN,UAAU;IACtB,MAAMiB,MAAM,GAAGrB,oBAAoB,CAACU,GAAG,CAAC;IACxC,OAAOW,MAAM,GAAGA,MAAM,CAACd,EAAE,EAAEG,GAAG,CAAC,GAAGH,EAAE,CAACe,YAAY,CAACZ,GAAG,CAAC;EACxD;EAEA,MAAMa,aAAa,GAAGC,KAAK,CAACC,OAAO,CAACrB,UAAU,CAAC,GAAGA,UAAU,GAAGsB,MAAM,CAACC,IAAI,CAACvB,UAAU,CAAC;EAEtF,MAAMW,KAAK,GAAG,CAAC,CAAC;EAChB,KAAK,MAAML,GAAG,IAAIa,aAAa,EAAE;IAC/B,MAAMF,MAAM,GAAGrB,oBAAoB,CAACU,GAAG,CAAC;IACxCK,KAAK,CAACL,GAAG,CAAC,GAAGW,MAAM,GAAGA,MAAM,CAACd,EAAE,EAAEK,MAAM,CAACF,GAAG,CAAC,CAAC,GAAGH,EAAE,CAACe,YAAY,CAACV,MAAM,CAACF,GAAG,CAAC,CAAC;EAC9E;EACA,OAAOK,KAAK;AACd;AAQA,OAAO,SAASa,iBAAiBA,CAACzB,MAAsC,EAAQ;EAC9ED,eAAe,CAACC,MAAM,EAAEN,qBAAqB,CAAC;AAChD;AAKA,SAASW,aAAaA,CAACqB,MAAM,EAAE;EAE7B,KAAK,MAAMnB,GAAG,IAAImB,MAAM,EAAE;IACxB,OAAO,KAAK;EACd;EACA,OAAO,IAAI;AACb"}