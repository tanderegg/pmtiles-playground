{"version":3,"file":"track-context-state.js","names":["assert","GL_PARAMETER_DEFAULTS","GL_HOOKED_SETTERS","NON_CACHE_PARAMETERS","setGLParameters","getGLParameters","deepArrayEqual","GLState","constructor","gl","copyState","log","arguments","length","undefined","program","stateStack","enable","cache","Object","assign","_updateCache","bind","seal","push","values","pop","oldValues","valueChanged","oldValue","key","value","cached","getContextState","state","trackContextState","options","installProgramSpy","setter","installSetterSpy","installGetterOverride","glState","pushContextState","popContextState","functionName","originalGetterFunc","get","pname","has","defineProperty","configurable","originalSetterFunc","set","_len","params","Array","_key","originalUseProgram","useProgram","useProgramLuma","handle"],"sources":["../../../src/context/state-tracker/track-context-state.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\n// Support for listening to context state changes and intercepting state queries\n// NOTE: this system does not handle buffer bindings\nimport {assert} from '@luma.gl/core';\nimport {GL_PARAMETER_DEFAULTS, GL_HOOKED_SETTERS, NON_CACHE_PARAMETERS} from '../parameters/webgl-parameter-tables';\nimport {setGLParameters, getGLParameters} from '../parameters/unified-parameter-api';\nimport {deepArrayEqual} from './deep-array-equal';\n\n// HELPER CLASS - GLState\n\n/* eslint-disable no-shadow */\nclass GLState {\n  gl: WebGLRenderingContext;\n  program: unknown = null;\n  stateStack: object[] = [];\n  enable = true;\n  cache: Record<string, any>;\n  log;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    {\n      copyState = false, // Copy cache from params (slow) or initialize from WebGL defaults (fast)\n      log = () => {} // Logging function, called when gl parameter change calls are actually issued\n    } = {}\n  ) {\n    this.gl = gl;\n    this.cache = copyState ? getGLParameters(gl) : Object.assign({}, GL_PARAMETER_DEFAULTS);\n    this.log = log;\n\n    this._updateCache = this._updateCache.bind(this);\n    Object.seal(this);\n  }\n\n  push(values = {}) {\n    this.stateStack.push({});\n  }\n\n  pop() {\n    assert(this.stateStack.length > 0);\n    // Use the saved values in the state stack to restore parameters\n    const oldValues = this.stateStack[this.stateStack.length - 1];\n    setGLParameters(this.gl, oldValues);\n    // Don't pop until we have reset parameters (to make sure other \"stack frames\" are not affected)\n    this.stateStack.pop();\n  }\n\n  /**\n  // interceptor for context set functions - update our cache and our stack\n  // values (Object) - the key values for this setter\n   * @param values\n   * @returns\n   */\n  _updateCache(values: {[key: number | string]: any}) {\n    let valueChanged = false;\n    let oldValue; // = undefined\n\n    const oldValues: {[key: number | string]: any} | null = this.stateStack.length > 0 ? this.stateStack[this.stateStack.length - 1] : null;\n\n    for (const key in values) {\n      assert(key !== undefined);\n      const value = values[key];\n      const cached = this.cache[key];\n      // Check that value hasn't already been shadowed\n      if (!deepArrayEqual(value, cached)) {\n        valueChanged = true;\n        oldValue = cached;\n\n        // First, save current value being shadowed\n        // If a state stack frame is active, save the current parameter values for pop\n        // but first check that value hasn't already been shadowed and saved\n        if (oldValues && !(key in oldValues)) {\n          oldValues[key] = cached;\n        }\n\n        // Save current value being shadowed\n        this.cache[key] = value;\n      }\n    }\n\n    return {valueChanged, oldValue};\n  }\n}\n\nfunction getContextState(gl: WebGLRenderingContext): GLState {\n  // @ts-expect-error\n  return gl.state as GLState;\n}\n\n// PUBLIC API\n\n/**\n * Initialize WebGL state caching on a context\n * can be called multiple times to enable/disable\n *\n * @note After calling this function, context state will be cached\n * gl.state.push() and gl.state.pop() will be available for saving,\n * temporarily modifying, and then restoring state.\n */\nexport function trackContextState(\n  gl: WebGLRenderingContext,\n  options?: {\n    enable?: boolean;\n    copyState?: boolean;\n    log?: any;\n  }\n): WebGLRenderingContext {\n  const {enable = true, copyState} = options;\n  assert(copyState !== undefined);\n  // @ts-expect-error\n  if (!gl.state) {\n    // @ts-ignore\n    // const {polyfillContext} = global_;\n    // if (polyfillContext) {\n    //   polyfillContext(gl);\n    // }\n\n    // Create a state cache\n    // @ts-expect-error\n    gl.state = new GLState(gl, {copyState});\n\n    installProgramSpy(gl);\n\n    // intercept all setter functions in the table\n    for (const key in GL_HOOKED_SETTERS) {\n      const setter = GL_HOOKED_SETTERS[key];\n      installSetterSpy(gl, key, setter);\n    }\n\n    // intercept all getter functions in the table\n    installGetterOverride(gl, 'getParameter');\n    installGetterOverride(gl, 'isEnabled');\n  }\n\n  const glState = getContextState(gl);\n  glState.enable = enable;\n\n  return gl;\n}\n\n/**\n * Saves current WebGL context state onto an internal per-context stack\n */\nexport function pushContextState(gl: WebGLRenderingContext): void {\n  let glState = getContextState(gl);\n  if (!glState) {\n    trackContextState(gl, {copyState: false});\n    glState = getContextState(gl);\n  }\n  glState.push();\n}\n\n\n/**\n * Restores previously saved WebGL context state\n */\nexport function popContextState(gl: WebGLRenderingContext): void {\n  const glState = getContextState(gl);\n  assert(glState);\n  glState.pop();\n}\n\n// HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT\n\n/**\n// Overrides a WebGLRenderingContext state \"getter\" function\n// to return values directly from cache\n * @param gl\n * @param functionName\n */\nfunction installGetterOverride(gl: WebGLRenderingContext, functionName: string) {\n  // Get the original function from the WebGLRenderingContext\n  const originalGetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function get(pname) {\n    if (pname === undefined || NON_CACHE_PARAMETERS.has(pname)) {\n      // Invalid or blacklisted parameter, do not cache\n      return originalGetterFunc(pname);\n    }\n\n    const glState = getContextState(gl);\n    if (!(pname in glState.cache)) {\n      // WebGL limits are not prepopulated in the cache, call the original getter when first queried.\n      glState.cache[pname] = originalGetterFunc(pname);\n    }\n\n    // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n    return glState.enable\n      ? // Call the getter the params so that it can e.g. serve from a cache\n      glState.cache[pname]\n      : // Optionally call the original function to do a \"hard\" query from the WebGLRenderingContext\n      originalGetterFunc(pname);\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-from-cache`,\n    configurable: false\n  });\n}\n\n/**\n// Overrides a WebGLRenderingContext state \"setter\" function\n// to call a setter spy before the actual setter. Allows us to keep a cache\n// updated with a copy of the WebGL context state.\n * @param gl\n * @param functionName\n * @param setter\n * @returns\n */\nfunction installSetterSpy(gl: WebGLRenderingContext, functionName: string, setter: Function) {\n  // Get the original function from the WebGLRenderingContext\n  if (!gl[functionName]) {\n    // This could happen if we try to intercept WebGL2 method on a WebGL1 context\n    return;\n  }\n\n  const originalSetterFunc = gl[functionName].bind(gl);\n\n  // Wrap it with a spy so that we can update our state cache when it gets called\n  gl[functionName] = function set(...params) {\n    // Update the value\n    // Call the setter with the state cache and the params so that it can store the parameters\n    const glState = getContextState(gl);\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {valueChanged, oldValue} = setter(glState._updateCache, ...params);\n\n    // Call the original WebGLRenderingContext func to make sure the context actually gets updated\n    if (valueChanged) {\n      originalSetterFunc(...params);\n    }\n\n    // Note: if the original function fails to set the value, our state cache will be bad\n    // No solution for this at the moment, but assuming that this is unlikely to be a real problem\n    // We could call the setter after the originalSetterFunc. Concern is that this would\n    // cause different behavior in debug mode, where originalSetterFunc can throw exceptions\n\n    return oldValue;\n  };\n\n  // Set the name of this anonymous function to help in debugging and profiling\n  Object.defineProperty(gl[functionName], 'name', {\n    value: `${functionName}-to-cache`,\n    configurable: false\n  });\n}\n\nfunction installProgramSpy(gl: WebGLRenderingContext): void {\n  const originalUseProgram = gl.useProgram.bind(gl);\n\n  gl.useProgram = function useProgramLuma(handle) {\n    const glState = getContextState(gl);\n    if (glState.program !== handle) {\n      originalUseProgram(handle);\n      glState.program = handle;\n    }\n  };\n}\n"],"mappings":"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"}