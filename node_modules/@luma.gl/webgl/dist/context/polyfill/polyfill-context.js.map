{"version":3,"file":"polyfill-context.js","names":["assert","polyfillVertexArrayObject","WEBGL2_CONTEXT_POLYFILLS","WEBGL2_CONTEXT_OVERRIDES","getContextData","polyfillContext","gl","contextState","_polyfilled","initializeExtensions","installPolyfills","installOverrides","target","target2","EXTENSIONS","getSupportedExtensions","IGNORE_EXTENSIONS","extensionName","includes","extension","getExtension","_extensions","polyfills","Object","getOwnPropertyNames","polyfillExtension","_ref","defaults","meta","suffix","ext","key","keys","extKey","polyfill","arguments","bind","_ref2","forEach","originalFunc"],"sources":["../../../src/context/polyfill/polyfill-context.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\n// WebGL1/WebGL2 extension polyfill support\n//\n// Provides a function that creates polyfills for WebGL2 functions based\n// on available extensions and installs them on a supplied target (could be\n// the WebGLContext or its prototype, or a separate object).\n//\n// This is intended to be a stand-alone file with minimal dependencies,\n// easy to reuse or repurpose in other projects.\n\nimport {assert} from '@luma.gl/core';\nimport {polyfillVertexArrayObject} from './polyfill-vertex-array-object';\n\nimport {WEBGL2_CONTEXT_POLYFILLS, WEBGL2_CONTEXT_OVERRIDES} from './polyfill-table';\nimport {getContextData} from './context-data';\n\n/**\n * Registers extensions, polyfills or mock functions for extensions in the polyfills list\n */\nexport function polyfillContext(gl: WebGLRenderingContext): WebGL2RenderingContext {\n  const contextState = getContextData(gl);\n\n  if (!contextState._polyfilled) {\n    polyfillVertexArrayObject(gl);\n    initializeExtensions(gl);\n    installPolyfills(gl, WEBGL2_CONTEXT_POLYFILLS);\n    installOverrides(gl, {target: contextState, target2: gl});\n    contextState._polyfilled = true;\n  }\n\n  // Note - only supports a subset of WebGL2\n  return gl as WebGL2RenderingContext;\n}\n\nfunction initializeExtensions(gl: WebGLRenderingContext): void {\n  const contextState = getContextData(gl);\n  // `getSupportedExtensions` can return null when context is lost.\n  const EXTENSIONS = gl.getSupportedExtensions() || [];\n  // Generates warnings in Chrome\n  const IGNORE_EXTENSIONS = ['WEBGL_polygon_mode'];\n  for (const extensionName of EXTENSIONS) {\n    if (!IGNORE_EXTENSIONS.includes(extensionName)) {\n      const extension = gl.getExtension(extensionName);\n      contextState._extensions[extensionName] = extension;\n    }\n  }\n}\n\nfunction installPolyfills(gl: WebGLRenderingContext, polyfills): void {\n  const contextState = getContextData(gl);\n  for (const extension of Object.getOwnPropertyNames(polyfills)) {\n    if (extension !== 'overrides') {\n      polyfillExtension(gl, {extension, target: contextState, target2: gl});\n    }\n  }\n}\n\n/** Polyfills a single WebGL extension into the `target` object */\nfunction polyfillExtension(gl: WebGLRenderingContext, {extension, target, target2}): void {\n  const defaults = WEBGL2_CONTEXT_POLYFILLS[extension];\n  assert(defaults);\n\n  const {meta = {}} = defaults;\n  const {suffix = ''} = meta;\n\n  const ext = gl.getExtension(extension);\n\n  for (const key of Object.keys(defaults)) {\n    const extKey = `${key}${suffix}`;\n\n    let polyfill: Function | null = null;\n    if (key === 'meta') {\n      // ignore\n    } else if (typeof gl[key] === 'function') {\n      // WebGL2 implementation is already\n    } else if (ext && typeof ext[extKey] === 'function') {\n      // pick extension implementation,if available\n      polyfill = (...args) => ext[extKey](...args);\n    } else if (typeof defaults[key] === 'function') {\n      // pick the mock implementation, if no implementation was detected\n      polyfill = defaults[key].bind(target);\n    }\n\n    if (polyfill) {\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  }\n}\n\n/** Install simple overrides (mostly get* functions) */\nfunction installOverrides(gl: WebGLRenderingContext, {target, target2}) {\n  Object.keys(WEBGL2_CONTEXT_OVERRIDES).forEach((key) => {\n    if (typeof WEBGL2_CONTEXT_OVERRIDES[key] === 'function') {\n      // install an override, if no implementation was detected\n      const originalFunc = gl[key] ? gl[key].bind(gl) : () => {};\n      const polyfill = WEBGL2_CONTEXT_OVERRIDES[key].bind(null, gl, originalFunc);\n      target[key] = polyfill;\n      target2[key] = polyfill;\n    }\n  });\n}\n"],"mappings":"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"}