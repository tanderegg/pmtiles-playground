import { getParameterPolyfill } from './get-parameter-polyfill';
export declare const WEBGL2_CONTEXT_POLYFILLS: {
    OES_vertex_array_object: {
        meta: {
            suffix: string;
        };
        createVertexArray: () => void;
        deleteVertexArray: () => void;
        bindVertexArray: () => void;
        isVertexArray: () => boolean;
    };
    ANGLE_instanced_arrays: {
        meta: {
            suffix: string;
        };
        vertexAttribDivisor(location: number, divisor: number): void;
        drawElementsInstanced: () => void;
        drawArraysInstanced: () => void;
    };
    WEBGL_draw_buffers: {
        meta: {
            suffix: string;
        };
        drawBuffers: () => void;
    };
    EXT_disjoint_timer_query: {
        meta: {
            suffix: string;
        };
        createQuery: () => void;
        deleteQuery: () => void;
        beginQuery: () => void;
        endQuery: () => void;
        getQuery(handle: any, pname: string): void;
        getQueryParameter(handle: any, pname: string): void;
        getQueryObject: (handle: unknown, pname: unknown) => void;
    };
};
export declare const WEBGL2_CONTEXT_OVERRIDES: {
    readBuffer: (gl: WebGLRenderingContext, originalFunc: any, attachment: any) => void;
    getVertexAttrib: (gl: WebGLRenderingContext, originalFunc: any, location: any, pname: any) => any;
    getProgramParameter: (gl: WebGLRenderingContext, originalFunc: any, program: any, pname: any) => any;
    getInternalformatParameter: (gl: WebGLRenderingContext, originalFunc: any, target: any, format: any, pname: any) => any;
    getTexParameter(gl: any, originalFunc: any, target: any, pname: any): any;
    getParameter: typeof getParameterPolyfill;
    hint(gl: any, originalFunc: any, pname: any, value: any): any;
};
//# sourceMappingURL=polyfill-table.d.ts.map