{"version":3,"file":"polyfill-table.js","names":["assert","isWebGL2","getParameterPolyfill","getContextData","OES_vertex_array_object","ANGLE_instanced_arrays","WEBGL_draw_buffers","EXT_disjoint_timer_query","EXT_texture_filter_anisotropic","ERR_VAO_NOT_SUPPORTED","getExtensionData","gl","extension","webgl2","ext","getExtension","WEBGL2_CONTEXT_POLYFILLS","meta","suffix","createVertexArray","deleteVertexArray","bindVertexArray","isVertexArray","vertexAttribDivisor","location","divisor","drawElementsInstanced","drawArraysInstanced","drawBuffers","createQuery","deleteQuery","beginQuery","endQuery","getQuery","handle","pname","getQueryObject","getQueryParameter","WEBGL2_CONTEXT_OVERRIDES","readBuffer","originalFunc","attachment","getVertexAttrib","result","undefined","getProgramParameter","program","getInternalformatParameter","target","format","Int32Array","gl2","getTexParameter","contextData","_extensions","TEXTURE_MAX_ANISOTROPY_EXT","getParameter","hint","value"],"sources":["../../../src/context/polyfill/polyfill-table.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {assert} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport {isWebGL2} from '../context/webgl-checks';\n\nimport {getParameterPolyfill} from './get-parameter-polyfill';\nimport {getContextData} from './context-data';\n\n/* eslint-disable camelcase */\nconst OES_vertex_array_object = 'OES_vertex_array_object';\nconst ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nconst WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nconst EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nconst EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\n\nconst ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\n// Return object with webgl2 flag and an extension\nfunction getExtensionData(gl: WebGLRenderingContext, extension: string) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\n// function mapExtensionConstant(gl: WebGLRenderingContext, constant) {\n//   switch (constant) {\n//   case ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES: return GL.FRAGMENT_SHADER_DERIVATIVE_HINT;\n//   }\n// }\n\nexport const WEBGL2_CONTEXT_POLYFILLS = {\n  // POLYFILL TABLE\n  [OES_vertex_array_object]: {\n    meta: {suffix: 'OES'},\n    // NEW METHODS\n    createVertexArray: () => {\n      assert(false, ERR_VAO_NOT_SUPPORTED);\n    },\n    deleteVertexArray: () => {},\n    bindVertexArray: () => {},\n    isVertexArray: () => false\n  },\n  [ANGLE_instanced_arrays]: {\n    meta: {\n      suffix: 'ANGLE'\n      // constants: {\n      //   VERTEX_ATTRIB_ARRAY_DIVISOR: 'VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE'\n      // }\n    },\n    vertexAttribDivisor(location: number, divisor: number) {\n      // Accept divisor 0 even if instancing is not supported (0 = no instancing)\n      assert(divisor === 0, 'WebGL instanced rendering not supported');\n    },\n    drawElementsInstanced: () => {},\n    drawArraysInstanced: () => {}\n  },\n  [WEBGL_draw_buffers]: {\n    meta: {\n      suffix: 'WEBGL'\n    },\n    drawBuffers: () => {\n      assert(false);\n    }\n  },\n  [EXT_disjoint_timer_query]: {\n    meta: {suffix: 'EXT'},\n    // WebGL1: Polyfills the WebGL2 Query API\n    createQuery: () => {\n      assert(false);\n    },\n    deleteQuery: () => {\n      assert(false);\n    },\n    beginQuery: () => {\n      assert(false);\n    },\n    endQuery: () => {},\n    getQuery(handle, pname: string) {\n      return this.getQueryObject(handle, pname);\n    },\n    // The WebGL1 extension uses getQueryObject rather then getQueryParameter\n    getQueryParameter(handle, pname: string) {\n      return this.getQueryObject(handle, pname);\n    },\n    getQueryObject: (handle: unknown, pname: unknown) => {}\n  }\n};\n\nexport const WEBGL2_CONTEXT_OVERRIDES = {\n  // Ensure readBuffer is a no-op\n  readBuffer: (gl: WebGLRenderingContext, originalFunc, attachment) => {\n    if (isWebGL2(gl)) {\n      originalFunc(attachment);\n    } else {\n      // assert(attachment !== GL_COLOR_ATTACHMENT0 && attachment !== GL_FRONT);\n    }\n  },\n  // Override for getVertexAttrib that returns sane values for non-WebGL1 constants\n  getVertexAttrib: (gl: WebGLRenderingContext, originalFunc, location, pname) => {\n    // const gl = this; // eslint-disable-line\n    const {webgl2, ext} = getExtensionData(gl, ANGLE_instanced_arrays);\n\n    let result;\n    switch (pname) {\n      // WebGL1 attributes will never be integer\n      case GL.VERTEX_ATTRIB_ARRAY_INTEGER:\n        result = !webgl2 ? false : undefined;\n        break;\n      // if instancing is not available, return 0 meaning divisor has not been set\n      case GL.VERTEX_ATTRIB_ARRAY_DIVISOR:\n        result = !webgl2 && !ext ? 0 : undefined;\n        break;\n      default:\n    }\n\n    return result !== undefined ? result : originalFunc(location, pname);\n  },\n  // Handle transform feedback and uniform block queries in WebGL1\n  getProgramParameter: (gl: WebGLRenderingContext, originalFunc, program, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.TRANSFORM_FEEDBACK_BUFFER_MODE:\n          return GL.SEPARATE_ATTRIBS;\n        case GL.TRANSFORM_FEEDBACK_VARYINGS:\n          return 0;\n        case GL.ACTIVE_UNIFORM_BLOCKS:\n          return 0;\n        default:\n      }\n    }\n    return originalFunc(program, pname);\n  },\n  getInternalformatParameter: (gl: WebGLRenderingContext, originalFunc, target, format, pname) => {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case GL.SAMPLES:\n          return new Int32Array([0]);\n        default:\n      }\n    }\n    const gl2 = gl as WebGL2RenderingContext;\n    return gl2.getInternalformatParameter(target, format, pname);\n  },\n  getTexParameter(gl, originalFunc, target, pname) {\n    switch (pname) {\n      case GL.TEXTURE_MAX_ANISOTROPY_EXT:\n        const contextData = getContextData(gl);\n        const {_extensions} = contextData;\n        const ext = _extensions[EXT_texture_filter_anisotropic];\n        pname = (ext && ext.TEXTURE_MAX_ANISOTROPY_EXT) || GL.TEXTURE_MAX_ANISOTROPY_EXT;\n        break;\n      default:\n    }\n    return originalFunc(target, pname);\n  },\n  getParameter: getParameterPolyfill,\n  hint(gl, originalFunc, pname, value) {\n    // TODO - handle GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // switch (pname) {\n    // case GL.FRAGMENT_SHADER_DERIVATIVE_HINT:\n    // }\n    return originalFunc(pname, value);\n  }\n};\n"],"mappings":"AAGA,SAAQA,MAAM,QAAO,eAAe;AAAC,SAE7BC,QAAQ;AAAA,SAERC,oBAAoB;AAAA,SACpBC,cAAc;AAGtB,MAAMC,uBAAuB,GAAG,yBAAyB;AACzD,MAAMC,sBAAsB,GAAG,wBAAwB;AACvD,MAAMC,kBAAkB,GAAG,oBAAoB;AAC/C,MAAMC,wBAAwB,GAAG,0BAA0B;AAC3D,MAAMC,8BAA8B,GAAG,gCAAgC;AAEvE,MAAMC,qBAAqB,GAAG,kEAAkE;AAGhG,SAASC,gBAAgBA,CAACC,EAAyB,EAAEC,SAAiB,EAAE;EACtE,OAAO;IACLC,MAAM,EAAEZ,QAAQ,CAACU,EAAE,CAAC;IACpBG,GAAG,EAAEH,EAAE,CAACI,YAAY,CAACH,SAAS;EAChC,CAAC;AACH;AAQA,OAAO,MAAMI,wBAAwB,GAAG;EAEtC,CAACZ,uBAAuB,GAAG;IACzBa,IAAI,EAAE;MAACC,MAAM,EAAE;IAAK,CAAC;IAErBC,iBAAiB,EAAEA,CAAA,KAAM;MACvBnB,MAAM,CAAC,KAAK,EAAES,qBAAqB,CAAC;IACtC,CAAC;IACDW,iBAAiB,EAAEA,CAAA,KAAM,CAAC,CAAC;IAC3BC,eAAe,EAAEA,CAAA,KAAM,CAAC,CAAC;IACzBC,aAAa,EAAEA,CAAA,KAAM;EACvB,CAAC;EACD,CAACjB,sBAAsB,GAAG;IACxBY,IAAI,EAAE;MACJC,MAAM,EAAE;IAIV,CAAC;IACDK,mBAAmBA,CAACC,QAAgB,EAAEC,OAAe,EAAE;MAErDzB,MAAM,CAACyB,OAAO,KAAK,CAAC,EAAE,yCAAyC,CAAC;IAClE,CAAC;IACDC,qBAAqB,EAAEA,CAAA,KAAM,CAAC,CAAC;IAC/BC,mBAAmB,EAAEA,CAAA,KAAM,CAAC;EAC9B,CAAC;EACD,CAACrB,kBAAkB,GAAG;IACpBW,IAAI,EAAE;MACJC,MAAM,EAAE;IACV,CAAC;IACDU,WAAW,EAAEA,CAAA,KAAM;MACjB5B,MAAM,CAAC,KAAK,CAAC;IACf;EACF,CAAC;EACD,CAACO,wBAAwB,GAAG;IAC1BU,IAAI,EAAE;MAACC,MAAM,EAAE;IAAK,CAAC;IAErBW,WAAW,EAAEA,CAAA,KAAM;MACjB7B,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IACD8B,WAAW,EAAEA,CAAA,KAAM;MACjB9B,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IACD+B,UAAU,EAAEA,CAAA,KAAM;MAChB/B,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IACDgC,QAAQ,EAAEA,CAAA,KAAM,CAAC,CAAC;IAClBC,QAAQA,CAACC,MAAM,EAAEC,KAAa,EAAE;MAC9B,OAAO,IAAI,CAACC,cAAc,CAACF,MAAM,EAAEC,KAAK,CAAC;IAC3C,CAAC;IAEDE,iBAAiBA,CAACH,MAAM,EAAEC,KAAa,EAAE;MACvC,OAAO,IAAI,CAACC,cAAc,CAACF,MAAM,EAAEC,KAAK,CAAC;IAC3C,CAAC;IACDC,cAAc,EAAEA,CAACF,MAAe,EAAEC,KAAc,KAAK,CAAC;EACxD;AACF,CAAC;AAED,OAAO,MAAMG,wBAAwB,GAAG;EAEtCC,UAAU,EAAEA,CAAC5B,EAAyB,EAAE6B,YAAY,EAAEC,UAAU,KAAK;IACnE,IAAIxC,QAAQ,CAACU,EAAE,CAAC,EAAE;MAChB6B,YAAY,CAACC,UAAU,CAAC;IAC1B,CAAC,MAAM,CAEP;EACF,CAAC;EAEDC,eAAe,EAAEA,CAAC/B,EAAyB,EAAE6B,YAAY,EAAEhB,QAAQ,EAAEW,KAAK,KAAK;IAE7E,MAAM;MAACtB,MAAM;MAAEC;IAAG,CAAC,GAAGJ,gBAAgB,CAACC,EAAE,EAAEN,sBAAsB,CAAC;IAElE,IAAIsC,MAAM;IACV,QAAQR,KAAK;MAEX;QACEQ,MAAM,GAAG,CAAC9B,MAAM,GAAG,KAAK,GAAG+B,SAAS;QACpC;MAEF;QACED,MAAM,GAAG,CAAC9B,MAAM,IAAI,CAACC,GAAG,GAAG,CAAC,GAAG8B,SAAS;QACxC;MACF;IACF;IAEA,OAAOD,MAAM,KAAKC,SAAS,GAAGD,MAAM,GAAGH,YAAY,CAAChB,QAAQ,EAAEW,KAAK,CAAC;EACtE,CAAC;EAEDU,mBAAmB,EAAEA,CAAClC,EAAyB,EAAE6B,YAAY,EAAEM,OAAO,EAAEX,KAAK,KAAK;IAChF,IAAI,CAAClC,QAAQ,CAACU,EAAE,CAAC,EAAE;MACjB,QAAQwB,KAAK;QACX;UACE;QACF;UACE,OAAO,CAAC;QACV;UACE,OAAO,CAAC;QACV;MACF;IACF;IACA,OAAOK,YAAY,CAACM,OAAO,EAAEX,KAAK,CAAC;EACrC,CAAC;EACDY,0BAA0B,EAAEA,CAACpC,EAAyB,EAAE6B,YAAY,EAAEQ,MAAM,EAAEC,MAAM,EAAEd,KAAK,KAAK;IAC9F,IAAI,CAAClC,QAAQ,CAACU,EAAE,CAAC,EAAE;MACjB,QAAQwB,KAAK;QACX;UACE,OAAO,IAAIe,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5B;MACF;IACF;IACA,MAAMC,GAAG,GAAGxC,EAA4B;IACxC,OAAOwC,GAAG,CAACJ,0BAA0B,CAACC,MAAM,EAAEC,MAAM,EAAEd,KAAK,CAAC;EAC9D,CAAC;EACDiB,eAAeA,CAACzC,EAAE,EAAE6B,YAAY,EAAEQ,MAAM,EAAEb,KAAK,EAAE;IAC/C,QAAQA,KAAK;MACX;QACE,MAAMkB,WAAW,GAAGlD,cAAc,CAACQ,EAAE,CAAC;QACtC,MAAM;UAAC2C;QAAW,CAAC,GAAGD,WAAW;QACjC,MAAMvC,GAAG,GAAGwC,WAAW,CAAC9C,8BAA8B,CAAC;QACvD2B,KAAK,GAAIrB,GAAG,IAAIA,GAAG,CAACyC,0BAA0B,SAAkC;QAChF;MACF;IACF;IACA,OAAOf,YAAY,CAACQ,MAAM,EAAEb,KAAK,CAAC;EACpC,CAAC;EACDqB,YAAY,EAAEtD,oBAAoB;EAClCuD,IAAIA,CAAC9C,EAAE,EAAE6B,YAAY,EAAEL,KAAK,EAAEuB,KAAK,EAAE;IAKnC,OAAOlB,YAAY,CAACL,KAAK,EAAEuB,KAAK,CAAC;EACnC;AACF,CAAC"}