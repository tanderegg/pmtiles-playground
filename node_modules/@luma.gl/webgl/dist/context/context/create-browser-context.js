const DEFAULT_CONTEXT_PROPS = {
  webgl2: true,
  webgl1: true,
  powerPreference: 'high-performance',
  onContextLost: () => console.error('WebGL context lost'),
  onContextRestored: () => console.info('WebGL context restored')
};
export function createBrowserContext(canvas, props) {
  props = {
    ...DEFAULT_CONTEXT_PROPS,
    ...props
  };
  let errorMessage = null;
  const onCreateError = error => errorMessage = error.statusMessage || errorMessage;
  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);
  let gl = null;
  if (props.type === 'webgl2') {
    props = {
      ...props,
      webgl1: false
    };
  }
  if (props.type === 'webgl1') {
    props = {
      ...props,
      webgl2: false
    };
  }
  if (!gl && props.webgl2) {
    gl = canvas.getContext('webgl2', props);
  }
  if (!gl && props.webgl1) {
    gl = canvas.getContext('webgl', props);
  }
  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);
  if (!gl) {
    throw new Error(`Failed to create ${props.webgl2 && !props.webgl1 ? 'WebGL2' : 'WebGL'} context: ${errorMessage || 'Unknown error'}`);
  }
  if (props.onContextLost) {
    const {
      onContextLost
    } = props;
    canvas.addEventListener('webglcontextlost', event => onContextLost(event), false);
  }
  if (props.onContextRestored) {
    const {
      onContextRestored
    } = props;
    canvas.addEventListener('webglcontextrestored', event => onContextRestored(event), false);
  }
  return gl;
}
//# sourceMappingURL=create-browser-context.js.map