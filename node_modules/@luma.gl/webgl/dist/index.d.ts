export type { WebGLLimits } from './adapter/device-helpers/device-limits';
export { registerHeadlessGL } from './context/context/create-headless-context';
export { WebGLDevice } from './adapter/webgl-device';
export { WebGLCanvasContext } from './adapter/webgl-canvas-context';
export { WebGLResource, WebGLResource as WEBGLResource } from './adapter/objects/webgl-resource';
export { WEBGLBuffer } from './adapter/resources/webgl-buffer';
export { WEBGLTexture } from './adapter/resources/webgl-texture';
export { WEBGLShader } from './adapter/resources/webgl-shader';
export { WEBGLSampler } from './adapter/resources/webgl-sampler';
export { WEBGLFramebuffer } from './adapter/resources/webgl-framebuffer';
export { WEBGLRenderPipeline } from './adapter/resources/webgl-render-pipeline';
export { WEBGLCommandEncoder } from './adapter/resources/webgl-command-encoder';
export { WEBGLRenderPass } from './adapter/resources/webgl-render-pass';
export { WEBGLVertexArray } from './adapter/resources/webgl-vertex-array';
export type { RenderbufferProps } from './adapter/objects/webgl-renderbuffer';
export { WEBGLRenderbuffer } from './adapter/objects/webgl-renderbuffer';
export { WEBGLTransformFeedback } from './adapter/resources/webgl-transform-feedback';
export { Accessor } from './classic/accessor';
export type { AccessorObject } from './types';
export { isWebGL, isWebGL2, getWebGL2Context, assertWebGLContext, assertWebGL2Context } from './context/context/webgl-checks';
export { setDeviceParameters, withDeviceParameters } from './adapter/converters/device-parameters';
export { getShaderLayout } from './adapter/helpers/get-shader-layout';
export { convertGLToTextureFormat, _checkFloat32ColorAttachment } from './adapter/converters/texture-formats';
export { TEXTURE_FORMATS as _TEXTURE_FORMATS } from './adapter/converters/texture-formats';
export { trackContextState, pushContextState, popContextState } from './context/state-tracker/track-context-state';
export { polyfillContext } from './context/polyfill/polyfill-context';
export { resetGLParameters, setGLParameters, getGLParameters } from './context/parameters/unified-parameter-api';
export { withGLParameters } from './context/state-tracker/with-parameters';
//# sourceMappingURL=index.d.ts.map