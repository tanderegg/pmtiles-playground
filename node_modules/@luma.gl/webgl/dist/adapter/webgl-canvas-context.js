import { CanvasContext } from '@luma.gl/core';
import { WEBGLFramebuffer } from "./resources/webgl-framebuffer.js";
export class WebGLCanvasContext extends CanvasContext {
  constructor(device, props) {
    super(props);
    this.device = void 0;
    this.presentationSize = void 0;
    this._framebuffer = null;
    this.device = device;
    this.presentationSize = [-1, -1];
    this._setAutoCreatedCanvasId(`${this.device.id}-canvas`);
    this.update();
  }
  getCurrentFramebuffer() {
    this.update();
    this._framebuffer = this._framebuffer || new WEBGLFramebuffer(this.device, {
      handle: null
    });
    return this._framebuffer;
  }
  update() {
    const size = this.getPixelSize();
    const sizeChanged = size[0] !== this.presentationSize[0] || size[1] !== this.presentationSize[1];
    if (sizeChanged) {
      this.presentationSize = size;
      this.resize();
    }
  }
  resize(options) {
    if (!this.device.gl) return;
    if (this.canvas) {
      const devicePixelRatio = this.getDevicePixelRatio(options === null || options === void 0 ? void 0 : options.useDevicePixels);
      this.setDevicePixelRatio(devicePixelRatio, options);
      return;
    }
    const ext = this.device.gl.getExtension('STACKGL_resize_drawingbuffer');
    if (ext && options && 'width' in options && 'height' in options) {
      ext.resize(options.width, options.height);
    }
  }
  commit() {}
}
//# sourceMappingURL=webgl-canvas-context.js.map