import { Resource } from '@luma.gl/core';
import type { Device, ResourceProps } from '@luma.gl/core';
import { GL } from '@luma.gl/constants';
import { WebGLDevice } from '../webgl-device';
/**
 * Base class for WebGL object wrappers
 */
export declare abstract class WebGLResource<Props extends ResourceProps> extends Resource<Props> {
    readonly device: WebGLDevice;
    readonly gl: WebGLRenderingContext;
    readonly gl2: WebGL2RenderingContext;
    private _handle;
    private _bound;
    byteLength: number;
    constructor(device: Device, props: Props, defaultProps: Required<Props>);
    toString(): string;
    get handle(): any;
    delete({ deleteChildren }?: {
        deleteChildren?: boolean;
    }): this;
    bind(funcOrHandle?: any): any;
    unbind(): void;
    /**
     * Query a Resource parameter
     *
     * @param name
     * @return param
     */
    getParameter(pname: number, props?: any): any;
    getParameters(options?: {
        parameters?: any;
        keys?: any;
    }): Record<string, any>;
    /**
     * Update a Resource setting
     *
     * @todo - cache parameter to avoid issuing WebGL calls?
     *
     * @param pname - parameter (GL constant, value or key)
     * @param value {GLint|GLfloat|GLenum}
     * @return returns self to enable chaining
     */
    setParameter(pname: GL | string, value: any): this;
    setParameters(parameters: Record<GL, any>): this;
    stubRemovedMethods(className: string, version: string, methodNames: string[]): void;
    initialize(props: ResourceProps): void;
    _createHandle(): void;
    _deleteHandle(): void;
    _bindHandle(handle: any): void;
    _getOptsFromHandle(): void;
    _getParameter(pname: GL, props: Record<string, any>): number;
    _setParameter(pname: GL | string, value: any): void;
}
//# sourceMappingURL=webgl-resource.d.ts.map