let _Symbol$toStringTag;
import { assert } from '@luma.gl/core';
import { WebGLResource } from "./webgl-resource.js";
import { isRenderbufferFormatSupported } from "../converters/texture-formats.js";
import { convertTextureFormatToGL, getTextureFormatBytesPerPixel } from "../converters/texture-formats.js";
_Symbol$toStringTag = Symbol.toStringTag;
export class WEBGLRenderbuffer extends WebGLResource {
  get [_Symbol$toStringTag]() {
    return 'Renderbuffer';
  }
  get width() {
    return this.props.width;
  }
  get height() {
    return this.props.height;
  }
  get format() {
    return this.props.format;
  }
  get samples() {
    return this.props.samples;
  }
  get attachment() {
    return;
  }
  static isTextureFormatSupported(device, format) {
    return isRenderbufferFormatSupported(device.gl, format);
  }
  constructor(device, props) {
    if (typeof props.format === 'number') {
      throw new Error('Renderbuffer');
    }
    super(device, props, WEBGLRenderbuffer.defaultProps);
    this.glFormat = void 0;
    this.glFormat = convertTextureFormatToGL(this.props.format, device.isWebGL2);
    this._initialize(this.props);
  }
  resize(size) {
    if (size.width !== this.width || size.height !== this.height) {
      Object.assign(this.props, {
        ...size,
        format: this.format,
        samples: this.samples
      });
      this._initialize(this.props);
    }
  }
  _initialize(props) {
    const {
      format,
      width,
      height,
      samples
    } = props;
    assert(format, 'Needs format');
    this.trackDeallocatedMemory();
    this.gl.bindRenderbuffer(36161, this.handle);
    if (samples !== 0 && this.device.isWebGL2) {
      this.gl2.renderbufferStorageMultisample(36161, samples, this.glFormat, width, height);
    } else {
      this.gl.renderbufferStorage(36161, this.glFormat, width, height);
    }
    this.gl.bindRenderbuffer(36161, null);
    this.trackAllocatedMemory(width * height * (samples || 1) * getTextureFormatBytesPerPixel(this.glFormat, this.device.isWebGL2));
  }
  _createHandle() {
    return this.gl.createRenderbuffer();
  }
  _deleteHandle() {
    this.gl.deleteRenderbuffer(this.handle);
    this.trackDeallocatedMemory();
  }
  _bindHandle(handle) {
    this.gl.bindRenderbuffer(36161, handle);
  }
}
WEBGLRenderbuffer.defaultProps = {
  id: undefined,
  handle: undefined,
  userData: undefined,
  format: undefined,
  width: 1,
  height: 1,
  samples: 0
};
//# sourceMappingURL=webgl-renderbuffer.js.map