{"version":3,"file":"webgl-resource.js","names":["Resource","assert","uid","stubRemovedMethods","isWebGL2","assertWebGLContext","WebGLDevice","getKeyValue","ERR_RESOURCE_METHOD_UNDEFINED","WebGLResource","constructor","device","props","defaultProps","gl","gl2","_handle","_bound","byteLength","attach","id","name","handle","undefined","_createHandle","toString","delete","deleteChildren","arguments","length","children","_deleteHandle","removeStats","filter","Boolean","forEach","child","destroy","bind","funcOrHandle","_bindHandle","value","unbind","getParameter","pname","parameters","PARAMETERS","parameter","isWebgl2","parameterAvailable","getExtension","extension","webgl1Default","webgl1","webgl2Default","webgl2","defaultValue","_getParameter","getParameters","options","keys","values","parameterKeys","Object","key","getGLKey","type","setParameter","Error","_setParameter","setParameters","className","version","methodNames","initialize","_getOptsFromHandle"],"sources":["../../../src/adapter/objects/webgl-resource.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {Resource, assert, uid, stubRemovedMethods} from '@luma.gl/core';\nimport type {Device, ResourceProps} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport {isWebGL2, assertWebGLContext} from '../../context/context/webgl-checks';\nimport {WebGLDevice} from '../webgl-device';\n\n// Requires full GL enum to be bundled... Make these bindings dependent on dynamic import (debug)?\nimport {getKeyValue} from './constants-to-keys';\n\nconst ERR_RESOURCE_METHOD_UNDEFINED = 'Resource subclass must define virtual methods';\n\n/**\n * Base class for WebGL object wrappers\n */\nexport abstract class WebGLResource<Props extends ResourceProps> extends Resource<Props> {\n  readonly device: WebGLDevice;\n  readonly gl: WebGLRenderingContext;\n  readonly gl2: WebGL2RenderingContext;\n  private _handle: any;\n\n  private _bound = false;\n  // Only meaningful for resources that allocate GPU memory\n  byteLength = 0;\n\n  constructor(device: Device, props: Props, defaultProps: Required<Props>) {\n    super(device, props, defaultProps);\n\n    this.device = WebGLDevice.attach(device);\n    const gl = this.device.gl;\n\n    assertWebGLContext(gl);\n\n    // extends \n    const {id} = props || {};\n    this.gl = gl;\n    this.gl2 = gl as WebGL2RenderingContext;\n    this.id = id || uid(this.constructor.name);\n\n    // Set the handle\n    // If handle was provided, use it, otherwise create a new handle\n\n    // TODO - Stores the handle with context loss information\n    // this.glCount = glGetContextLossCount(this.gl);\n\n    // Default VertexArray needs to be created with null handle, so compare against undefined\n    this._handle = props?.handle;\n    if (this._handle === undefined) {\n      this._handle = this._createHandle();\n    }\n\n    this.byteLength = 0;\n  }\n\n  override toString(): string {\n    return `${this.constructor.name}(${this.id})`;\n  }\n\n  get handle() {\n    // TODO - Add context loss handling\n    // Will regenerate and reinitialize the handle if necessary\n    // const glCount = glGetContextLossCount(this.gl);\n    // if (this.glCount !== glCount) {\n    //   this._handle = this._createHandle(this.props);\n    //   this._glCount = glCount;\n    //   // Reinitialize object\n    //   this.initialize(this.props);\n    // }\n    return this._handle;\n  }\n\n  override delete({deleteChildren = false} = {}) {\n    // Delete this object, and get refs to any children\n    // @ts-expect-error\n    const children = this._handle && this._deleteHandle(this._handle);\n    if (this._handle) {\n      this.removeStats();\n    }\n    this._handle = null;\n\n    // Optionally, recursively delete the children\n    // @ts-expect-error\n    if (children && deleteChildren) {\n      // @ts-expect-error\n      children.filter(Boolean).forEach((child) => child.destroy());\n    }\n\n    return this;\n  }\n\n  bind(funcOrHandle = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this._bindHandle(funcOrHandle);\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this._bindHandle(this.handle);\n      this._bound = true;\n\n      value = funcOrHandle();\n\n      this._bound = false;\n      this._bindHandle(null);\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  unbind() {\n    this.bind(null);\n  }\n\n  /**\n   * Query a Resource parameter\n   *\n   * @param name\n   * @return param\n   */\n  getParameter(pname: number, props: any = {}): any {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    // @ts-expect-error\n    const parameters = this.constructor.PARAMETERS || {};\n\n    // Use parameter definitions to handle unsupported parameters\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if we can query for this parameter\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        const webgl1Default = parameter.webgl1;\n        const webgl2Default = 'webgl2' in parameter ? parameter.webgl2 : parameter.webgl1;\n        const defaultValue = isWebgl2 ? webgl2Default : webgl1Default;\n        return defaultValue;\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // Attempt to query for it and let WebGL report errors\n    return this._getParameter(pname, props);\n  }\n\n  // Many resources support a getParameter call -\n  // getParameters will get all parameters - slow but useful for debugging\n  // eslint-disable-next-line complexity\n  getParameters(options: {parameters?: any, keys?: any} = {}) {\n    const {parameters, keys} = options;\n\n    // Get parameter definitions for this Resource\n    // @ts-expect-error\n    const PARAMETERS = this.constructor.PARAMETERS || {};\n\n    const isWebgl2 = isWebGL2(this.gl);\n\n    const values: Record<string, any> = {};\n\n    // Query all parameters if no list provided\n    const parameterKeys = parameters || Object.keys(PARAMETERS);\n\n    // WEBGL limits\n    for (const pname of parameterKeys) {\n      const parameter = PARAMETERS[pname];\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        parameter &&\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (parameterAvailable) {\n        const key = keys ? this.device.getGLKey(pname) : pname;\n        values[key] = this.getParameter(pname, options);\n        if (keys && parameter.type === 'GLenum') {\n          values[key] = this.device.getGLKey(values[key]);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  /**\n   * Update a Resource setting\n   *\n   * @todo - cache parameter to avoid issuing WebGL calls?\n   *\n   * @param pname - parameter (GL constant, value or key)\n   * @param value {GLint|GLfloat|GLenum} \n   * @return returns self to enable chaining\n   */\n  setParameter(pname: GL | string, value: any): this {\n    pname = getKeyValue(this.gl, pname);\n    assert(pname);\n\n    // @ts-expect-error\n    const parameters = this.constructor.PARAMETERS || {};\n\n    const parameter = parameters[pname];\n    if (parameter) {\n      const isWebgl2 = isWebGL2(this.gl);\n\n      // Check if this parameter is available on this platform\n      const parameterAvailable =\n        (!('webgl2' in parameter) || isWebgl2) &&\n        (!('extension' in parameter) || this.gl.getExtension(parameter.extension));\n\n      if (!parameterAvailable) {\n        throw new Error('Parameter not available on this platform');\n      }\n\n      // Handle string keys\n      if (parameter.type === 'GLenum') {\n        // @ts-expect-error\n        value = getKeyValue(value);\n      }\n    }\n\n    // If unknown parameter - Could be a valid parameter not covered by PARAMS\n    // attempt to set it and let WebGL report errors\n    this._setParameter(pname, value);\n    return this;\n  }\n\n  /*\n   * Batch update resource parameters\n   * Assumes the subclass supports a setParameter call\n   */\n  setParameters(parameters: Record<GL, any>) {\n    for (const pname in parameters) {\n      this.setParameter(pname, parameters[pname]);\n    }\n    return this;\n  }\n\n  // Install stubs for removed methods\n  stubRemovedMethods(className: string, version: string, methodNames: string[]) {\n    return stubRemovedMethods(this, className, version, methodNames);\n  }\n\n  // PUBLIC VIRTUAL METHODS\n  initialize(props: ResourceProps) {}\n\n  // PROTECTED METHODS - These must be overridden by subclass\n  _createHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _deleteHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _bindHandle(handle: any) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getOptsFromHandle() {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _getParameter(pname: GL, props: Record<string, any>): number {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  _setParameter(pname: GL | string, value: any) {\n    throw new Error(ERR_RESOURCE_METHOD_UNDEFINED);\n  }\n\n  // PRIVATE METHODS\n\n  /*\n  _addStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get('Resources Created').incrementCount();\n    stats.get(`${name}s Created`).incrementCount();\n    stats.get(`${name}s Active`).incrementCount();\n  }\n\n  _removeStats() {\n    const name = this.constructor.name;\n    const stats = lumaStats.get('Resource Counts');\n\n    stats.get(`${name}s Active`).decrementCount();\n  }\n\n  trackAllocatedMemory(bytes, name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').addCount(bytes);\n    stats.get(`${name} Memory`).addCount(bytes);\n    this.byteLength = bytes;\n  }\n\n  trackDeallocatedMemory(name = this.constructor.name) {\n    const stats = lumaStats.get('Memory Usage');\n\n    stats.get('GPU Memory').subtractCount(this.byteLength);\n    stats.get(`${name} Memory`).subtractCount(this.byteLength);\n    this.byteLength = 0;\n  }\n  */\n}\n"],"mappings":"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"}