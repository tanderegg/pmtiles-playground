export function parseShaderCompilerLog(errLog) {
  const lines = errLog.split(/\r?\n/);
  const messages = [];
  for (const line of lines) {
    if (line.length <= 1) {
      continue;
    }
    const segments = line.split(':');
    if (segments.length === 2) {
      const [messageType, message] = segments;
      messages.push({
        message: message.trim(),
        type: getMessageType(messageType),
        lineNum: 0,
        linePos: 0
      });
      continue;
    }
    const [messageType, linePosition, lineNumber, ...rest] = segments;
    let lineNum = parseInt(lineNumber, 10);
    if (isNaN(lineNum)) {
      lineNum = 0;
    }
    let linePos = parseInt(linePosition, 10);
    if (isNaN(linePos)) {
      linePos = 0;
    }
    messages.push({
      message: rest.join(':').trim(),
      type: getMessageType(messageType),
      lineNum,
      linePos
    });
  }
  return messages;
}
function getMessageType(messageType) {
  const MESSAGE_TYPES = ['warning', 'error', 'info'];
  const lowerCaseType = messageType.toLowerCase();
  return MESSAGE_TYPES.includes(lowerCaseType) ? lowerCaseType : 'info';
}
//# sourceMappingURL=parse-shader-compiler-log.js.map