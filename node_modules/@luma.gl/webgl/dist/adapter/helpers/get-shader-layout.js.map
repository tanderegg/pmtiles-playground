{"version":3,"file":"get-shader-layout.js","names":["isWebGL2","Accessor","decodeGLUniformType","decodeGLAttributeType","isSamplerUniform","getShaderLayout","gl","program","shaderLayout","attributes","bindings","readAttributeDeclarations","uniformBlocks","readUniformBlocks","uniformBlock","uniforms","map","uniform","name","format","byteOffset","byteStride","arrayLength","push","type","location","visibility","vertex","fragment","minBindingSize","byteLength","readUniformBindings","textureUnit","viewDimension","sampleType","getSamplerInfo","length","varyings","readVaryings","count","getProgramParameter","index","activeInfo","getActiveAttrib","Error","compositeType","getAttribLocation","attributeType","stepMode","test","sort","a","b","gl2","getTransformFeedbackVarying","size","glType","components","accessor","varying","uniformCount","i","getActiveUniform","rawName","isArray","parseUniformName","webglLocation","getUniformLocation","uniformInfo","j","elementName","arrayElementUniformInfo","getBlockParameter","blockIndex","pname","getActiveUniformBlockParameter","blockCount","blockInfo","getActiveUniformBlockName","uniformIndices","uniformType","getActiveUniforms","uniformArrayLength","uniformOffset","uniformStride","SAMPLER_UNIFORMS_GL_TO_GPU","sampler","UNIFORM_NAME_REGEXP","matches","exec","Boolean"],"sources":["../../../src/adapter/helpers/get-shader-layout.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport type {\n  ShaderLayout,\n  UniformBinding,\n  UniformBlockBinding,\n  AttributeDeclaration,\n  VaryingBinding\n} from '@luma.gl/core';\n\nimport {GL} from '@luma.gl/constants';\nimport {isWebGL2} from '../../context/context/webgl-checks';\nimport {Accessor} from '../../classic/accessor'; // TODO - should NOT depend on classic API\nimport {decodeGLUniformType, decodeGLAttributeType, isSamplerUniform} from './decode-webgl-types';\n\n/**\n * Extract metadata describing binding information for a program's shaders\n * Note: `linkProgram()` needs to have been called\n * (although linking does not need to have been successful).\n */\nexport function getShaderLayout(gl: WebGLRenderingContext, program: WebGLProgram): ShaderLayout {\n  const shaderLayout: ShaderLayout = {\n    attributes: [],\n    bindings: []\n  };\n\n  shaderLayout.attributes = readAttributeDeclarations(gl, program);\n\n  // Uniform blocks\n  const uniformBlocks: UniformBlockBinding[] = readUniformBlocks(gl, program);\n  for (const uniformBlock of uniformBlocks) {\n    const uniforms = uniformBlock.uniforms.map(uniform => ({\n      name: uniform.name,\n      format: uniform.format,\n      byteOffset: uniform.byteOffset,\n      byteStride: uniform.byteStride,\n      arrayLength: uniform.arrayLength\n    }));\n    shaderLayout.bindings.push({\n      type: 'uniform',\n      name: uniformBlock.name,\n      location: uniformBlock.location,\n      visibility: (uniformBlock.vertex ? 0x1 : 0) & (uniformBlock.fragment ? 0x2 : 0),\n      minBindingSize: uniformBlock.byteLength,\n      uniforms\n    });\n  }\n\n  const uniforms: UniformBinding[] = readUniformBindings(gl, program);\n  let textureUnit = 0;\n  for (const uniform of uniforms) {\n    if (isSamplerUniform(uniform.type)) {\n      const {viewDimension, sampleType} = getSamplerInfo(uniform.type);\n      shaderLayout.bindings.push({\n        type: 'texture',\n        name: uniform.name,\n        location: textureUnit,\n        viewDimension,\n        sampleType\n      });\n\n      // @ts-expect-error\n      uniform.textureUnit = textureUnit;\n      textureUnit += 1;\n    }\n  }\n\n  if (uniforms.length) {\n    shaderLayout.uniforms = uniforms;\n  }\n\n  // Varyings\n  const varyings: VaryingBinding[] = readVaryings(gl, program);\n  // Note - samplers are always in unform bindings, even if uniform blocks are used\n  if (varyings?.length) {\n    shaderLayout.varyings = varyings;\n  }\n\n  return shaderLayout;\n}\n\n// HELPERS\n\n/**\n * Extract info about all transform feedback varyings\n *\n * linkProgram needs to have been called, although linking does not need to have been successful\n */\nfunction readAttributeDeclarations(\n  gl: WebGLRenderingContext,\n  program: WebGLProgram\n): AttributeDeclaration[] {\n  const attributes: AttributeDeclaration[] = [];\n\n  const count = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n  for (let index = 0; index < count; index++) {\n    const activeInfo = gl.getActiveAttrib(program, index);\n    if (!activeInfo) {\n      throw new Error('activeInfo');\n    }\n    const {name, type: compositeType /* , size*/} = activeInfo;\n    const location = gl.getAttribLocation(program, name);\n    // Add only user provided attributes, for built-in attributes like `gl_InstanceID` location will be < 0\n    if (location >= 0) {\n      const {attributeType} = decodeGLAttributeType(compositeType);\n\n      // Whether an attribute is instanced is essentially fixed by the structure of the shader code, \n      // so it is arguably a static property of the shader.\n      // There is no hint in the shader declarations\n      // Heuristic: Any attribute name containing the word \"instance\" will be assumed to be instanced\n      const stepMode = /instance/i.test(name) ? 'instance' : 'vertex';\n\n      attributes.push({\n        name,\n        location,\n        stepMode,\n        type: attributeType,\n        // size - for arrays, size is the number of elements in the array\n      });\n    }\n  }\n\n  // Sort by declaration order\n  attributes.sort((a: AttributeDeclaration, b: AttributeDeclaration) => a.location - b.location);\n  return attributes;\n}\n\n/**\n * Extract info about all transform feedback varyings\n *\n * linkProgram needs to have been called, although linking does not need to have been successful\n */\nfunction readVaryings(gl: WebGLRenderingContext, program: WebGLProgram): VaryingBinding[] {\n  if (!isWebGL2(gl)) {\n    return [];\n  }\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const varyings: VaryingBinding[] = [];\n\n  const count = gl.getProgramParameter(program, GL.TRANSFORM_FEEDBACK_VARYINGS);\n  for (let location = 0; location < count; location++) {\n    const activeInfo = gl2.getTransformFeedbackVarying(program, location);\n    if (!activeInfo) {\n      throw new Error('activeInfo');\n    }\n    const {name, type: compositeType, size} = activeInfo;\n    const {glType, components} = decodeGLUniformType(compositeType);\n    const accessor = new Accessor({type: glType, size: size * components});\n    const varying = {location, name, accessor}; // Base values\n    varyings.push(varying);\n  }\n\n  varyings.sort((a, b) => a.location - b.location);\n  return varyings;\n}\n\n/**\n * Extract info about all uniforms\n *\n * Query uniform locations and build name to setter map.\n */\nfunction readUniformBindings(gl: WebGLRenderingContext, program: WebGLProgram): UniformBinding[] {\n  const uniforms: UniformBinding[] = [];\n\n  const uniformCount = gl.getProgramParameter(program, GL.ACTIVE_UNIFORMS);\n  for (let i = 0; i < uniformCount; i++) {\n    const activeInfo = gl.getActiveUniform(program, i);\n    if (!activeInfo) {\n      throw new Error('activeInfo');\n    }\n    const {name: rawName, size, type} = activeInfo;\n    const {name, isArray} = parseUniformName(rawName);\n    let webglLocation = gl.getUniformLocation(program, name);\n    const uniformInfo = {\n      // WebGL locations are uniquely typed but just numbers\n      location: webglLocation as number,\n      name,\n      size,\n      type,\n      isArray\n    };\n    uniforms.push(uniformInfo);\n\n    // Array (e.g. matrix) uniforms can occupy several 4x4 byte banks\n    if (uniformInfo.size > 1) {\n      for (let j = 0; j < uniformInfo.size; j++) {\n        const elementName = `${name}[${j}]`;\n\n        webglLocation = gl.getUniformLocation(program, elementName);\n\n        const arrayElementUniformInfo = {\n          ...uniformInfo,\n          name: elementName,\n          location: webglLocation as number\n        };\n\n        uniforms.push(arrayElementUniformInfo);\n      }\n    }\n  }\n  return uniforms;\n}\n\n/**\n * Extract info about all \"active\" uniform blocks\n * @note In WebGL, \"active\" just means that unused (inactive) blocks may have been optimized away during linking)\n */\nfunction readUniformBlocks(\n  gl: WebGLRenderingContext,\n  program: WebGLProgram\n): UniformBlockBinding[] {\n  if (!isWebGL2(gl)) {\n    return [];\n  }\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const getBlockParameter = (blockIndex: number, pname: GL): any =>\n    gl2.getActiveUniformBlockParameter(program, blockIndex, pname);\n\n  const uniformBlocks: UniformBlockBinding[] = [];\n\n  const blockCount = gl2.getProgramParameter(program, GL.ACTIVE_UNIFORM_BLOCKS);\n  for (let blockIndex = 0; blockIndex < blockCount; blockIndex++) {\n    const blockInfo: UniformBlockBinding = {\n      name: gl2.getActiveUniformBlockName(program, blockIndex) || '',\n      location: getBlockParameter(blockIndex, GL.UNIFORM_BLOCK_BINDING),\n      byteLength: getBlockParameter(blockIndex, GL.UNIFORM_BLOCK_DATA_SIZE),\n      vertex: getBlockParameter(blockIndex, GL.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      fragment: getBlockParameter(blockIndex, GL.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      uniformCount: getBlockParameter(blockIndex, GL.UNIFORM_BLOCK_ACTIVE_UNIFORMS),\n      uniforms: [] as any[]\n    };\n\n    const uniformIndices =\n      (getBlockParameter(blockIndex, GL.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES) as number[]) || [];\n\n    const uniformType = gl2.getActiveUniforms(program, uniformIndices, GL.UNIFORM_TYPE); // Array of GLenum indicating the types of the uniforms.\n    const uniformArrayLength = gl2.getActiveUniforms(program, uniformIndices, GL.UNIFORM_SIZE); // Array of GLuint indicating the sizes of the uniforms.\n    // const uniformBlockIndex = gl2.getActiveUniforms(\n    //   program,\n    //   uniformIndices,\n    //   GL.UNIFORM_BLOCK_INDEX\n    // ); // Array of GLint indicating the block indices of the uniforms.\n    const uniformOffset = gl2.getActiveUniforms(program, uniformIndices, GL.UNIFORM_OFFSET); // Array of GLint indicating the uniform buffer offsets.\n    const uniformStride = gl2.getActiveUniforms(program, uniformIndices, GL.UNIFORM_ARRAY_STRIDE); // Array of GLint indicating the strides between the elements.\n    // const uniformMatrixStride = gl2.getActiveUniforms(\n    //   program,\n    //   uniformIndices,\n    //   GL.UNIFORM_MATRIX_STRIDE\n    // ); // Array of GLint indicating the strides between columns of a column-major matrix or a row-major matrix.\n    // const uniformRowMajor = gl2.getActiveUniforms(program, uniformIndices, GL.UNIFORM_IS_ROW_MAJOR);\n    for (let i = 0; i < blockInfo.uniformCount; ++i) {\n      const activeInfo = gl2.getActiveUniform(program, uniformIndices[i]);\n      if (!activeInfo) {\n        throw new Error('activeInfo');\n      }\n\n      blockInfo.uniforms.push({\n        name: activeInfo.name,\n        format: decodeGLUniformType(uniformType[i]).format,\n        type: uniformType[i],\n        arrayLength: uniformArrayLength[i],\n        byteOffset: uniformOffset[i],\n        byteStride: uniformStride[i]\n        // matrixStride: uniformStride[i],\n        // rowMajor: uniformRowMajor[i]\n      });\n    }\n\n    uniformBlocks.push(blockInfo);\n  }\n\n  uniformBlocks.sort((a, b) => a.location - b.location);\n  return uniformBlocks;\n}\n\n/**\n * TOOD - compare with a above, confirm copy, then delete\n  const bindings: Binding[] = [];\n  const count = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n  for (let blockIndex = 0; blockIndex < count; blockIndex++) {\n    const vertex = gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n    const fragment = gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n    const visibility = (vertex) + (fragment);\n    const binding: BufferBinding = {\n      location: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_BINDING),\n      // name: gl.getActiveUniformBlockName(program, blockIndex),\n      type: 'uniform',\n      visibility,\n      minBindingSize: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_DATA_SIZE),\n      // uniformCount: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_ACTIVE_UNIFORMS),\n      // uniformIndices: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),\n    }\n    bindings.push(binding);\n  }\n*/\n\nconst SAMPLER_UNIFORMS_GL_TO_GPU: Record<\n  number,\n  [\n    '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d',\n    'float' | 'unfilterable-float' | 'depth' | 'sint' | 'uint'\n  ]\n> = {\n  [GL.SAMPLER_2D]: ['2d', 'float'],\n  [GL.SAMPLER_CUBE]: ['cube', 'float'],\n  [GL.SAMPLER_3D]: ['3d', 'float'],\n  [GL.SAMPLER_2D_SHADOW]: ['3d', 'depth'],\n  [GL.SAMPLER_2D_ARRAY]: ['2d-array', 'float'],\n  [GL.SAMPLER_2D_ARRAY_SHADOW]: ['2d-array', 'depth'],\n  [GL.SAMPLER_CUBE_SHADOW]: ['cube', 'float'],\n  [GL.INT_SAMPLER_2D]: ['2d', 'sint'],\n  [GL.INT_SAMPLER_3D]: ['3d', 'sint'],\n  [GL.INT_SAMPLER_CUBE]: ['cube', 'sint'],\n  [GL.INT_SAMPLER_2D_ARRAY]: ['2d-array', 'uint'],\n  [GL.UNSIGNED_INT_SAMPLER_2D]: ['2d', 'uint'],\n  [GL.UNSIGNED_INT_SAMPLER_3D]: ['3d', 'uint'],\n  [GL.UNSIGNED_INT_SAMPLER_CUBE]: ['cube', 'uint'],\n  [GL.UNSIGNED_INT_SAMPLER_2D_ARRAY]: ['2d-array', 'uint']\n};\n\ntype SamplerInfo = {\n  viewDimension: '1d' | '2d' | '2d-array' | 'cube' | 'cube-array' | '3d';\n  sampleType: 'float' | 'unfilterable-float' | 'depth' | 'sint' | 'uint';\n};\n\nfunction getSamplerInfo(type: GL): SamplerInfo {\n  const sampler = SAMPLER_UNIFORMS_GL_TO_GPU[type];\n  if (!sampler) {\n    throw new Error('sampler');\n  }\n  const [viewDimension, sampleType] = sampler;\n  return {viewDimension, sampleType};\n}\n\n// HELPERS\n\nfunction parseUniformName(name: string): {name: string; length: number; isArray: boolean} {\n  // Shortcut to avoid redundant or bad matches\n  if (name[name.length - 1] !== ']') {\n    return {\n      name,\n      length: 1,\n      isArray: false\n    };\n  }\n\n  // if array name then clean the array brackets\n  const UNIFORM_NAME_REGEXP = /([^[]*)(\\[[0-9]+\\])?/;\n  const matches = UNIFORM_NAME_REGEXP.exec(name);\n  if (!matches || matches.length < 2) {\n    throw new Error(`Failed to parse GLSL uniform name ${name}`);\n  }\n\n  return {\n    name: matches[1],\n    length: matches[2] ? 1 : 0,\n    isArray: Boolean(matches[2])\n  };\n}\n"],"mappings":"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"}