{"version":3,"file":"get-device-info.js","names":["isWebGL2","getDeviceInfo","gl","vendorMasked","getParameter","rendererMasked","ext","getExtension","vendorUnmasked","UNMASKED_VENDOR_WEBGL","rendererUnmasked","UNMASKED_RENDERER_WEBGL","vendor","renderer","version","gpu","identifyGPUVendor","gpuBackend","identifyGPUBackend","gpuType","identifyGPUType","shadingLanguage","shadingLanguageVersion","type","exec","gpuVendor"],"sources":["../../../src/adapter/device-helpers/get-device-info.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {DeviceInfo} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport {isWebGL2} from '../../context/context/webgl-checks';\n\n/** @returns strings identifying the GPU vendor and driver. */\nexport function getDeviceInfo(gl: WebGLRenderingContext): DeviceInfo {\n  // \"Masked\" info is always available, but don't contain much useful information\n  const vendorMasked = gl.getParameter(GL.VENDOR);\n  const rendererMasked = gl.getParameter(GL.RENDERER);\n\n  // If we are lucky, unmasked info is available\n  // https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/\n  const ext = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendorUnmasked = gl.getParameter(ext ? ext.UNMASKED_VENDOR_WEBGL : GL.VENDOR);\n  const rendererUnmasked = gl.getParameter(ext ? ext.UNMASKED_RENDERER_WEBGL : GL.RENDERER);\n  const vendor = vendorUnmasked || vendorMasked;\n  const renderer = rendererUnmasked || rendererMasked;\n\n  // Driver version\n  const version = gl.getParameter(GL.VERSION) as string;\n\n  // \"Sniff\" the GPU type and backend from the info. This works best if unmasked info is available.\n  const gpu = identifyGPUVendor(vendor, renderer);\n  const gpuBackend = identifyGPUBackend(vendor, renderer);\n  const gpuType = identifyGPUType(vendor, renderer);\n\n  // Determine GLSL version\n  // For now, skip parsing of the long version string, just use context type below to deduce version\n  // const version = gl.getParameter(GL.SHADING_LANGUAGE_VERSION) as string;\n  // const shadingLanguageVersion = parseGLSLVersion(version);\n  const shadingLanguage = 'glsl';\n  const shadingLanguageVersion = isWebGL2(gl) ? 300 : 100\n\n  return {\n    type: isWebGL2(gl) ? 'webgl2' : 'webgl',\n    gpu,\n    gpuType,\n    gpuBackend,\n    vendor,\n    renderer,\n    version,\n    shadingLanguage,\n    shadingLanguageVersion\n  };\n}\n\n/** \"Sniff\" the GPU type from the info. This works best if unmasked info is available. */\nfunction identifyGPUVendor(vendor: string, renderer: string): 'nvidia' | 'intel' | 'apple' | 'amd' | 'software' | 'unknown' {\n  if ((/NVIDIA/i.exec(vendor)) || (/NVIDIA/i.exec(renderer))) {\n    return 'nvidia';\n  }\n  if ((/INTEL/i.exec(vendor)) || (/INTEL/i.exec(renderer))) {\n    return 'intel';\n  }\n  if ((/Apple/i.exec(vendor)) || (/Apple/i.exec(renderer))) {\n    return 'apple';\n  }\n  if (\n    (/AMD/i.exec(vendor)) ||\n    (/AMD/i.exec(renderer)) ||\n    (/ATI/i.exec(vendor)) ||\n    (/ATI/i.exec(renderer))\n  ) {\n    return 'amd';\n  }\n  if ((/SwiftShader/i.exec(vendor)) || (/SwiftShader/i.exec(renderer))) {\n    return 'software';\n  }\n  \n  return 'unknown';\n}\n\n/** \"Sniff\" the GPU backend from the info. This works best if unmasked info is available. */\nfunction identifyGPUBackend(vendor: string, renderer: string): 'opengl' | 'metal' | 'unknown' {\n  if ((/Metal/i.exec(vendor)) || (/Metal/i.exec(renderer))) {\n    return 'metal';\n  }\n  if ((/ANGLE/i.exec(vendor)) || (/ANGLE/i.exec(renderer))) {\n    return 'opengl';\n  }  \n  return 'unknown';\n}\n\nfunction identifyGPUType(vendor: string, renderer: string): 'discrete' | 'integrated' | 'cpu' | 'unknown' {\n  if ((/SwiftShader/i.exec(vendor)) || (/SwiftShader/i.exec(renderer))) {\n    return 'cpu';\n  }\n\n  const gpuVendor = identifyGPUVendor(vendor, renderer);\n  switch (gpuVendor) {\n    case 'intel':\n      return 'integrated';\n    case 'software':\n      return 'cpu';\n    case 'unknown':\n      return 'unknown';\n    default:\n      return 'discrete';\n  }\n}\n"],"mappings":"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"}