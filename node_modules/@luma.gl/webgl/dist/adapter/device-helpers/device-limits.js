import { getWebGL2Context } from "../../context/context/webgl-checks.js";
export function getDeviceLimits(gl) {
  const gl2 = getWebGL2Context(gl);
  return {
    maxTextureDimension1D: 0,
    maxTextureDimension2D: gl.getParameter(3379),
    maxTextureDimension3D: gl2 ? gl2.getParameter(32883) : 0,
    maxTextureArrayLayers: gl2 ? gl2.getParameter(35071) : 0,
    maxBindGroups: 1,
    maxDynamicUniformBuffersPerPipelineLayout: 0,
    maxDynamicStorageBuffersPerPipelineLayout: 0,
    maxSampledTexturesPerShaderStage: gl.getParameter(35660),
    maxSamplersPerShaderStage: gl.getParameter(35661),
    maxStorageBuffersPerShaderStage: 0,
    maxStorageTexturesPerShaderStage: 0,
    maxUniformBuffersPerShaderStage: gl2 ? gl2.getParameter(35375) : 0,
    maxUniformBufferBindingSize: gl2 ? gl2.getParameter(35376) : 0,
    maxStorageBufferBindingSize: 0,
    minUniformBufferOffsetAlignment: gl2 ? gl2.getParameter(35380) : 0,
    minStorageBufferOffsetAlignment: 0,
    maxVertexBuffers: 0,
    maxVertexAttributes: gl.getParameter(34921),
    maxVertexBufferArrayStride: 2048,
    maxInterStageShaderComponents: gl2 ? gl2.getParameter(35659) : 0,
    maxComputeWorkgroupStorageSize: 0,
    maxComputeInvocationsPerWorkgroup: 0,
    maxComputeWorkgroupSizeX: 0,
    maxComputeWorkgroupSizeY: 0,
    maxComputeWorkgroupSizeZ: 0,
    maxComputeWorkgroupsPerDimension: 0
  };
}
export function getWebGLLimits(gl) {
  const gl2 = getWebGL2Context(gl);
  function get(pname) {
    return gl.getParameter(pname);
  }
  function get2(pname, defaultValue) {
    return gl2 ? gl2.getParameter(pname) : defaultValue || 0;
  }
  return {
    [33902]: get(33902),
    [33901]: get(33901),
    [3379]: get(3379),
    [34076]: get(34076),
    [34930]: get(34930),
    [35661]: get(35661),
    [35660]: get(35660),
    [34024]: get(34024),
    [36348]: get(36348),
    [34921]: get(34921),
    [36347]: get(36347),
    [36349]: get(36349),
    [3386]: get(3386),
    [34047]: get(34047),
    [32883]: get2(32883),
    [35071]: get2(35071),
    [37447]: get2(37447),
    [36063]: get2(36063),
    [35379]: get2(35379),
    [35374]: get2(35374),
    [35377]: get2(35377),
    [34852]: get2(34852),
    [36203]: get2(36203),
    [33001]: get2(33001),
    [33000]: get2(33000),
    [37157]: get2(37157),
    [35373]: get2(35373),
    [35657]: get2(35657),
    [36183]: get2(36183),
    [37137]: get2(37137),
    [34045]: get2(34045),
    [35978]: get2(35978),
    [35979]: get2(35979),
    [35968]: get2(35968),
    [35376]: get2(35376),
    [35375]: get2(35375),
    [35659]: get2(35659),
    [37154]: get2(37154),
    [35371]: get2(35371),
    [35658]: get2(35658),
    [35076]: get2(35076),
    [35077]: get2(35077),
    [35380]: get2(35380)
  };
}
//# sourceMappingURL=device-limits.js.map