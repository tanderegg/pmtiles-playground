import { isWebGL2 } from "../../context/context/webgl-checks.js";
import { isOldIE } from "./is-old-ie.js";
import { getTextureFeatures, _checkFloat32ColorAttachment } from "../converters/texture-formats.js";
export function getDeviceFeatures(gl) {
  const features = getWebGLFeatures(gl);
  for (const textureFeature of getTextureFeatures(gl)) {
    features.add(textureFeature);
  }
  return features;
}
export function getWebGLFeatures(gl) {
  gl.getExtension('EXT_color_buffer_float');
  gl.getExtension('WEBGL_color_buffer_float');
  gl.getExtension('EXT_float_blend');
  const features = new Set();
  for (const feature of Object.keys(WEBGL_FEATURES)) {
    if (isFeatureSupported(gl, feature)) {
      features.add(feature);
    }
  }
  return features;
}
function isFeatureSupported(gl, feature) {
  const featureInfo = WEBGL_FEATURES[feature];
  if (!featureInfo) {
    return false;
  }
  const [webgl1Feature, webgl2Feature] = featureInfo || [];
  const featureDefinition = isWebGL2(gl) ? webgl2Feature : webgl1Feature;
  if (typeof featureDefinition === 'boolean') {
    return featureDefinition;
  }
  switch (feature) {
    case 'texture-renderable-rgba32float-webgl':
      return isWebGL2(gl) ? Boolean(gl.getExtension(featureDefinition)) : _checkFloat32ColorAttachment(gl);
    case 'glsl-derivatives':
      return canCompileGLSLExtension(gl, featureDefinition);
    case 'glsl-frag-data':
      return canCompileGLSLExtension(gl, featureDefinition, {
        behavior: 'require'
      });
    case 'glsl-frag-depth':
      return canCompileGLSLExtension(gl, featureDefinition);
    default:
      return Boolean(gl.getExtension(featureDefinition));
  }
}
const compiledGLSLExtensions = {};
export function canCompileGLSLExtension(gl, extensionName) {
  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (!isOldIE(opts)) {
    return true;
  }
  if (extensionName in compiledGLSLExtensions) {
    return compiledGLSLExtensions[extensionName];
  }
  const behavior = opts.behavior || 'enable';
  const source = `#extension GL_${extensionName} : ${behavior}\nvoid main(void) {}`;
  const shader = gl.createShader(35633);
  if (!shader) {
    throw new Error('shader');
  }
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  const canCompile = gl.getShaderParameter(shader, 35713);
  gl.deleteShader(shader);
  compiledGLSLExtensions[extensionName] = canCompile;
  return canCompile;
}
const WEBGL_FEATURES = {
  'webgl': [true, true],
  'webgl2': [false, true],
  'timer-query-webgl': ['EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2'],
  'transform-feedback-webgl2': [false, true],
  'vertex-array-object-webgl1': ['OES_vertex_array_object', true],
  'instanced-rendering-webgl1': ['ANGLE_instanced_arrays', true],
  'multiple-render-targets-webgl1': ['WEBGL_draw_buffers', true],
  'index-uint32-webgl1': ['OES_element_index_uint', true],
  'blend-minmax-webgl1': ['EXT_blend_minmax', true],
  'texture-blend-float-webgl1': ['EXT_float_blend', 'EXT_float_blend'],
  'texture-formats-srgb-webgl1': ['EXT_sRGB', true],
  'texture-formats-depth-webgl1': ['WEBGL_depth_texture', true],
  'texture-formats-float32-webgl1': ['OES_texture_float', true],
  'texture-formats-float16-webgl1': ['OES_texture_half_float', true],
  'texture-filter-linear-float32-webgl': ['OES_texture_float_linear', 'OES_texture_float_linear'],
  'texture-filter-linear-float16-webgl': ['OES_texture_half_float_linear', 'OES_texture_half_float_linear'],
  'texture-filter-anisotropic-webgl': ['EXT_texture_filter_anisotropic', 'EXT_texture_filter_anisotropic'],
  'texture-renderable-rgba32float-webgl': ['WEBGL_color_buffer_float', 'EXT_color_buffer_float'],
  'texture-renderable-float32-webgl': [false, 'EXT_color_buffer_float'],
  'texture-renderable-float16-webgl': ['EXT_color_buffer_half_float', 'EXT_color_buffer_half_float'],
  'glsl-frag-data': ['WEBGL_draw_buffers', true],
  'glsl-frag-depth': ['EXT_frag_depth', true],
  'glsl-derivatives': ['OES_standard_derivatives', true],
  'glsl-texture-lod': ['EXT_shader_texture_lod', true]
};
//# sourceMappingURL=device-features.js.map