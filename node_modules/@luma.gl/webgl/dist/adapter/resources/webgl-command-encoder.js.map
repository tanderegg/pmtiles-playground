{"version":3,"file":"webgl-command-encoder.js","names":["CommandEncoder","WEBGLCommandBuffer","WEBGLCommandEncoder","constructor","device","props","commandBuffer","destroy","finish","submitCommands","copyBufferToBuffer","options","commands","push","name","copyBufferToTexture","copyTextureToBuffer","copyTextureToTexture","pushDebugGroup","groupLabel","popDebugGroup","insertDebugMarker","markerLabel"],"sources":["../../../src/adapter/resources/webgl-command-encoder.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {CommandEncoder, CommandEncoderProps} from '@luma.gl/core';\nimport type {\n  CopyBufferToBufferOptions,\n  CopyBufferToTextureOptions,\n  CopyTextureToBufferOptions,\n  CopyTextureToTextureOptions\n} from '@luma.gl/core';\n\nimport {WEBGLCommandBuffer} from './webgl-command-buffer';\nimport {WebGLDevice} from '../webgl-device';\n\nexport class WEBGLCommandEncoder extends CommandEncoder {\n  readonly device: WebGLDevice;\n\n  readonly commandBuffer: WEBGLCommandBuffer;\n\n  constructor(device: WebGLDevice, props: CommandEncoderProps) {\n    super(device, props);\n    this.device = device;\n    this.commandBuffer = new WEBGLCommandBuffer(device);\n  }\n\n  override destroy(): void {}\n\n  override finish(): void {\n    this.commandBuffer.submitCommands();\n  }\n\n  // beginRenderPass(GPURenderPassDescriptor descriptor): GPURenderPassEncoder;\n  // beginComputePass(optional GPUComputePassDescriptor descriptor = {}): GPUComputePassEncoder;\n  // finish(options?: {id?: string}): GPUCommandBuffer;\n\n  copyBufferToBuffer(options: CopyBufferToBufferOptions): void {\n    this.commandBuffer.commands.push({name: 'copy-buffer-to-buffer', options});\n  }\n\n  copyBufferToTexture(options: CopyBufferToTextureOptions) {\n    this.commandBuffer.commands.push({name: 'copy-buffer-to-texture', options});\n  }\n\n  copyTextureToBuffer(options: CopyTextureToBufferOptions): void {\n    this.commandBuffer.commands.push({name: 'copy-texture-to-buffer', options});\n  }\n\n  copyTextureToTexture(options: CopyTextureToTextureOptions): void {\n    this.commandBuffer.commands.push({name: 'copy-texture-to-texture', options});\n  }\n\n  override pushDebugGroup(groupLabel: string): void {}\n  override popDebugGroup() {}\n\n  override insertDebugMarker(markerLabel: string): void {}\n\n  // writeTimestamp(querySet: Query, queryIndex: number): void {}\n\n  // resolveQuerySet(options: {\n  //   querySet: GPUQuerySet,\n  //   firstQuery: number,\n  //   queryCount: number,\n  //   destination: Buffer,\n  //   destinationOffset?: number;\n  // }): void;\n}\n"],"mappings":"AAGA,SAAQA,cAAc,QAA4B,eAAe;AAAC,SAQ1DC,kBAAkB;AAG1B,OAAO,MAAMC,mBAAmB,SAASF,cAAc,CAAC;EAKtDG,WAAWA,CAACC,MAAmB,EAAEC,KAA0B,EAAE;IAC3D,KAAK,CAACD,MAAM,EAAEC,KAAK,CAAC;IAAC,KALdD,MAAM;IAAA,KAENE,aAAa;IAIpB,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,aAAa,GAAG,IAAIL,kBAAkB,CAACG,MAAM,CAAC;EACrD;EAESG,OAAOA,CAAA,EAAS,CAAC;EAEjBC,MAAMA,CAAA,EAAS;IACtB,IAAI,CAACF,aAAa,CAACG,cAAc,CAAC,CAAC;EACrC;EAMAC,kBAAkBA,CAACC,OAAkC,EAAQ;IAC3D,IAAI,CAACL,aAAa,CAACM,QAAQ,CAACC,IAAI,CAAC;MAACC,IAAI,EAAE,uBAAuB;MAAEH;IAAO,CAAC,CAAC;EAC5E;EAEAI,mBAAmBA,CAACJ,OAAmC,EAAE;IACvD,IAAI,CAACL,aAAa,CAACM,QAAQ,CAACC,IAAI,CAAC;MAACC,IAAI,EAAE,wBAAwB;MAAEH;IAAO,CAAC,CAAC;EAC7E;EAEAK,mBAAmBA,CAACL,OAAmC,EAAQ;IAC7D,IAAI,CAACL,aAAa,CAACM,QAAQ,CAACC,IAAI,CAAC;MAACC,IAAI,EAAE,wBAAwB;MAAEH;IAAO,CAAC,CAAC;EAC7E;EAEAM,oBAAoBA,CAACN,OAAoC,EAAQ;IAC/D,IAAI,CAACL,aAAa,CAACM,QAAQ,CAACC,IAAI,CAAC;MAACC,IAAI,EAAE,yBAAyB;MAAEH;IAAO,CAAC,CAAC;EAC9E;EAESO,cAAcA,CAACC,UAAkB,EAAQ,CAAC;EAC1CC,aAAaA,CAAA,EAAG,CAAC;EAEjBC,iBAAiBA,CAACC,WAAmB,EAAQ,CAAC;AAWzD"}