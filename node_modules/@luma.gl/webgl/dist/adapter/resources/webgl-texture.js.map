{"version":3,"file":"webgl-texture.js","names":["Texture","log","assert","isPowerOfTwo","loadImage","isObjectEmpty","withGLParameters","convertTextureFormatToGL","getWebGLTextureParameters","getTextureFormatBytesPerPixel","convertSamplerParametersToWebGL","updateSamplerParametersForNPOT","WEBGLBuffer","WEBGLSampler","DEFAULT_WEBGL_TEXTURE_PROPS","parameters","pixelStore","pixels","border","dataFormat","undefined","textureUnit","target","WEBGLTexture","constructor","device","props","_this$props","format","MAX_ATTRIBUTES","gl","gl2","handle","sampler","glFormat","type","mipmaps","loaded","_video","createTexture","setSpectorMetadata","data","getWebGLTextureTarget","Object","assign","initialize","seal","destroy","deleteTexture","removeStats","trackDeallocatedMemory","destroyed","toString","id","width","height","arguments","length","dimension","initializeCube","Promise","then","resolvedImageData","isVideo","HTMLVideoElement","readyState","HAVE_METADATA","addEventListener","compressed","depth","isWebGL2","_deduceParameters","Number","isFinite","activeTexture","bindTexture","isWebGL1","isNPOT","warn","setImageData","setSampler","_setSamplerParameters","generateMipmap","video","lastTime","HAVE_CURRENT_DATA","currentTime","setCubeMapImageData","samplerProps","resize","options","update","setSubImageData","params","setImageData3D","level","offset","dataType","_getDataType","texImage2D","assertWebGL2","bindBuffer","levelIndex","levelData","entries","compressedTexImage2D","byteLength","trackAllocatedMemory","bytesPerPixel","_ref","x","y","ndarray","shape","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","WebGLBuffer","copyFramebuffer","opts","error","getActiveUnit","getParameter","bind","unbind","_ref2","_deduceImageSize","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","ImageBitmap","videoWidth","videoHeight","imageDataMap","resolvedFaces","all","FACES","map","face","facePixels","Array","isArray","forEach","index","image","lodLevel","setImageDataForFace","imageData","webglTextureFormat","texImage3D","logParameters","pname","pvalue","param","value","texParameterf","texParameteri","_getWebGL1NPOTParameterOverride","npot","Error"],"sources":["../../../src/adapter/resources/webgl-texture.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\n// Texture class.\n// @todo\n// - [ ] cube texture init params\n// - [ ] video (external) textures\n\nimport {\n  Device,\n  TextureProps,\n  Sampler,\n  SamplerProps,\n  SamplerParameters,\n  TypedArray\n} from '@luma.gl/core';\nimport {Texture, log, assert, isPowerOfTwo, loadImage, isObjectEmpty} from '@luma.gl/core';\nimport {GL, GLSamplerParameters} from '@luma.gl/constants';\nimport {withGLParameters} from '../../context/state-tracker/with-parameters';\nimport {\n  convertTextureFormatToGL,\n  getWebGLTextureParameters,\n  getTextureFormatBytesPerPixel\n} from '../converters/texture-formats';\nimport {\n  convertSamplerParametersToWebGL,\n  updateSamplerParametersForNPOT\n} from '../converters/sampler-parameters';\nimport {WebGLDevice} from '../webgl-device';\nimport {WEBGLBuffer} from './webgl-buffer';\nimport {WEBGLSampler} from './webgl-sampler';\n\nexport type WEBGLTextureProps = TextureProps & {\n  /** @deprecated use props.sampler */\n  parameters?: Record<number, number>;\n  /** @deprecated use props.data */\n  pixels?: any;\n  /** @deprecated use props.format */\n  dataFormat?: number | null;\n  /** @deprecated rarely supported */\n  border?: number;\n  /** @deprecated WebGL only. */\n  pixelStore?: object;\n  /** @deprecated WebGL only. */\n  textureUnit?: number;\n  /** @deprecated WebGL only. Use dimension. */\n  target?: number;\n};\n\nexport const DEFAULT_WEBGL_TEXTURE_PROPS = {\n  // deprecated\n  parameters: {},\n  pixelStore: {},\n  pixels: null,\n  border: 0,\n  dataFormat: undefined!,\n  textureUnit: undefined!,\n  target: undefined!\n};\n\nexport type TextureSourceData =\n  | TypedArray\n  | ImageData\n  | HTMLImageElement\n  | HTMLCanvasElement\n  | ImageBitmap\n  | HTMLVideoElement;\n\ntype SetImageDataOptions = {\n  target?: number;\n  level?: number;\n  dataFormat?: any;\n  width?: number;\n  height?: number;\n  depth?: number;\n  glFormat?: GL;\n  type?: any;\n  offset?: number;\n  data: any; // TextureSourceData;\n  compressed?: boolean;\n  parameters?: Record<GL, any>;\n  /** @deprecated */\n  pixels?: any;\n};\n\n/**\n * @param {*} pixels, data -\n *  null - create empty texture of specified format\n *  Typed array - init from image data in typed array\n *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n *  HTMLVideoElement - Creates video texture. Auto width/height\n *\n * @param  x - xOffset from where texture to be updated\n * @param  y - yOffset from where texture to be updated\n * @param  width - width of the sub image to be updated\n * @param  height - height of the sub image to be updated\n * @param  level - mip level to be updated\n * @param {GLenum} format - internal format of image data.\n * @param {GLenum} type\n *  - format of array (autodetect from type) or\n *  - (WEBGL2) format of buffer or ArrayBufferView\n * @param {GLenum} dataFormat - format of image data.\n * @param {Number} offset - (WEBGL2) offset from start of buffer\n * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n */\ntype SetSubImageDataOptions = {\n  target?: number;\n  level?: number;\n  dataFormat?: any;\n  width?: number;\n  height?: number;\n  depth?: number;\n  glFormat?: any;\n  type?: any;\n  offset?: number;\n  data: any;\n  parameters?: Record<GL, any>;\n  compressed?: boolean;\n  x?: number;\n  y?: number;\n  /** @deprecated */\n  pixels?: any;\n};\n\ntype SetImageData3DOptions = {\n  level?: number;\n  dataFormat?: any;\n  width?: number;\n  height?: number;\n  depth?: number;\n  format?: any;\n  type?: any;\n  offset?: number;\n  data: any;\n  parameters?: Record<GL, any>;\n};\n\n// Polyfill\nexport class WEBGLTexture extends Texture<WEBGLTextureProps> {\n  // TODO - remove?\n  static FACES: number[] = [\n    GL.TEXTURE_CUBE_MAP_POSITIVE_X,\n    GL.TEXTURE_CUBE_MAP_NEGATIVE_X,\n    GL.TEXTURE_CUBE_MAP_POSITIVE_Y,\n    GL.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n    GL.TEXTURE_CUBE_MAP_POSITIVE_Z,\n    GL.TEXTURE_CUBE_MAP_NEGATIVE_Z\n  ];\n\n  readonly MAX_ATTRIBUTES: number;\n  readonly device: WebGLDevice;\n  readonly gl: WebGLRenderingContext;\n  readonly gl2: WebGL2RenderingContext | null;\n  readonly handle: WebGLTexture;\n\n  /** Sampler object (currently unused) */\n  sampler: WEBGLSampler = undefined;\n\n  // data;\n\n  glFormat: GL = undefined;\n  type: GL = undefined;\n  dataFormat: GL = undefined;\n  mipmaps: boolean = undefined;\n\n  /**\n   * @note `target` cannot be modified by bind:\n   * textures are special because when you first bind them to a target,\n   * they get special information. When you first bind a texture as a\n   * GL_TEXTURE_2D, you are saying that this texture is a 2D texture.\n   * And it will always be a 2D texture; this state cannot be changed ever.\n   * A texture that was first bound as a GL_TEXTURE_2D, must always be bound as a GL_TEXTURE_2D;\n   * attempting to bind it as GL_TEXTURE_3D will give rise to a run-time error\n   * */\n  target: GL;\n  textureUnit: number = undefined;\n\n  /**\n   * Program.draw() checks the loaded flag of all textures to avoid\n   * Textures that are still loading from promises\n   * Set to true as soon as texture has been initialized with valid data\n   */\n  loaded: boolean = false;\n  _video: {\n    video: HTMLVideoElement;\n    parameters: any;\n    lastTime: number;\n  };\n\n  constructor(device: Device, props: WEBGLTextureProps) {\n    super(device, {...DEFAULT_WEBGL_TEXTURE_PROPS, format: 'rgba8unorm', ...props});\n\n    this.device = device as WebGLDevice;\n    this.gl = this.device.gl;\n    this.gl2 = this.device.gl2;\n    this.handle = this.props.handle || this.gl.createTexture();\n    this.device.setSpectorMetadata(this.handle, {...this.props, data: typeof this.props.data}); // {name: this.props.id};\n\n    this.glFormat = GL.RGBA;\n    this.target = getWebGLTextureTarget(this.props);\n\n    // Program.draw() checks the loaded flag of all textures\n    this.loaded = false;\n\n    // Signature: new Texture2D(gl, {data: url})\n    if (typeof this.props?.data === 'string') {\n      Object.assign(this.props, {data: loadImage(this.props.data)});\n    }\n\n    this.initialize(this.props);\n\n    Object.seal(this);\n  }\n\n  override destroy(): void {\n    if (this.handle) {\n      this.gl.deleteTexture(this.handle);\n      this.removeStats();\n      this.trackDeallocatedMemory('Texture');\n      // this.handle = null;\n      this.destroyed = true;\n    }\n  }\n\n  override toString(): string {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  // eslint-disable-next-line max-statements\n  initialize(props: WEBGLTextureProps = {}): this {\n    // Cube textures\n    if (this.props.dimension === 'cube') {\n      return this.initializeCube(props);\n    }\n\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData =>\n        this.initialize(\n          Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          })\n        )\n      );\n      return this;\n    }\n\n    const isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;\n    // @ts-expect-error\n    if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {\n      this._video = null; // Declare member before the object is sealed\n      // @ts-expect-error\n      data.addEventListener('loadeddata', () => this.initialize(props));\n      return this;\n    }\n\n    const {parameters = {} as Record<GL, any>} = props;\n\n    const {pixels = null, pixelStore = {}, textureUnit = undefined} = props;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat, type, compressed = false, mipmaps = true} = props;\n    const {depth = 0} = props;\n\n    const glFormat = convertTextureFormatToGL(props.format, this.device.isWebGL2);\n\n    // Deduce width and height\n    ({width, height, compressed, dataFormat, type} = this._deduceParameters({\n      format: props.format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    // this.depth = depth;\n    this.glFormat = glFormat;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    if (mipmaps && this.device.isWebGL1 && isNPOT(this.width, this.height)) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaps`)();\n      mipmaps = false;\n    }\n\n    this.mipmaps = mipmaps;\n\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format: glFormat,\n      type,\n      dataFormat,\n      // @ts-expect-error\n      parameters: pixelStore,\n      compressed\n    });\n\n    // Set texture sampler parameters\n    this.setSampler(props.sampler);\n    this._setSamplerParameters(parameters);\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    if (isVideo) {\n      this._video = {\n        video: data as HTMLVideoElement,\n        parameters,\n        // @ts-expect-error\n        lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1\n      };\n    }\n\n    return this;\n  }\n\n  initializeCube(props?: WEBGLTextureProps): this {\n    const {mipmaps = true, parameters = {} as Record<GL, any>} = props;\n\n    // Store props for accessors\n    // this.props = props;\n\n    // @ts-expect-error\n    this.setCubeMapImageData(props).then(() => {\n      this.loaded = true;\n\n      // TODO - should genMipmap() be called on the cubemap or on the faces?\n      // TODO - without generateMipmap() cube textures do not work at all!!! Why?\n      if (mipmaps) {\n        this.generateMipmap(props);\n      }\n\n      this.setSampler(props.sampler);\n      this._setSamplerParameters(parameters);\n    });\n    return this;\n  }\n\n  setSampler(sampler: Sampler | SamplerProps = {}): this {\n    let samplerProps: SamplerParameters;\n    if (sampler instanceof WEBGLSampler) {\n      this.sampler = sampler;\n      samplerProps = sampler.props;\n    } else {\n      this.sampler = new WEBGLSampler(this.device, sampler);\n      samplerProps = sampler as SamplerProps;\n    }\n\n    // TODO - technically, this is only needed in WebGL1. In WebGL2 we could always use the sampler.\n    const parameters = convertSamplerParametersToWebGL(samplerProps);\n    this._setSamplerParameters(parameters);\n    return this;\n  }\n\n  /**\n   * If size has changed, reinitializes with current format\n   * @note note clears image and mipmaps\n   */\n  resize(options: {height: number; width: number; mipmaps?: boolean}): this {\n    const {height, width, mipmaps = false} = options;\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        mipmaps\n      });\n    }\n    return this;\n  }\n\n  /** Update external texture (video frame) */\n  update(): void {\n    if (this._video) {\n      const {video, parameters, lastTime} = this._video;\n      // @ts-expect-error\n      if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) {\n        return;\n      }\n      this.setSubImageData({\n        data: video,\n        parameters\n      });\n      if (this.mipmaps) {\n        this.generateMipmap();\n      }\n      this._video.lastTime = video.currentTime;\n    }\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}): this {\n    if (this.device.isWebGL1 && isNPOT(this.width, this.height)) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      return this;\n    }\n\n    this.mipmaps = true;\n\n    this.gl.bindTexture(this.target, this.handle);\n    withGLParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param  width -\n   * @param  height -\n   * @param  mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  // eslint-disable-next-line max-statements, complexity\n  setImageData(options: SetImageDataOptions) {\n    if (this.props.dimension === '3d' || this.props.dimension === '2d-array') {\n      return this.setImageData3D(options);\n    }\n\n    this.trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      glFormat = this.glFormat,\n      offset = 0,\n      parameters = {} as Record<GL, any>\n    } = options;\n\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format: this.props.format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    let gl2;\n\n    withGLParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(\n            target,\n            level,\n            glFormat,\n            width,\n            height,\n            0 /* border*/,\n            dataFormat,\n            type,\n            data\n          );\n          break;\n        case 'typed-array':\n          // Looks like this assert is not necessary, as offset is ignored under WebGL1\n          // assert((offset === 0 || this.device.isWebGL2), 'offset supported in WebGL2 only');\n          gl.texImage2D(\n            target,\n            level,\n            glFormat,\n            width,\n            height,\n            0, // border (must be 0)\n            dataFormat,\n            type,\n            data,\n            // @ts-expect-error\n            offset\n          );\n          break;\n        case 'buffer':\n          // WebGL2 enables creating textures directly from a WebGL buffer\n          gl2 = this.device.assertWebGL2();\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n          gl2.texImage2D(\n            target,\n            level,\n            glFormat,\n            width,\n            height,\n            0 /* border*/,\n            dataFormat,\n            type,\n            offset\n          );\n          gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n          break;\n        case 'browser-object':\n          if (this.device.isWebGL2) {\n            gl.texImage2D(\n              target,\n              level,\n              glFormat,\n              width,\n              height,\n              0 /* border*/,\n              dataFormat,\n              type,\n              data\n            );\n          } else {\n            gl.texImage2D(target, level, glFormat, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          for (const [levelIndex, levelData] of data.entries()) {\n            gl.compressedTexImage2D(\n              target,\n              levelIndex,\n              levelData.format,\n              levelData.width,\n              levelData.height,\n              0 /* border, must be 0 */,\n              levelData.data\n            );\n          }\n\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n\n    if (data && data.byteLength) {\n      this.trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      const bytesPerPixel = getTextureFormatBytesPerPixel(this.props.format, this.device.isWebGL2);\n      this.trackAllocatedMemory(this.width * this.height * bytesPerPixel, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   * Redefines an area of an existing texture\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    level = 0,\n    glFormat = this.glFormat,\n    type = this.type,\n    dataFormat = this.dataFormat,\n    compressed = false,\n    offset = 0,\n    parameters = {} as Record<GL, any>\n  }: SetSubImageDataOptions) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format: this.props.format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    assert(this.depth === 1, 'texSubImage not supported for 3D textures');\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof WEBGLBuffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withGLParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, glFormat, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        // const gl2 = this.device.assertWebGL2();\n        // @ts-expect-error last offset parameter is ignored under WebGL1\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (typeof WebGLBuffer !== 'undefined' && data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        const gl2 = this.device.assertWebGL2();\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        gl2.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else if (this.device.isWebGL2) {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        const gl2 = this.device.assertWebGL2();\n        gl2.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer(opts = {}) {\n    log.error(\n      'Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  getActiveUnit(): number {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof WEBGLBuffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    // Raw WebGL handle (not a luma wrapper)\n    if (typeof WebGLBuffer !== 'undefined' && data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  // HELPER METHODS\n\n  _deduceParameters(opts: WEBGLTextureProps) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const parameters = getWebGLTextureParameters(format, this.device.isWebGL2);\n    dataFormat = dataFormat || parameters.dataFormat;\n    type = type || parameters.type;\n    compressed = compressed || parameters.compressed;\n\n    ({width, height} = this._deduceImageSize(data, width, height));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  // eslint-disable-next-line complexity\n  _deduceImageSize(data, width, height): {width: number; height: number} {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(\n      width === undefined || size.width === width,\n      'Deduced texture width does not match supplied width'\n    );\n    assert(\n      height === undefined || size.height === height,\n      'Deduced texture height does not match supplied height'\n    );\n\n    return size;\n  }\n\n  // CUBE MAP METHODS\n\n  /* eslint-disable max-statements, max-len */\n  async setCubeMapImageData(options: {\n    width: any;\n    height: any;\n    pixels: any;\n    data: any;\n    format?: any;\n    type?: any;\n  }): Promise<void> {\n    const {gl} = this;\n\n    const {width, height, pixels, data, format = GL.RGBA, type = GL.UNSIGNED_BYTE} = options;\n    const imageDataMap = pixels || data;\n\n    // pixel data (imageDataMap) is an Object from Face to Image or Promise.\n    // For example:\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : Image-or-Promise,\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : Image-or-Promise,\n    // ... }\n    // To provide multiple level-of-details (LODs) this can be Face to Array\n    // of Image or Promise, like this\n    // {\n    // GL.TEXTURE_CUBE_MAP_POSITIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],\n    // ... }\n\n    const resolvedFaces = await Promise.all(\n      WEBGLTexture.FACES.map(face => {\n        const facePixels = imageDataMap[face];\n        return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n      })\n    );\n\n    this.bind();\n\n    WEBGLTexture.FACES.forEach((face, index) => {\n      if (resolvedFaces[index].length > 1 && this.props.mipmaps !== false) {\n        // If the user provides multiple LODs, then automatic mipmap\n        // generation generateMipmap() should be disabled to avoid overwritting them.\n        log.warn(`${this.id} has mipmap and multiple LODs.`)();\n      }\n      resolvedFaces[index].forEach((image, lodLevel) => {\n        // TODO: adjust width & height for LOD!\n        if (width && height) {\n          gl.texImage2D(face, lodLevel, format, width, height, 0 /* border*/, format, type, image);\n        } else {\n          gl.texImage2D(face, lodLevel, format, format, type, image);\n        }\n      });\n    });\n\n    this.unbind();\n  }\n\n  /** @todo update this method to accept LODs */\n  setImageDataForFace(options) {\n    const {\n      face,\n      width,\n      height,\n      pixels,\n      data,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE\n      // generateMipmap = false // TODO\n    } = options;\n\n    const {gl} = this;\n\n    const imageData = pixels || data;\n\n    this.bind();\n    if (imageData instanceof Promise) {\n      imageData.then(resolvedImageData =>\n        this.setImageDataForFace(\n          Object.assign({}, options, {\n            face,\n            data: resolvedImageData,\n            pixels: resolvedImageData\n          })\n        )\n      );\n    } else if (this.width || this.height) {\n      gl.texImage2D(face, 0, format, width, height, 0 /* border*/, format, type, imageData);\n    } else {\n      gl.texImage2D(face, 0, format, format, type, imageData);\n    }\n\n    return this;\n  }\n\n  /** Image 3D copies from Typed Array or WebGLBuffer */\n  setImageData3D(options: SetImageData3DOptions) {\n    const {\n      level = 0,\n      dataFormat,\n      format,\n      type, // = GL.UNSIGNED_BYTE,\n      width,\n      height,\n      depth = 1,\n      offset = 0,\n      data,\n      parameters = {}\n    } = options;\n\n    this.trackDeallocatedMemory('Texture');\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    const webglTextureFormat = getWebGLTextureParameters(format, this.device.isWebGL2);\n\n    withGLParameters(this.gl, parameters, () => {\n      if (ArrayBuffer.isView(data)) {\n        // @ts-expect-error\n        this.gl.texImage3D(\n          this.target,\n          level,\n          webglTextureFormat.format,\n          width,\n          height,\n          depth,\n          0 /* border, must be 0 */,\n          webglTextureFormat.dataFormat,\n          webglTextureFormat.type, // dataType: getWebGL,\n          data\n        );\n      }\n\n      if (data instanceof WEBGLBuffer) {\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle);\n        // @ts-expect-error\n        this.gl.texImage3D(\n          this.target,\n          level,\n          dataFormat,\n          width,\n          height,\n          depth,\n          0 /* border, must be 0 */,\n          format,\n          type,\n          offset\n        );\n      }\n    });\n\n    if (data && data.byteLength) {\n      this.trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      const bytesPerPixel = getTextureFormatBytesPerPixel(this.props.format, this.device.isWebGL2);\n      this.trackAllocatedMemory(this.width * this.height * this.depth * bytesPerPixel, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  /**\n   * Sets sampler parameters on texture\n   * @note: Applies NPOT workaround if appropriate\n   */\n  _setSamplerParameters(parameters: GLSamplerParameters): void {\n    // Work around WebGL1 sampling restrictions on NPOT textures\n    if (this.device.isWebGL1 && isNPOT(this.width, this.height)) {\n      parameters = updateSamplerParametersForNPOT(parameters);\n    }\n\n    // NPOT parameters may populate an empty object\n    if (isObjectEmpty(parameters)) {\n      return;\n    }\n\n    logParameters(parameters);\n\n    this.gl.bindTexture(this.target, this.handle);\n    for (const [pname, pvalue] of Object.entries(parameters)) {\n      const param = Number(pname) as GL.TEXTURE_MIN_LOD | GL.TEXTURE_MAX_LOD;\n      const value = pvalue;\n\n      // Apparently there are integer/float conversion issues requires two parameter setting functions in JavaScript.\n      // For now, pick the float version for parameters specified as GLfloat.\n      switch (param) {\n        case GL.TEXTURE_MIN_LOD:\n        case GL.TEXTURE_MAX_LOD:\n          this.gl.texParameterf(this.target, param, value);\n          break;\n\n        default:\n          this.gl.texParameteri(this.target, param, value);\n          break;\n      }\n    }\n    this.gl.bindTexture(this.target, null);\n    return;\n  }\n\n  /** @deprecated For LegacyTexture subclass */\n  protected _getWebGL1NPOTParameterOverride(\n    pname: GL.TEXTURE_MIN_FILTER | GL.TEXTURE_WRAP_S | GL.TEXTURE_WRAP_T,\n    value: GL.LINEAR | GL.NEAREST\n  ): number {\n    // NOTE: Apply NPOT workaround\n    const npot = this.device.isWebGL1 && isNPOT(this.width, this.height);\n    if (npot) {\n      switch (pname) {\n        case GL.TEXTURE_MIN_FILTER:\n          if (value !== GL.LINEAR && value !== GL.NEAREST) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n            return GL.LINEAR;\n          }\n          break;\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n          // if (value !== GL.CLAMP_TO_EDGE) { log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)(); }\n          return GL.CLAMP_TO_EDGE;\n        default:\n          break;\n      }\n    }\n    return value;\n  }\n}\n\n// HELPERS\n\nfunction getWebGLTextureTarget(props: TextureProps) {\n  switch (props.dimension) {\n    // supported in WebGL\n    case '2d':\n      return GL.TEXTURE_2D;\n    case 'cube':\n      return GL.TEXTURE_CUBE_MAP;\n    // supported in WebGL2\n    case '2d-array':\n      return GL.TEXTURE_2D_ARRAY;\n    case '3d':\n      return GL.TEXTURE_3D;\n    // not supported in any WebGL version\n    case '1d':\n    case 'cube-array':\n    default:\n      throw new Error(props.dimension);\n  }\n}\n\nfunction isNPOT(width: number, height: number): boolean {\n  // Width and height not available, avoid classifying as NPOT texture\n  if (!width || !height) {\n    return false;\n  }\n  return !isPowerOfTwo(width) || !isPowerOfTwo(height);\n}\n\nfunction logParameters(parameters: Record<number, GL | number>) {\n  log.log(1, 'texture sampler parameters', parameters)();\n}\n"],"mappings":"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"}