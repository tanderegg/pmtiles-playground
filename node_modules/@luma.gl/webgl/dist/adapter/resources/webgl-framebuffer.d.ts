import type { FramebufferProps, TextureFormat } from '@luma.gl/core';
import { Framebuffer, Texture } from '@luma.gl/core';
import { GL } from '@luma.gl/constants';
import { WebGLDevice } from '../webgl-device';
import { WEBGLTexture } from './webgl-texture';
import { WEBGLRenderbuffer } from '../objects/webgl-renderbuffer';
export type TextureAttachment = [Texture, number?, number?];
export type Attachment = WEBGLTexture | WEBGLRenderbuffer | TextureAttachment;
/** luma.gl Framebuffer, WebGL implementation  */
export declare class WEBGLFramebuffer extends Framebuffer {
    device: WebGLDevice;
    gl: WebGLRenderingContext;
    handle: WebGLFramebuffer;
    get texture(): Texture<import("@luma.gl/core").TextureProps>;
    constructor(device: WebGLDevice, props: FramebufferProps);
    /** destroys any auto created resources etc. */
    destroy(): void;
    /** Check the status */
    protected _checkStatus(): void;
    /** In WebGL we must use renderbuffers for depth/stencil attachments (unless we have extensions) */
    protected createDepthStencilTexture(format: TextureFormat): Texture;
    /**
     * Attachment resize is expected to be a noop if size is same
     */
    protected resizeAttachments(width: number, height: number): this;
    /** Attach one attachment */
    protected _attachOne(attachmentPoint: GL, attachment: Attachment): WEBGLTexture | WEBGLRenderbuffer;
    protected _attachWEBGLRenderbuffer(attachment: GL, renderbuffer: WEBGLRenderbuffer): void;
    /**
     * @param attachment
     * @param texture
     * @param layer = 0 - index into WEBGLTextureArray and Texture3D or face for `TextureCubeMap`
     * @param level  = 0 - mipmapLevel (must be 0 in WebGL1)
     */
    protected _attachTexture(attachment: GL, texture: WEBGLTexture, layer: number, level: number): void;
}
//# sourceMappingURL=webgl-framebuffer.d.ts.map