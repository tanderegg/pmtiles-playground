{"version":3,"file":"webgl-vertex-array.js","names":["VertexArray","getScratchArray","fillArray","getBrowser","getGLFromVertexType","_Symbol$toStringTag","Symbol","toStringTag","WEBGLVertexArray","isConstantAttributeZeroSupported","device","info","type","constructor","props","handle","buffer","bufferValue","init","gl2","createVertexArray","destroy","_this$buffer","deleteVertexArray","undefined","setIndexBuffer","indexBuffer","glTarget","Error","bindVertexArray","bindBuffer","setBuffer","location","attributeBuffer","size","stride","offset","normalized","integer","divisor","_getAccessor","gl","assertWebGL2","vertexAttribIPointer","vertexAttribPointer","enableVertexAttribArray","vertexAttribDivisor","attributes","setConstant","value","_enable","bindBeforeRender","webglBuffer","_applyConstantAttributes","unbindAfterRender","maxVertexAttributes","constant","ArrayBuffer","isView","setConstantAttribute","attributeInfo","attributeInfos","glType","bufferDataType","bufferComponents","byteStride","byteOffset","stepMode","enable","arguments","length","canDisableAttributeZero","canDisableAttribute","Number","disableVertexAttribArray","getConstantBuffer","elementCount","constantValue","normalizeConstantArrayValue","byteLength","updateNeeded","createBuffer","compareConstantArrayValues","typedArray","target","source","start","count","write","arrayValue","Array","isArray","Float32Array","v1","v2","i"],"sources":["../../../src/adapter/resources/webgl-vertex-array.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport type {Device, Buffer, VertexArrayProps, TypedArray, NumberArray} from '@luma.gl/core';\nimport {VertexArray, getScratchArray, fillArray} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport {getBrowser} from '@probe.gl/env';\n\nimport {WebGLDevice} from '../webgl-device';\nimport {WEBGLBuffer} from '../resources/webgl-buffer';\n\nimport {getGLFromVertexType} from '../converters/vertex-formats';\n// import {AccessorObject} from '../..';\n// import {getGLFromVertexType} from '../converters/vertex-formats';\n\n/** VertexArrayObject wrapper */\nexport class WEBGLVertexArray extends VertexArray {\n  override get [Symbol.toStringTag](): string {\n    return 'VertexArray';\n  }\n\n  readonly device: WebGLDevice;\n  readonly handle: WebGLVertexArrayObject;\n\n  /** Attribute 0 buffer constant */\n  private buffer: WEBGLBuffer | null = null;\n  private bufferValue = null;\n\n  /** * Attribute 0 can not be disable on most desktop OpenGL based browsers */\n  static isConstantAttributeZeroSupported(device: Device): boolean {\n    return device.info.type === 'webgl2' || getBrowser() === 'Chrome';\n  }\n\n  // Create a VertexArray\n  constructor(device: WebGLDevice, props?: VertexArrayProps) {\n    super(device, props);\n    this.device = device;\n    this.handle = this.device.gl2.createVertexArray();\n  }\n\n  override destroy(): void {\n    super.destroy();\n    if (this.buffer) {\n      this.buffer?.destroy();\n    }\n    if (this.handle) {\n      this.device.gl2.deleteVertexArray(this.handle);\n      // @ts-expect-error read-only/undefined\n      this.handle = undefined!;\n    }\n\n    // Auto-delete elements?\n    // return [this.elements];\n  }\n\n  /**\n  // Set (bind/unbind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER or null. Constants not supported\n   * \n   * @param elementBuffer \n   */\n  setIndexBuffer(indexBuffer: Buffer | null): void {\n    const buffer = indexBuffer as WEBGLBuffer;\n    // Explicitly allow `null` to support clearing the index buffer\n    if (buffer && buffer.glTarget !== GL.ELEMENT_ARRAY_BUFFER) {\n      throw new Error('Use .setBuffer()');\n    }\n    // In WebGL The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject\n    this.device.gl2.bindVertexArray(this.handle);\n    // TODO - this initial binding does not seem to take effect? see bindBeforeRender()\n    this.device.gl2.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, buffer ? buffer.handle : null);\n    // log.log(1, 'VertexArray.setIndexBuffer', indexBuffer)();\n    // log.log(1, `Binding vertex array ${this.id}`, buffer?.id)();\n\n    this.indexBuffer = buffer;\n  }\n\n  /** Set a location in vertex attributes array to a buffer, enables the location, sets divisor */\n  setBuffer(location: number, attributeBuffer: Buffer): void {\n    const buffer = attributeBuffer as WEBGLBuffer;\n    // Sanity check target\n    if (buffer.glTarget === GL.ELEMENT_ARRAY_BUFFER) {\n      throw new Error('Use .setIndexBuffer()');\n    }\n\n    const {size, type, stride, offset, normalized, integer, divisor} = this._getAccessor(location);\n\n    this.device.gl2.bindVertexArray(this.handle);\n    // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n    this.device.gl.bindBuffer(GL.ARRAY_BUFFER, buffer.handle);\n\n    // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n    if (integer) {\n      this.device.assertWebGL2();\n      this.device.gl2.vertexAttribIPointer(location, size, type, stride, offset);\n    } else {\n      // Attaches ARRAY_BUFFER with specified buffer format to location\n      this.device.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n    }\n\n    // Mark as non-constant\n    this.device.gl.enableVertexAttribArray(location);\n    // Set the step mode 0=vertex, 1=instance\n    this.device.gl2.vertexAttribDivisor(location, divisor || 0);\n\n    this.attributes[location] = buffer;\n  }\n\n  /** Set a location in vertex attributes array to a constant value, disables the location */\n  override setConstant(location: number, value: TypedArray): void {\n    this._enable(location, false);\n    this.attributes[location] = value;\n  }\n\n  init = false;\n\n  override bindBeforeRender(): void {\n    this.device.gl2.bindVertexArray(this.handle);\n    // TODO - the initial bind does not seem to take effect.\n    if (!this.init) {\n      // log.log(1, `Binding vertex array ${this.id}`, this.indexBuffer?.id)();\n      const webglBuffer = this.indexBuffer as WEBGLBuffer;\n      this.device.gl2.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, webglBuffer?.handle || null);\n      this.init = true;\n    }\n    this._applyConstantAttributes();\n  }\n\n  override unbindAfterRender(): void {\n    // log.log(1, `Unbinding vertex array ${this.id}`)();\n    // TODO technically this is not necessary, but we might be interfacing\n    // with code that does not use vertex array objects\n    this.device.gl2.bindVertexArray(null);\n    // this.device.gl2.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, null);\n  }\n\n  // Internal methods\n\n  /**\n   * Constant attributes need to be reset before every draw call\n   * Any attribute that is disabled in the current vertex array object\n   * is read from the context's global constant value for that attribute location.\n   * @note Constant attributes are only supported in WebGL, not in WebGPU\n   */\n  protected _applyConstantAttributes(): void {\n    for (let location = 0; location < this.maxVertexAttributes; ++location) {\n      const constant = this.attributes[location];\n      // A typed array means this is a constant\n      if (ArrayBuffer.isView(constant)) {\n        this.device.setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  /**\n   * Set a location in vertex attributes array to a buffer, enables the location, sets divisor\n   * @note requires vertex array to be bound\n   */\n  // protected _setAttributeLayout(location: number): void {\n  //   const {size, type, stride, offset, normalized, integer, divisor} = this._getAccessor(location);\n\n  //   // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n  //   if (integer) {\n  //     this.device.assertWebGL2();\n  //     this.device.gl2.vertexAttribIPointer(location, size, type, stride, offset);\n  //   } else {\n  //     // Attaches ARRAY_BUFFER with specified buffer format to location\n  //     this.device.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n  //   }\n  //   this.device.gl2.vertexAttribDivisor(location, divisor || 0);\n  // }\n\n  /** Get an accessor from the  */\n  protected _getAccessor(location: number) {\n    const attributeInfo = this.attributeInfos[location];\n    if (!attributeInfo) {\n      throw new Error(`Unknown attribute location ${location}`);\n    }\n    const glType = getGLFromVertexType(attributeInfo.bufferDataType);\n    return {\n      size: attributeInfo.bufferComponents,\n      type: glType,\n      stride: attributeInfo.byteStride,\n      offset: attributeInfo.byteOffset,\n      normalized: attributeInfo.normalized,\n      // it is the shader attribute declaration, not the vertex memory format,\n      // that determines if the data in the buffer will be treated as integers.\n      //\n      // Also note that WebGL supports assigning non-normalized integer data to floating point attributes,\n      // but as far as we can tell, WebGPU does not.\n      integer: attributeInfo.integer,\n      divisor: attributeInfo.stepMode === 'instance' ? 1 : 0\n    };\n  }\n\n  /**\n   * Enabling an attribute location makes it reference the currently bound buffer\n   * Disabling an attribute location makes it reference the global constant value\n   * TODO - handle single values for size 1 attributes?\n   * TODO - convert classic arrays based on known type?\n   */\n  protected _enable(location: number, enable = true): void {\n    // Attribute 0 cannot be disabled in most desktop OpenGL based browsers...\n    const canDisableAttributeZero = WEBGLVertexArray.isConstantAttributeZeroSupported(this.device);\n    const canDisableAttribute = canDisableAttributeZero || location !== 0;\n\n    if (enable || canDisableAttribute) {\n      location = Number(location);\n      this.device.gl2.bindVertexArray(this.handle);\n      if (enable) {\n        this.device.gl.enableVertexAttribArray(location);\n      } else {\n        this.device.gl.disableVertexAttribArray(location);\n      }\n      this.device.gl2.bindVertexArray(null);\n    }\n  }\n\n  /**\n   * Provide a means to create a buffer that is equivalent to a constant.\n   * NOTE: Desktop OpenGL cannot disable attribute 0.\n   * https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n   * this-has-significant-performance-penalty\n   */\n  getConstantBuffer(elementCount: number, value: TypedArray): Buffer {\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n\n    const constantValue = normalizeConstantArrayValue(value);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n\n    if (this.buffer && byteLength !== this.buffer.byteLength) {\n      throw new Error(\n        `Buffer size is immutable, byte length ${byteLength} !== ${this.buffer.byteLength}.`\n      );\n    }\n    let updateNeeded = !this.buffer;\n\n    this.buffer = this.buffer || this.device.createBuffer({byteLength});\n\n    // Reallocate and update contents if needed\n    updateNeeded = updateNeeded || !compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      // Create a typed array that is big enough, and fill it with the required data\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({target: typedArray, source: constantValue, start: 0, count: length});\n      this.buffer.write(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n}\n\n// HELPER FUNCTIONS\n\n/**\n * TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n * TODO - handle single values for size 1 attributes?\n */\nfunction normalizeConstantArrayValue(arrayValue: NumberArray) {\n  if (Array.isArray(arrayValue)) {\n    return new Float32Array(arrayValue);\n  }\n  return arrayValue;\n}\n\n/**\n *\n */\nfunction compareConstantArrayValues(v1: NumberArray, v2: NumberArray): boolean {\n  if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n    return false;\n  }\n  for (let i = 0; i < v1.length; ++i) {\n    if (v1[i] !== v2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"mappings":"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"}