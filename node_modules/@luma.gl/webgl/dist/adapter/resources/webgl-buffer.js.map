{"version":3,"file":"webgl-buffer.js","names":["Buffer","assert","WEBGLBuffer","constructor","device","props","arguments","length","undefined","gl","gl2","handle","glTarget","glUsage","glIndexType","byteLength","bytesUsed","createBuffer","setSpectorMetadata","data","getWebGLTarget","usage","getWebGLUsage","indexType","_initWithData","byteOffset","_initWithByteLength","bindBuffer","bufferData","bufferSubData","_setDebugData","trackAllocatedMemory","Float32Array","destroy","destroyed","removeStats","trackDeallocatedMemory","deleteBuffer","write","srcOffset","isWebGL2","assertWebGL2","readAsync","readSyncWebGL2","_byteLength","Uint8Array","dstOffset","getBufferSubData","INDEX","VERTEX","UNIFORM"],"sources":["../../../src/adapter/resources/webgl-buffer.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport type {BufferProps} from '@luma.gl/core';\nimport {Buffer, assert} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\nimport {WebGLDevice} from '../webgl-device';\n\n/** WebGL Buffer interface */\nexport class WEBGLBuffer extends Buffer {\n  readonly device: WebGLDevice;\n  readonly gl: WebGLRenderingContext;\n  readonly gl2: WebGL2RenderingContext | null;\n  readonly handle: WebGLBuffer;\n\n  /** Target in OpenGL defines the type of buffer */\n  readonly glTarget: GL.ARRAY_BUFFER | GL.ELEMENT_ARRAY_BUFFER | GL.UNIFORM_BUFFER;\n  /** Usage is a hint on how frequently the buffer will be updates */\n  readonly glUsage: GL.STATIC_DRAW | GL.DYNAMIC_DRAW;\n  /** Index type is needed when issuing draw calls, so we pre-compute it */\n  readonly glIndexType: GL.UNSIGNED_SHORT | GL.UNSIGNED_INT = GL.UNSIGNED_SHORT;\n\n  /** Number of bytes allocated on the GPU for this buffer */\n  byteLength: number;\n  /** Number of bytes used */\n  bytesUsed: number;\n\n  constructor(device: WebGLDevice, props: BufferProps = {}) {\n    super(device, props);\n\n    this.device = device;\n    this.gl = this.device.gl;\n    this.gl2 = this.device.gl2;\n\n    const handle = typeof props === 'object' ? props.handle : undefined;\n    this.handle = handle || this.gl.createBuffer();\n    device.setSpectorMetadata(this.handle, {...this.props, data: typeof this.props.data});\n\n    // - In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers\n    //   otherwise buffer type will lock to generic (non-element) buffer\n    // - In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here\n    this.glTarget = getWebGLTarget(this.props.usage);\n    this.glUsage = getWebGLUsage(this.props.usage);\n    this.glIndexType = this.props.indexType === 'uint32' ? GL.UNSIGNED_INT : GL.UNSIGNED_SHORT;\n\n    // Set data: (re)initializes the buffer\n    if (props.data) {\n      this._initWithData(props.data, props.byteOffset, props.byteLength);\n    } else {\n      this._initWithByteLength(props.byteLength || 0);\n    }\n  }\n\n  // PRIVATE METHODS\n\n  /** Allocate a new buffer and initialize to contents of typed array */\n  _initWithData(\n    data: ArrayBuffer | ArrayBufferView,\n    byteOffset: number = 0,\n    byteLength: number = data.byteLength + byteOffset\n  ): void {\n    // const glTarget = this.device.isWebGL2 ? GL.COPY_WRITE_BUFFER : this.glTarget;\n    const glTarget = this.glTarget;\n    this.gl.bindBuffer(glTarget, this.handle);\n    this.gl.bufferData(glTarget, byteLength, this.glUsage);\n    this.gl.bufferSubData(glTarget, byteOffset, data);\n    this.gl.bindBuffer(glTarget, null);\n\n    this.bytesUsed = byteLength;\n    this.byteLength = byteLength;\n\n    this._setDebugData(data, byteOffset, byteLength);\n    this.trackAllocatedMemory(byteLength);\n  }\n\n  // Allocate a GPU buffer of specified size.\n  _initWithByteLength(byteLength: number): this {\n    assert(byteLength >= 0);\n\n    // Workaround needed for Safari (#291):\n    // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.\n    let data = byteLength;\n    if (byteLength === 0) {\n      // @ts-expect-error\n      data = new Float32Array(0);\n    }\n\n    // const glTarget = this.device.isWebGL2 ? GL.COPY_WRITE_BUFFER : this.glTarget;\n    const glTarget = this.glTarget;\n\n    this.gl.bindBuffer(glTarget, this.handle);\n    this.gl.bufferData(glTarget, data, this.glUsage);\n    this.gl.bindBuffer(glTarget, null);\n\n    this.bytesUsed = byteLength;\n    this.byteLength = byteLength;\n\n    this._setDebugData(null, 0, byteLength);\n    this.trackAllocatedMemory(byteLength);\n\n    return this;\n  }\n\n  override destroy(): void {\n    if (!this.destroyed && this.handle) {\n      this.removeStats();\n      this.trackDeallocatedMemory();\n      this.gl.deleteBuffer(this.handle);\n      this.destroyed = true;\n      // @ts-expect-error\n      this.handle = null;\n    }\n  }\n\n  override write(data: ArrayBufferView, byteOffset: number = 0): void {\n    const srcOffset = 0;\n    const byteLength = undefined; // data.byteLength;\n\n    // Create the buffer - binding it here for the first time locks the type\n    // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type\n    const glTarget = this.device.isWebGL2 ? GL.COPY_WRITE_BUFFER : this.glTarget;\n    this.gl.bindBuffer(glTarget, this.handle);\n    // WebGL2: subData supports additional srcOffset and length parameters\n    if (srcOffset !== 0 || byteLength !== undefined) {\n      this.device.assertWebGL2();\n      this.gl2.bufferSubData(glTarget, byteOffset, data, srcOffset, byteLength);\n    } else {\n      this.gl.bufferSubData(glTarget, byteOffset, data);\n    }\n    this.gl.bindBuffer(glTarget, null);\n\n    this._setDebugData(data, byteOffset, data.byteLength);\n  }\n\n  /** Asynchronously read data from the buffer */\n  override async readAsync(byteOffset = 0, byteLength?: number): Promise<Uint8Array> {\n    return this.readSyncWebGL2(byteOffset, byteLength);\n  }\n\n  /** Synchronously read data from the buffer. WebGL only. */\n  override readSyncWebGL2(byteOffset = 0, byteLength?: number): Uint8Array {\n    this.device.assertWebGL2();\n\n    byteLength = byteLength ?? this.byteLength - byteOffset;\n    const data = new Uint8Array(byteLength);\n    const dstOffset = 0;\n\n    // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, this.handle);\n    this.gl2.getBufferSubData(GL.COPY_READ_BUFFER, byteOffset, data, dstOffset, byteLength);\n    this.gl.bindBuffer(GL.COPY_READ_BUFFER, null);\n\n    // Update local `data` if offsets are 0\n    this._setDebugData(data, byteOffset, byteLength);\n\n    return data;\n  }\n}\n\n/**\n * Returns a WebGL buffer target\n *\n * @param usage\n * static MAP_READ = 0x01;\n * static MAP_WRITE = 0x02;\n * static COPY_SRC = 0x0004;\n * static COPY_DST = 0x0008;\n * static INDEX = 0x0010;\n * static VERTEX = 0x0020;\n * static UNIFORM = 0x0040;\n * static STORAGE = 0x0080;\n * static INDIRECT = 0x0100;\n * static QUERY_RESOLVE = 0x0200;\n * \n * @returns WebGL buffer targe\n * \n * Buffer bind points in WebGL2\n * gl.COPY_READ_BUFFER: Buffer for copying from one buffer object to another.\n * gl.COPY_WRITE_BUFFER: Buffer for copying from one buffer object to another.\n * gl.TRANSFORM_FEEDBACK_BUFFER: Buffer for transform feedback operations.\n * gl.PIXEL_PACK_BUFFER: Buffer used for pixel transfer operations.\n * gl.PIXEL_UNPACK_BUFFER: Buffer used for pixel transfer operations.\n */\nfunction getWebGLTarget(\n  usage: number\n): GL.ARRAY_BUFFER | GL.ELEMENT_ARRAY_BUFFER | GL.UNIFORM_BUFFER {\n  if (usage & Buffer.INDEX) {\n    return GL.ELEMENT_ARRAY_BUFFER;\n  }\n  if (usage & Buffer.VERTEX) {\n    return GL.ARRAY_BUFFER;\n  }\n  if (usage & Buffer.UNIFORM) {\n    return GL.UNIFORM_BUFFER;\n  }\n\n  // Binding a buffer for the first time locks the type\n  // In WebGL2, we can use GL.COPY_WRITE_BUFFER to avoid locking the type\n  return GL.ARRAY_BUFFER;\n}\n\n/** @todo usage is not passed correctly */\nfunction getWebGLUsage(usage: number): GL.STATIC_DRAW | GL.DYNAMIC_DRAW {\n  if (usage & Buffer.INDEX) {\n    return GL.STATIC_DRAW;\n  }\n  if (usage & Buffer.VERTEX) {\n    return GL.STATIC_DRAW;\n  }\n  if (usage & Buffer.UNIFORM) {\n    return GL.DYNAMIC_DRAW;\n  }\n  return GL.STATIC_DRAW;\n}\n"],"mappings":"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"}