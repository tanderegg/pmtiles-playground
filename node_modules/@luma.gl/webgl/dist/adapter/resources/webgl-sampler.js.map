{"version":3,"file":"webgl-sampler.js","names":["Sampler","convertSamplerParametersToWebGL","WEBGLSampler","constructor","device","props","handle","parameters","isWebGL2","gl2","createSampler","_setSamplerParameters","destroy","deleteSampler","undefined","toString","id","JSON","stringify","pname","value","Object","entries","param","Number","samplerParameterf","samplerParameteri"],"sources":["../../../src/adapter/resources/webgl-sampler.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport {Sampler, SamplerProps} from '@luma.gl/core';\nimport {GL, GLSamplerParameters} from '@luma.gl/constants';\nimport {convertSamplerParametersToWebGL} from '../converters/sampler-parameters';\nimport type {WebGLDevice} from '../webgl-device';\n\n/**\n * Sampler object -\n * Under WebGL2 we create an actual WebGL sampler\n * Under WebGL1, we just store the sampler parameters\n * so that they can be set directly on the texture\n * https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/sampler_object.html\n */\nexport class WEBGLSampler extends Sampler {\n  readonly device: WebGLDevice;\n  readonly handle: WebGLSampler;\n  readonly parameters: GLSamplerParameters;\n\n  constructor(device: WebGLDevice, props: SamplerProps) {\n    super(device, props);\n    this.device = device;\n    this.parameters = convertSamplerParametersToWebGL(props);\n    if (this.device.isWebGL2) {\n      this.handle = this.handle || this.device.gl2.createSampler();\n      this._setSamplerParameters(this.parameters);\n    }\n  }\n\n  override destroy(): void {\n    if (this.handle) {\n      this.device.gl2.deleteSampler(this.handle);\n      // @ts-expect-error read-only/undefined\n      this.handle = undefined;\n    }\n  }\n\n  override toString(): string {\n    return `Sampler(${this.id},${JSON.stringify(this.props)})`;\n  }\n\n  /** Set sampler parameters on the sampler */\n  private _setSamplerParameters(parameters: GLSamplerParameters): void {\n    for (const [pname, value] of Object.entries(parameters)) {\n      // Apparently there are integer/float conversion issues requires two parameter setting functions in JavaScript.\n      // For now, pick the float version for parameters specified as GLfloat.\n      const param = Number(pname) as GL.TEXTURE_MIN_LOD | GL.TEXTURE_MAX_LOD;\n      switch (param) {\n        case GL.TEXTURE_MIN_LOD:\n        case GL.TEXTURE_MAX_LOD:\n          this.device.gl2.samplerParameterf(this.handle, param, value);\n          break;\n        default:\n          this.device.gl2.samplerParameteri(this.handle, param, value);\n          break;\n      }\n    }\n  }\n}\n"],"mappings":"AAGA,SAAQA,OAAO,QAAqB,eAAe;AAAC,SAE5CC,+BAA+B;AAUvC,OAAO,MAAMC,YAAY,SAASF,OAAO,CAAC;EAKxCG,WAAWA,CAACC,MAAmB,EAAEC,KAAmB,EAAE;IACpD,KAAK,CAACD,MAAM,EAAEC,KAAK,CAAC;IAAC,KALdD,MAAM;IAAA,KACNE,MAAM;IAAA,KACNC,UAAU;IAIjB,IAAI,CAACH,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACG,UAAU,GAAGN,+BAA+B,CAACI,KAAK,CAAC;IACxD,IAAI,IAAI,CAACD,MAAM,CAACI,QAAQ,EAAE;MACxB,IAAI,CAACF,MAAM,GAAG,IAAI,CAACA,MAAM,IAAI,IAAI,CAACF,MAAM,CAACK,GAAG,CAACC,aAAa,CAAC,CAAC;MAC5D,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACJ,UAAU,CAAC;IAC7C;EACF;EAESK,OAAOA,CAAA,EAAS;IACvB,IAAI,IAAI,CAACN,MAAM,EAAE;MACf,IAAI,CAACF,MAAM,CAACK,GAAG,CAACI,aAAa,CAAC,IAAI,CAACP,MAAM,CAAC;MAE1C,IAAI,CAACA,MAAM,GAAGQ,SAAS;IACzB;EACF;EAESC,QAAQA,CAAA,EAAW;IAC1B,OAAQ,WAAU,IAAI,CAACC,EAAG,IAAGC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACb,KAAK,CAAE,GAAE;EAC5D;EAGQM,qBAAqBA,CAACJ,UAA+B,EAAQ;IACnE,KAAK,MAAM,CAACY,KAAK,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACf,UAAU,CAAC,EAAE;MAGvD,MAAMgB,KAAK,GAAGC,MAAM,CAACL,KAAK,CAA4C;MACtE,QAAQI,KAAK;QACX;QACA;UACE,IAAI,CAACnB,MAAM,CAACK,GAAG,CAACgB,iBAAiB,CAAC,IAAI,CAACnB,MAAM,EAAEiB,KAAK,EAAEH,KAAK,CAAC;UAC5D;QACF;UACE,IAAI,CAAChB,MAAM,CAACK,GAAG,CAACiB,iBAAiB,CAAC,IAAI,CAACpB,MAAM,EAAEiB,KAAK,EAAEH,KAAK,CAAC;UAC5D;MACJ;IACF;EACF;AACF"}