{"version":3,"file":"webgl-render-pipeline.js","names":["RenderPipeline","cast","splitUniformsAndBindings","log","mergeShaderLayout","getShaderLayout","withDeviceAndGLParameters","setUniform","WEBGLBuffer","WEBGLFramebuffer","WEBGLTexture","getGLDrawMode","LOG_PROGRAM_PERF_PRIORITY","WEBGLRenderPipeline","constructor","device","props","handle","vs","fs","introspectedLayout","uniforms","bindings","varyings","_uniformCount","_uniformSetters","gl","createProgram","setSpectorMetadata","id","bufferMode","length","_this$device$gl","assertWebGL2","gl2","transformFeedbackVaryings","_compileAndLink","shaderLayout","topology","warn","destroy","deleteProgram","destroyed","setBindings","name","value","Object","entries","binding","find","validBindings","map","join","type","buffer","Error","setUniforms","keys","forEach","JSON","stringify","assign","draw","options","_vertexArray$indexBuf","renderPass","vertexArray","vertexCount","instanceCount","firstVertex","transformFeedback","glDrawMode","isIndexed","Boolean","indexBuffer","glIndexType","isInstanced","Number","_areTexturesRenderable","useProgram","bindBeforeRender","begin","_applyBindings","_applyUniforms","webglRenderPass","parameters","glParameters","_this$device$gl2","drawElementsInstanced","drawElements","_this$device$gl3","drawArraysInstanced","drawArrays","end","unbindAfterRender","attachShader","time","linkProgram","timeEnd","debug","level","linked","getProgramParameter","getProgramInfoLog","validateProgram","validated","texturesRenderable","texture","update","loaded","textureUnit","uniformBufferIndex","replace","location","getUniformBlockIndex","uniformBlockBinding","bindBufferBase","bindBufferRange","offset","size","byteLength","colorAttachments","activeTexture","bindTexture","target","uniformLayout","_this$uniforms$name","undefined"],"sources":["../../../src/adapter/resources/webgl-render-pipeline.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport type {UniformValue, RenderPipelineProps, Binding} from '@luma.gl/core';\nimport type {ShaderLayout} from '@luma.gl/core';\nimport type {RenderPass, VertexArray} from '@luma.gl/core';\nimport {RenderPipeline, cast, splitUniformsAndBindings, log} from '@luma.gl/core';\nimport {mergeShaderLayout} from '@luma.gl/core';\n// import {mergeShaderLayout, getAttributeInfosFromLayouts} from '@luma.gl/core';\nimport {GL} from '@luma.gl/constants';\n\nimport {getShaderLayout} from '../helpers/get-shader-layout';\nimport {withDeviceAndGLParameters} from '../converters/device-parameters';\nimport {setUniform} from '../helpers/set-uniform';\n// import {copyUniform, checkUniformValues} from '../../classes/uniforms';\n\nimport {WebGLDevice} from '../webgl-device';\nimport {WEBGLBuffer} from './webgl-buffer';\nimport {WEBGLShader} from './webgl-shader';\nimport {WEBGLFramebuffer} from './webgl-framebuffer';\nimport {WEBGLTexture} from './webgl-texture';\n// import {WEBGLVertexArray} from './webgl-vertex-array';\nimport {WEBGLRenderPass} from './webgl-render-pass';\nimport {WEBGLTransformFeedback} from './webgl-transform-feedback';\nimport {getGLDrawMode} from '../helpers/webgl-topology-utils';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\n/** Creates a new render pipeline */\nexport class WEBGLRenderPipeline extends RenderPipeline {\n  /** The WebGL device that created this render pipeline */\n  device: WebGLDevice;\n  /** Handle to underlying WebGL program */\n  handle: WebGLProgram;\n  /** vertex shader */\n  vs: WEBGLShader;\n  /** fragment shader */\n  fs: WEBGLShader;\n  /** The layout extracted from shader by WebGL introspection APIs */\n  introspectedLayout: ShaderLayout;\n\n  /** Uniforms set on this model */\n  uniforms: Record<string, UniformValue> = {};\n  /** Bindings set on this model */\n  bindings: Record<string, Binding> = {};\n  /** WebGL varyings */\n  varyings: string[] | null = null;\n\n  _uniformCount: number = 0;\n  _uniformSetters: Record<string, Function> = {}; // TODO are these used?\n\n  constructor(device: WebGLDevice, props: RenderPipelineProps) {\n    super(device, props);\n    this.device = device;\n    this.handle = this.props.handle || this.device.gl.createProgram();\n    this.device.setSpectorMetadata(this.handle, {id: this.props.id});\n\n    // Create shaders if needed\n    this.vs = cast<WEBGLShader>(props.vs);\n    this.fs = cast<WEBGLShader>(props.fs);\n    // assert(this.vs.stage === 'vertex');\n    // assert(this.fs.stage === 'fragment');\n\n    // Setup varyings if supplied\n    // @ts-expect-error WebGL only\n    const {varyings, bufferMode = GL.SEPARATE_ATTRIBS} = props;\n    if (varyings && varyings.length > 0) {\n      this.device.assertWebGL2();\n      this.varyings = varyings;\n      this.device.gl2?.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n\n    this.introspectedLayout = getShaderLayout(this.device.gl, this.handle);\n    // Merge provided layout with introspected layout\n    this.shaderLayout = mergeShaderLayout(this.introspectedLayout, props.shaderLayout);\n\n    // WebGPU has more restrictive topology support than WebGL\n    switch (this.props.topology) {\n      case 'triangle-fan-webgl':\n      case 'line-loop-webgl':\n        log.warn(`Primitive topology ${this.props.topology} is deprecated and will be removed in v9.1`);\n        break;\n      default:\n    }\n  }\n\n  override destroy(): void {\n    if (this.handle) {\n      this.device.gl.deleteProgram(this.handle);\n      // this.handle = null;\n      this.destroyed = true;\n    }\n  }\n\n  /**\n   * Bindings include: textures, samplers and uniform buffers\n   * @todo needed for portable model\n   */\n  setBindings(bindings: Record<string, Binding>): void {\n    // if (log.priority >= 2) {\n    //   checkUniformValues(uniforms, this.id, this._uniformSetters);\n    // }\n\n    for (const [name, value] of Object.entries(bindings)) {\n      // Accept both `xyz` and `xyzUniforms` as valid names for `xyzUniforms` uniform block\n      // This convention allows shaders to name uniform blocks as `uniform appUniforms {} app;`\n      // and reference them as `app` from both GLSL and JS.\n      // TODO - this is rather hacky - we could also remap the name directly in the shader layout.\n      const binding =\n        this.shaderLayout.bindings.find(binding => binding.name === name) ||\n        this.shaderLayout.bindings.find(binding => binding.name === `${name}Uniforms`);\n\n      if (!binding) {\n        const validBindings = this.shaderLayout.bindings\n          .map(binding => `\"${binding.name}\"`)\n          .join(', ');\n        log.warn(\n          `Unknown binding \"${name}\" in render pipeline \"${this.id}\", expected one of ${validBindings}`\n        )();\n        continue; // eslint-disable-line no-continue\n      }\n      if (!value) {\n        log.warn(`Unsetting binding \"${name}\" in render pipeline \"${this.id}\"`)();\n      }\n      switch (binding.type) {\n        case 'uniform':\n          // @ts-expect-error\n          if (!(value instanceof WEBGLBuffer) && !(value.buffer instanceof WEBGLBuffer)) {\n            throw new Error('buffer value');\n          }\n          break;\n        case 'texture':\n          if (!(value instanceof WEBGLTexture || value instanceof WEBGLFramebuffer)) {\n            throw new Error('texture value');\n          }\n          break;\n        case 'sampler':\n          log.warn(`Ignoring sampler ${name}`)();\n          break;\n        default:\n          throw new Error(binding.type);\n      }\n\n      this.bindings[name] = value;\n    }\n  }\n\n  /** This function is @deprecated, use uniform buffers */\n  setUniforms(uniforms: Record<string, UniformValue>) {\n    const {bindings} = splitUniformsAndBindings(uniforms);\n    Object.keys(bindings).forEach(name => {\n      log.warn(\n        `Unsupported value \"${JSON.stringify(bindings[name])}\" used in setUniforms() for key ${name}. Use setBindings() instead?`\n      )();\n    });\n    // TODO - check against layout\n    Object.assign(this.uniforms, uniforms);\n  }\n\n  /** @todo needed for portable model\n   * @note The WebGL API is offers many ways to draw things\n   * This function unifies those ways into a single call using common parameters with sane defaults\n   */\n  draw(options: {\n    renderPass: RenderPass;\n    /** vertex attributes */\n    vertexArray: VertexArray;\n    vertexCount?: number;\n    indexCount?: number;\n    instanceCount?: number;\n    firstVertex?: number;\n    firstIndex?: number;\n    firstInstance?: number;\n    baseVertex?: number;\n    transformFeedback?: WEBGLTransformFeedback;\n  }): boolean {\n    const {\n      renderPass,\n      vertexArray,\n      vertexCount,\n      // indexCount,\n      instanceCount,\n      firstVertex = 0,\n      // firstIndex,\n      // firstInstance,\n      // baseVertex,\n      transformFeedback\n    } = options;\n\n    const glDrawMode = getGLDrawMode(this.props.topology);\n    const isIndexed: boolean = Boolean(vertexArray.indexBuffer);\n    const glIndexType = (vertexArray.indexBuffer as WEBGLBuffer)?.glIndexType;\n    const isInstanced: boolean = Number(instanceCount) > 0;\n\n    // Avoid WebGL draw call when not rendering any data or values are incomplete\n    // Note: async textures set as uniforms might still be loading.\n    // Now that all uniforms have been updated, check if any texture\n    // in the uniforms is not yet initialized, then we don't draw\n    if (!this._areTexturesRenderable() || vertexCount === 0) {\n      // (isInstanced && instanceCount === 0)\n      return false;\n    }\n\n    this.device.gl.useProgram(this.handle);\n\n    // Note: Rebinds constant attributes before each draw call\n    vertexArray.bindBeforeRender(renderPass);\n\n    if (transformFeedback) {\n      transformFeedback.begin(this.props.topology);\n    }\n\n    // We have to apply bindings before every draw call since other draw calls will overwrite\n    this._applyBindings();\n    this._applyUniforms();\n\n    const webglRenderPass = renderPass as WEBGLRenderPass;\n    //     // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n    //     if (isIndexed && isInstanced) {\n    //       // ANGLE_instanced_arrays extension\n    //       this.device.gl2?.drawElementsInstanced(\n    //         drawMode,\n    //         vertexCount || 0, // indexCount?\n    //         indexType,\n    //         firstVertex,\n    //         instanceCount || 0\n    //       );\n    //       // } else if (isIndexed && this.device.isWebGL2 && !isNaN(start) && !isNaN(end)) {\n    //       //   this.device.gl2.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n    //     } else if (isIndexed) {\n    //       this.device.gl.drawElements(drawMode, vertexCount || 0, indexType, firstVertex); // indexCount?\n    //     } else if (isInstanced) {\n    //       this.device.gl2?.drawArraysInstanced(\n    //         drawMode,\n    //         firstVertex,\n    //         vertexCount || 0,\n    //         instanceCount || 0\n    //       );\n    //     } else {\n    //       this.device.gl.drawArrays(drawMode, firstVertex, vertexCount || 0);\n    //     }\n    //   });\n\n    withDeviceAndGLParameters(\n      this.device,\n      this.props.parameters,\n      webglRenderPass.glParameters,\n      () => {\n        if (isIndexed && isInstanced) {\n          // ANGLE_instanced_arrays extension\n          this.device.gl2?.drawElementsInstanced(\n            glDrawMode,\n            vertexCount || 0, // indexCount?\n            glIndexType,\n            firstVertex,\n            instanceCount || 0\n          );\n          // } else if (isIndexed && this.device.isWebGL2 && !isNaN(start) && !isNaN(end)) {\n          //   this.device.gl2.drawRangeElements(glDrawMode, start, end, vertexCount, glIndexType, offset);\n        } else if (isIndexed) {\n          this.device.gl.drawElements(glDrawMode, vertexCount || 0, glIndexType, firstVertex); // indexCount?\n        } else if (isInstanced) {\n          this.device.gl2?.drawArraysInstanced(\n            glDrawMode,\n            firstVertex,\n            vertexCount || 0,\n            instanceCount || 0\n          );\n        } else {\n          this.device.gl.drawArrays(glDrawMode, firstVertex, vertexCount || 0);\n        }\n\n        if (transformFeedback) {\n          transformFeedback.end();\n        }\n      }\n    );\n\n    vertexArray.unbindAfterRender(renderPass);\n\n    return true;\n  }\n\n  // setAttributes(attributes: Record<string, Buffer>): void {}\n  // setBindings(bindings: Record<string, Binding>): void {}\n\n  protected _compileAndLink() {\n    const {gl} = this.device;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this.id}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this.id}`)();\n\n    // Avoid checking program linking error in production\n    // @ts-expect-error\n    if (!gl.debug && log.level === 0) {\n      // return;\n    }\n\n    const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n    if (!linked) {\n      throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n    }\n\n    gl.validateProgram(this.handle);\n    const validated = gl.getProgramParameter(this.handle, gl.VALIDATE_STATUS);\n    if (!validated) {\n      throw new Error(`Error validating: ${gl.getProgramInfoLog(this.handle)}`);\n    }\n  }\n\n  // PRIVATE METHODS\n\n  /**\n   * Checks if all texture-values uniforms are renderable (i.e. loaded)\n   * Update a texture if needed (e.g. from video)\n   * Note: This is currently done before every draw call\n   */\n  _areTexturesRenderable() {\n    let texturesRenderable = true;\n\n    for (const [, texture] of Object.entries(this.bindings)) {\n      if (texture instanceof WEBGLTexture) {\n        texture.update();\n        texturesRenderable = texturesRenderable && texture.loaded;\n      }\n    }\n\n    return texturesRenderable;\n  }\n\n  /** Apply any bindings (before each draw call) */\n  _applyBindings() {\n    this.device.gl.useProgram(this.handle);\n\n    const {gl2} = this.device;\n    if (!gl2) {\n      throw new Error('bindings');\n    }\n\n    let textureUnit = 0;\n    let uniformBufferIndex = 0;\n    for (const binding of this.shaderLayout.bindings) {\n      // Accept both `xyz` and `xyzUniforms` as valid names for `xyzUniforms` uniform block\n      const value =\n        this.bindings[binding.name] || this.bindings[binding.name.replace(/Uniforms$/, '')];\n      if (!value) {\n        throw new Error(`No value for binding ${binding.name} in ${this.id}`);\n      }\n      switch (binding.type) {\n        case 'uniform':\n          // Set buffer\n          const {name} = binding;\n          const location = gl2.getUniformBlockIndex(this.handle, name);\n          if (location as GL === GL.INVALID_INDEX) {\n            throw new Error(`Invalid uniform block name ${name}`);\n          }\n          gl2.uniformBlockBinding(this.handle, uniformBufferIndex, location);\n          // console.debug(binding, location);\n          if (value instanceof WEBGLBuffer) {\n            gl2.bindBufferBase(GL.UNIFORM_BUFFER, uniformBufferIndex, value.handle);\n          } else {\n            gl2.bindBufferRange(\n              GL.UNIFORM_BUFFER,\n              uniformBufferIndex,\n              // @ts-expect-error\n              value.buffer.handle,\n              // @ts-expect-error\n              value.offset || 0,\n              // @ts-expect-error\n              value.size || value.buffer.byteLength - value.offset\n            );\n          }\n          uniformBufferIndex += 1;\n          break;\n\n        case 'texture':\n          if (!(value instanceof WEBGLTexture || value instanceof WEBGLFramebuffer)) {\n            throw new Error('texture');\n          }\n          let texture: WEBGLTexture;\n          if (value instanceof WEBGLTexture) {\n            texture = value;\n          } else if (\n            value instanceof WEBGLFramebuffer &&\n            value.colorAttachments[0] instanceof WEBGLTexture\n          ) {\n            log.warn(\n              'Passing framebuffer in texture binding may be deprecated. Use fbo.colorAttachments[0] instead'\n            )();\n            texture = value.colorAttachments[0];\n          } else {\n            throw new Error('No texture');\n          }\n\n          gl2.activeTexture(GL.TEXTURE0 + textureUnit);\n          gl2.bindTexture(texture.target, texture.handle);\n          // gl2.bindSampler(textureUnit, sampler.handle);\n          textureUnit += 1;\n          break;\n\n        case 'sampler':\n          // ignore\n          break;\n\n        case 'storage':\n        case 'read-only-storage':\n          throw new Error(`binding type '${binding.type}' not supported in WebGL`);\n      }\n    }\n  }\n\n  /**\n   * Due to program sharing, uniforms need to be reset before every draw call\n   * (though caching will avoid redundant WebGL calls)\n   */\n  _applyUniforms() {\n    for (const uniformLayout of this.shaderLayout.uniforms || []) {\n      const {name, location, type, textureUnit} = uniformLayout;\n      const value = this.uniforms[name] ?? textureUnit;\n      if (value !== undefined) {\n        setUniform(this.device.gl, location, type, value);\n      }\n    }\n  }\n}\n"],"mappings":"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"}