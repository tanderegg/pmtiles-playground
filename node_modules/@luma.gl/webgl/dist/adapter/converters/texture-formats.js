import { decodeTextureFormat } from '@luma.gl/core';
import { isWebGL2 } from "../../context/context/webgl-checks.js";
import { getGLFromVertexType } from "./vertex-formats.js";
const texture_compression_bc = 'texture-compression-bc';
const texture_compression_astc = 'texture-compression-astc';
const texture_compression_etc2 = 'texture-compression-etc2';
const texture_compression_etc1_webgl = 'texture-compression-etc1-webgl';
const texture_compression_pvrtc_webgl = 'texture-compression-pvrtc-webgl';
const texture_compression_atc_webgl = 'texture-compression-atc-webgl';
const X_S3TC = 'WEBGL_compressed_texture_s3tc';
const X_S3TC_SRGB = 'WEBGL_compressed_texture_s3tc_srgb';
const X_RGTC = 'EXT_texture_compression_rgtc';
const X_BPTC = 'EXT_texture_compression_bptc';
const X_ETC2 = 'WEBGL_compressed_texture_etc';
const X_ASTC = 'WEBGL_compressed_texture_astc';
const X_ETC1 = 'WEBGL_compressed_texture_etc1';
const X_PVRTC = 'WEBGL_compressed_texture_pvrtc';
const X_ATC = 'WEBGL_compressed_texture_atc';
const EXT_SRGB = 'EXT_sRGB';
const EXT_TEXTURE_NORM16 = 'EXT_texture_norm16';
const EXT_FLOAT_WEBGL1 = 'WEBGL_color_buffer_float';
const EXT_FLOAT_RENDER_WEBGL2 = 'EXT_color_buffer_float';
const checkExtension = (gl, extension) => gl.getExtension(extension);
const checkExtensions = (gl, extensions) => extensions.every(extension => gl.getExtension(extension));
const TEXTURE_FEATURE_CHECKS = {
  'texture-blend-float-webgl1': gl => isWebGL2(gl) ? true : checkExtension(gl, 'EXT_float_blend'),
  'texture-formats-srgb-webgl1': gl => isWebGL2(gl) ? true : checkExtension(gl, EXT_SRGB),
  'texture-formats-depth-webgl1': gl => isWebGL2(gl) ? true : checkExtension(gl, 'WEBGL_depth_texture'),
  'texture-formats-float32-webgl1': gl => isWebGL2(gl) ? true : checkExtension(gl, 'OES_texture_float'),
  'texture-formats-float16-webgl1': gl => isWebGL2(gl) ? true : checkExtension(gl, 'OES_texture_half_float'),
  'texture-formats-norm16-webgl': gl => isWebGL2(gl) ? checkExtension(gl, EXT_TEXTURE_NORM16) : false,
  'texture-filter-linear-float32-webgl': gl => checkExtension(gl, 'OES_texture_float_linear'),
  'texture-filter-linear-float16-webgl': gl => checkExtension(gl, 'OES_texture_half_float_linear'),
  'texture-filter-anisotropic-webgl': gl => checkExtension(gl, 'EXT_texture_filter_anisotropic'),
  'texture-renderable-float32-webgl': gl => checkExtension(gl, 'EXT_color_buffer_float'),
  'texture-renderable-float16-webgl': gl => checkExtension(gl, 'EXT_color_buffer_half_float'),
  'texture-compression-bc': gl => checkExtensions(gl, [X_S3TC, X_S3TC_SRGB, X_RGTC, X_BPTC]),
  'texture-compression-bc5-webgl': gl => checkExtensions(gl, [X_RGTC]),
  'texture-compression-etc2': gl => checkExtensions(gl, [X_ETC2]),
  'texture-compression-astc': gl => checkExtensions(gl, [X_ASTC]),
  'texture-compression-etc1-webgl': gl => checkExtensions(gl, [X_ETC1]),
  'texture-compression-pvrtc-webgl': gl => checkExtensions(gl, [X_PVRTC]),
  'texture-compression-atc-webgl': gl => checkExtensions(gl, [X_ATC])
};
export function checkTextureFeature(gl, feature) {
  var _TEXTURE_FEATURE_CHEC;
  return ((_TEXTURE_FEATURE_CHEC = TEXTURE_FEATURE_CHECKS[feature]) === null || _TEXTURE_FEATURE_CHEC === void 0 ? void 0 : _TEXTURE_FEATURE_CHEC.call(TEXTURE_FEATURE_CHECKS, gl)) || false;
}
const checkTextureFeatures = (gl, features) => features.every(feature => checkTextureFeature(gl, feature));
export function getTextureFeatures(gl) {
  const textureFeatures = Object.keys(TEXTURE_FEATURE_CHECKS);
  return textureFeatures.filter(feature => checkTextureFeature(gl, feature));
}
export const TEXTURE_FORMATS = {
  'rgb8unorm-unsized': {
    gl: 6407,
    gl1: 6407,
    b: 4,
    c: 2,
    bpp: 4,
    dataFormat: 6407,
    types: [5121, 33635]
  },
  'rgba8unorm-unsized': {
    gl: 6408,
    gl1: 6408,
    b: 4,
    c: 2,
    bpp: 4,
    dataFormat: 6408,
    types: [5121, 32819, 32820]
  },
  'r8unorm': {
    gl: 33321,
    b: 1,
    c: 1,
    renderbuffer: true
  },
  'r8snorm': {
    gl: 36756,
    b: 1,
    c: 1
  },
  'r8uint': {
    gl: 33330,
    b: 1,
    c: 1,
    renderbuffer: true
  },
  'r8sint': {
    gl: 33329,
    b: 1,
    c: 1,
    renderbuffer: true
  },
  'rg8unorm': {
    gl: 33323,
    b: 2,
    c: 2,
    renderbuffer: true
  },
  'rg8snorm': {
    gl: 36757,
    b: 2,
    c: 2
  },
  'rg8uint': {
    gl: 33336,
    b: 2,
    c: 2,
    renderbuffer: true
  },
  'rg8sint': {
    gl: 33335,
    b: 2,
    c: 2,
    renderbuffer: true
  },
  'r16uint': {
    gl: 33332,
    b: 2,
    c: 1,
    renderbuffer: true
  },
  'r16sint': {
    gl: 33331,
    b: 2,
    c: 1,
    renderbuffer: true
  },
  'r16float': {
    gl: 33325,
    b: 2,
    c: 1,
    render: 'texture-renderable-float16-webgl',
    filter: 'texture-filter-linear-float16-webgl',
    renderbuffer: true
  },
  'r16unorm-webgl': {
    gl: 33322,
    b: 2,
    c: 1,
    f: 'texture-formats-norm16-webgl',
    renderbuffer: true,
    x: EXT_TEXTURE_NORM16
  },
  'r16snorm-webgl': {
    gl: 36760,
    b: 2,
    c: 1,
    f: 'texture-formats-norm16-webgl',
    x: EXT_TEXTURE_NORM16
  },
  'rgba4unorm-webgl': {
    gl: 32854,
    b: 2,
    c: 4,
    wgpu: false,
    renderbuffer: true
  },
  'rgb565unorm-webgl': {
    gl: 36194,
    b: 2,
    c: 4,
    wgpu: false,
    renderbuffer: true
  },
  'rgb5a1unorm-webgl': {
    gl: 32855,
    b: 2,
    c: 4,
    wgpu: false,
    renderbuffer: true
  },
  'rgb8unorm-webgl': {
    gl: 32849,
    b: 3,
    c: 3,
    wgpu: false
  },
  'rgb8snorm-webgl': {
    gl: 36758,
    b: 3,
    c: 3,
    wgpu: false
  },
  'rgba8unorm': {
    gl: 32856,
    gl1: 6408,
    b: 4,
    c: 2,
    bpp: 4
  },
  'rgba8unorm-srgb': {
    gl: 35907,
    gl1: 35906,
    b: 4,
    c: 4,
    gl1ext: EXT_SRGB,
    bpp: 4
  },
  'rgba8snorm': {
    gl: 36759,
    b: 4,
    c: 4
  },
  'rgba8uint': {
    gl: 36220,
    b: 4,
    c: 4,
    bpp: 4
  },
  'rgba8sint': {
    gl: 36238,
    b: 4,
    c: 4,
    bpp: 4
  },
  'bgra8unorm': {
    b: 4,
    c: 4
  },
  'bgra8unorm-srgb': {
    b: 4,
    c: 4
  },
  'rg16uint': {
    gl: 33338,
    b: 4,
    c: 1,
    bpp: 4
  },
  'rg16sint': {
    gl: 33337,
    b: 4,
    c: 2,
    bpp: 4
  },
  'rg16float': {
    gl: 33327,
    bpp: 4,
    b: 4,
    c: 2,
    render: 'texture-renderable-float16-webgl',
    filter: 'texture-filter-linear-float16-webgl',
    renderbuffer: true
  },
  'rg16unorm-webgl': {
    gl: 33324,
    b: 2,
    c: 2,
    f: 'texture-formats-norm16-webgl',
    x: EXT_TEXTURE_NORM16
  },
  'rg16snorm-webgl': {
    gl: 36761,
    b: 2,
    c: 2,
    f: 'texture-formats-norm16-webgl',
    x: EXT_TEXTURE_NORM16
  },
  'r32uint': {
    gl: 33334,
    b: 4,
    c: 1,
    bpp: 4,
    renderbuffer: true
  },
  'r32sint': {
    gl: 33333,
    b: 4,
    c: 1,
    bpp: 4,
    renderbuffer: true
  },
  'r32float': {
    gl: 33326,
    bpp: 4,
    b: 4,
    c: 1,
    render: 'texture-renderable-float32-webgl',
    filter: 'texture-filter-linear-float32-webgl'
  },
  'rgb9e5ufloat': {
    gl: 35901,
    b: 4,
    c: 3,
    p: 1,
    render: 'texture-renderable-float16-webgl',
    filter: 'texture-filter-linear-float16-webgl'
  },
  'rg11b10ufloat': {
    gl: 35898,
    b: 4,
    c: 3,
    p: 1,
    render: 'texture-renderable-float32-webgl',
    renderbuffer: true
  },
  'rgb10a2unorm': {
    gl: 32857,
    b: 4,
    c: 4,
    p: 1,
    renderbuffer: true
  },
  'rgb10a2unorm-webgl': {
    b: 4,
    c: 4,
    gl: 36975,
    p: 1,
    wgpu: false,
    bpp: 4,
    renderbuffer: true
  },
  'rgb16unorm-webgl': {
    gl: 32852,
    b: 2,
    c: 3,
    f: 'texture-formats-norm16-webgl',
    x: EXT_TEXTURE_NORM16
  },
  'rgb16snorm-webgl': {
    gl: 36762,
    b: 2,
    c: 3,
    f: 'texture-formats-norm16-webgl',
    x: EXT_TEXTURE_NORM16
  },
  'rg32uint': {
    gl: 33340,
    b: 8,
    c: 2,
    renderbuffer: true
  },
  'rg32sint': {
    gl: 33339,
    b: 8,
    c: 2,
    renderbuffer: true
  },
  'rg32float': {
    gl: 33328,
    b: 8,
    c: 2,
    render: 'texture-renderable-float32-webgl',
    filter: 'texture-filter-linear-float32-webgl',
    renderbuffer: true
  },
  'rgba16uint': {
    gl: 36214,
    b: 8,
    c: 4,
    renderbuffer: true
  },
  'rgba16sint': {
    gl: 36232,
    b: 8,
    c: 4,
    renderbuffer: true
  },
  'rgba16float': {
    gl: 34842,
    gl1: 6408,
    b: 8,
    c: 4,
    render: 'texture-renderable-float16-webgl',
    filter: 'texture-filter-linear-float16-webgl'
  },
  'rgba16unorm-webgl': {
    gl: 32859,
    b: 2,
    c: 4,
    f: 'texture-formats-norm16-webgl',
    renderbuffer: true,
    x: EXT_TEXTURE_NORM16
  },
  'rgba16snorm-webgl': {
    gl: 36763,
    b: 2,
    c: 4,
    f: 'texture-formats-norm16-webgl',
    x: EXT_TEXTURE_NORM16
  },
  'rgb32float-webgl': {
    gl: 34837,
    gl1: 6407,
    render: 'texture-renderable-float32-webgl',
    filter: 'texture-filter-linear-float32-webgl',
    gl2ext: EXT_FLOAT_RENDER_WEBGL2,
    gl1ext: EXT_FLOAT_WEBGL1,
    dataFormat: 6407,
    types: [5126]
  },
  'rgba32uint': {
    gl: 36208,
    b: 16,
    c: 4,
    renderbuffer: true
  },
  'rgba32sint': {
    gl: 36226,
    b: 16,
    c: 4,
    renderbuffer: true
  },
  'rgba32float': {
    gl: 34836,
    b: 16,
    c: 4,
    render: 'texture-renderable-float32-webgl',
    filter: 'texture-filter-linear-float32-webgl',
    renderbuffer: true
  },
  'stencil8': {
    gl: 36168,
    gl1: 36168,
    b: 1,
    c: 1,
    attachment: 36128,
    renderbuffer: true
  },
  'depth16unorm': {
    gl: 33189,
    gl1: 33189,
    b: 2,
    c: 1,
    attachment: 36096,
    renderbuffer: true
  },
  'depth24plus': {
    gl: 33190,
    b: 3,
    c: 1,
    attachment: 36096
  },
  'depth32float': {
    gl: 36012,
    b: 4,
    c: 1,
    attachment: 36096,
    renderbuffer: true
  },
  'depth24plus-stencil8': {
    gl: 34041,
    gl1: 34041,
    b: 4,
    c: 2,
    p: 1,
    attachment: 33306,
    renderbuffer: true,
    depthTexture: true
  },
  'depth24unorm-stencil8': {
    gl: 35056,
    b: 4,
    c: 2,
    p: 1,
    attachment: 33306,
    renderbuffer: true
  },
  'depth32float-stencil8': {
    gl: 36013,
    b: 5,
    c: 2,
    p: 1,
    attachment: 33306,
    renderbuffer: true
  },
  'bc1-rgb-unorm-webgl': {
    gl: 33776,
    x: X_S3TC,
    f: texture_compression_bc
  },
  'bc1-rgb-unorm-srgb-webgl': {
    gl: 35916,
    x: X_S3TC_SRGB,
    f: texture_compression_bc
  },
  'bc1-rgba-unorm': {
    gl: 33777,
    x: X_S3TC,
    f: texture_compression_bc
  },
  'bc1-rgba-unorm-srgb': {
    gl: 35916,
    x: X_S3TC_SRGB,
    f: texture_compression_bc
  },
  'bc2-rgba-unorm': {
    gl: 33778,
    x: X_S3TC,
    f: texture_compression_bc
  },
  'bc2-rgba-unorm-srgb': {
    gl: 35918,
    x: X_S3TC_SRGB,
    f: texture_compression_bc
  },
  'bc3-rgba-unorm': {
    gl: 33779,
    x: X_S3TC,
    f: texture_compression_bc
  },
  'bc3-rgba-unorm-srgb': {
    gl: 35919,
    x: X_S3TC_SRGB,
    f: texture_compression_bc
  },
  'bc4-r-unorm': {
    gl: 36283,
    x: X_RGTC,
    f: texture_compression_bc
  },
  'bc4-r-snorm': {
    gl: 36284,
    x: X_RGTC,
    f: texture_compression_bc
  },
  'bc5-rg-unorm': {
    gl: 36285,
    x: X_RGTC,
    f: texture_compression_bc
  },
  'bc5-rg-snorm': {
    gl: 36286,
    x: X_RGTC,
    f: texture_compression_bc
  },
  'bc6h-rgb-ufloat': {
    gl: 36495,
    x: X_BPTC,
    f: texture_compression_bc
  },
  'bc6h-rgb-float': {
    gl: 36494,
    x: X_BPTC,
    f: texture_compression_bc
  },
  'bc7-rgba-unorm': {
    gl: 36492,
    x: X_BPTC,
    f: texture_compression_bc
  },
  'bc7-rgba-unorm-srgb': {
    gl: 36493,
    x: X_BPTC,
    f: texture_compression_bc
  },
  'etc2-rgb8unorm': {
    gl: 37492,
    f: texture_compression_etc2
  },
  'etc2-rgb8unorm-srgb': {
    gl: 37494,
    f: texture_compression_etc2
  },
  'etc2-rgb8a1unorm': {
    gl: 37496,
    f: texture_compression_etc2
  },
  'etc2-rgb8a1unorm-srgb': {
    gl: 37497,
    f: texture_compression_etc2
  },
  'etc2-rgba8unorm': {
    gl: 37493,
    f: texture_compression_etc2
  },
  'etc2-rgba8unorm-srgb': {
    gl: 37495,
    f: texture_compression_etc2
  },
  'eac-r11unorm': {
    gl: 37488,
    f: texture_compression_etc2
  },
  'eac-r11snorm': {
    gl: 37489,
    f: texture_compression_etc2
  },
  'eac-rg11unorm': {
    gl: 37490,
    f: texture_compression_etc2
  },
  'eac-rg11snorm': {
    gl: 37491,
    f: texture_compression_etc2
  },
  'astc-4x4-unorm': {
    gl: 37808,
    f: texture_compression_astc
  },
  'astc-4x4-unorm-srgb': {
    gl: 37840,
    f: texture_compression_astc
  },
  'astc-5x4-unorm': {
    gl: 37809,
    f: texture_compression_astc
  },
  'astc-5x4-unorm-srgb': {
    gl: 37841,
    f: texture_compression_astc
  },
  'astc-5x5-unorm': {
    gl: 37810,
    f: texture_compression_astc
  },
  'astc-5x5-unorm-srgb': {
    gl: 37842,
    f: texture_compression_astc
  },
  'astc-6x5-unorm': {
    gl: 37811,
    f: texture_compression_astc
  },
  'astc-6x5-unorm-srgb': {
    gl: 37843,
    f: texture_compression_astc
  },
  'astc-6x6-unorm': {
    gl: 37812,
    f: texture_compression_astc
  },
  'astc-6x6-unorm-srgb': {
    gl: 37844,
    f: texture_compression_astc
  },
  'astc-8x5-unorm': {
    gl: 37813,
    f: texture_compression_astc
  },
  'astc-8x5-unorm-srgb': {
    gl: 37845,
    f: texture_compression_astc
  },
  'astc-8x6-unorm': {
    gl: 37814,
    f: texture_compression_astc
  },
  'astc-8x6-unorm-srgb': {
    gl: 37846,
    f: texture_compression_astc
  },
  'astc-8x8-unorm': {
    gl: 37815,
    f: texture_compression_astc
  },
  'astc-8x8-unorm-srgb': {
    gl: 37847,
    f: texture_compression_astc
  },
  'astc-10x5-unorm': {
    gl: 37819,
    f: texture_compression_astc
  },
  'astc-10x5-unorm-srgb': {
    gl: 37851,
    f: texture_compression_astc
  },
  'astc-10x6-unorm': {
    gl: 37817,
    f: texture_compression_astc
  },
  'astc-10x6-unorm-srgb': {
    gl: 37849,
    f: texture_compression_astc
  },
  'astc-10x8-unorm': {
    gl: 37818,
    f: texture_compression_astc
  },
  'astc-10x8-unorm-srgb': {
    gl: 37850,
    f: texture_compression_astc
  },
  'astc-10x10-unorm': {
    gl: 37819,
    f: texture_compression_astc
  },
  'astc-10x10-unorm-srgb': {
    gl: 37851,
    f: texture_compression_astc
  },
  'astc-12x10-unorm': {
    gl: 37820,
    f: texture_compression_astc
  },
  'astc-12x10-unorm-srgb': {
    gl: 37852,
    f: texture_compression_astc
  },
  'astc-12x12-unorm': {
    gl: 37821,
    f: texture_compression_astc
  },
  'astc-12x12-unorm-srgb': {
    gl: 37853,
    f: texture_compression_astc
  },
  'pvrtc-rgb4unorm-webgl': {
    gl: 35840,
    f: texture_compression_pvrtc_webgl
  },
  'pvrtc-rgba4unorm-webgl': {
    gl: 35842,
    f: texture_compression_pvrtc_webgl
  },
  'pvrtc-rbg2unorm-webgl': {
    gl: 35841,
    f: texture_compression_pvrtc_webgl
  },
  'pvrtc-rgba2unorm-webgl': {
    gl: 35843,
    f: texture_compression_pvrtc_webgl
  },
  'etc1-rbg-unorm-webgl': {
    gl: 36196,
    f: texture_compression_etc1_webgl
  },
  'atc-rgb-unorm-webgl': {
    gl: 35986,
    f: texture_compression_atc_webgl
  },
  'atc-rgba-unorm-webgl': {
    gl: 35986,
    f: texture_compression_atc_webgl
  },
  'atc-rgbai-unorm-webgl': {
    gl: 34798,
    f: texture_compression_atc_webgl
  }
};
const DATA_FORMAT_CHANNELS = {
  [6403]: 1,
  [36244]: 1,
  [33319]: 2,
  [33320]: 2,
  [6407]: 3,
  [36248]: 3,
  [6408]: 4,
  [36249]: 4,
  [6402]: 1,
  [34041]: 1,
  [6406]: 1,
  [6409]: 1,
  [6410]: 2
};
const TYPE_SIZES = {
  [5126]: 4,
  [5125]: 4,
  [5124]: 4,
  [5123]: 2,
  [5122]: 2,
  [5131]: 2,
  [5120]: 1,
  [5121]: 1
};
export function isTextureFormatSupported(gl, formatOrGL) {
  const format = convertGLToTextureFormat(formatOrGL);
  const info = TEXTURE_FORMATS[format];
  if (!info) {
    return false;
  }
  if (isWebGL2(gl) ? info.gl === undefined : info.gl1 === undefined) {
    return false;
  }
  const extension = info.x || (isWebGL2(gl) ? info.gl2ext || info.gl1ext : info.gl1ext);
  if (extension) {
    return Boolean(gl.getExtension(extension));
  }
  return true;
}
export function isRenderbufferFormatSupported(gl, format) {
  var _TEXTURE_FORMATS$form;
  return isTextureFormatSupported(gl, format) && ((_TEXTURE_FORMATS$form = TEXTURE_FORMATS[format]) === null || _TEXTURE_FORMATS$form === void 0 ? void 0 : _TEXTURE_FORMATS$form.renderbuffer);
}
export function convertGLToTextureFormat(format) {
  if (typeof format === 'string') {
    return format;
  }
  const entry = Object.entries(TEXTURE_FORMATS).find(_ref => {
    let [, entry] = _ref;
    return entry.gl === format || entry.gl1 === format;
  });
  if (!entry) {
    throw new Error(`Unknown texture format ${format}`);
  }
  return entry[0];
}
export function convertTextureFormatToGL(format, isWebGL2) {
  const formatInfo = TEXTURE_FORMATS[format];
  const webglFormat = isWebGL2 ? formatInfo === null || formatInfo === void 0 ? void 0 : formatInfo.gl : formatInfo === null || formatInfo === void 0 ? void 0 : formatInfo.gl1;
  if (webglFormat === undefined) {
    throw new Error(`Unsupported texture format ${format}`);
  }
  return webglFormat;
}
export function getTextureFormatSupport(gl, formatOrGL) {
  const format = convertGLToTextureFormat(formatOrGL);
  const info = TEXTURE_FORMATS[format];
  if (!info) {
    return {
      supported: false
    };
  }
  let supported = isWebGL2(gl) ? info.gl === undefined : info.gl1 === undefined;
  supported = supported && checkTextureFeatures(gl, [info.f]);
  return {
    supported,
    renderable: supported && checkTextureFeatures(gl, [info.render]),
    filterable: supported && checkTextureFeatures(gl, [info.filter]),
    blendable: false,
    storable: false
  };
}
export function isTextureFormatFilterable(gl, formatOrGL) {
  const format = convertGLToTextureFormat(formatOrGL);
  if (!isTextureFormatSupported(gl, format)) {
    return false;
  }
  try {
    const decoded = decodeTextureFormat(format);
    if (decoded.signed) {
      return false;
    }
  } catch {
    return false;
  }
  if (format.endsWith('32float')) {
    return Boolean(gl.getExtension('OES_texture_float_linear'));
  }
  if (format.endsWith('16float')) {
    return Boolean(gl.getExtension('OES_texture_half_float_linear'));
  }
  return true;
}
export function isTextureFormatRenderable(gl, formatOrGL) {
  const format = convertGLToTextureFormat(formatOrGL);
  if (!isTextureFormatSupported(gl, format)) {
    return false;
  }
  if (typeof format === 'number') {
    return false;
  }
  return true;
}
export function getWebGLTextureParameters(formatOrGL, isWebGL2) {
  const format = convertGLToTextureFormat(formatOrGL);
  const webglFormat = convertTextureFormatToGL(format, isWebGL2);
  const decoded = decodeTextureFormat(format);
  return {
    format: webglFormat,
    dataFormat: getWebGLPixelDataFormat(decoded.format, decoded.integer, decoded.normalized, webglFormat),
    type: decoded.dataType ? getGLFromVertexType(decoded.dataType) : 5121,
    compressed: decoded.compressed
  };
}
export function getDepthStencilAttachmentWebGL(format) {
  const info = TEXTURE_FORMATS[format];
  if (!(info !== null && info !== void 0 && info.attachment)) {
    throw new Error(`${format} is not a depth stencil format`);
  }
  return info.attachment;
}
export function _checkFloat32ColorAttachment(gl) {
  let internalFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6408;
  let srcFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6408;
  let srcType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 5121;
  let texture = null;
  let framebuffer = null;
  try {
    texture = gl.createTexture();
    gl.bindTexture(3553, texture);
    const level = 0;
    const width = 1;
    const height = 1;
    const border = 0;
    const pixel = new Uint8Array([0, 0, 255, 255]);
    gl.texImage2D(3553, level, internalFormat, width, height, border, srcFormat, srcType, pixel);
    framebuffer = gl.createFramebuffer();
    gl.bindFramebuffer(36160, framebuffer);
    gl.framebufferTexture2D(36160, 36064, 3553, texture, 0);
    const status = gl.checkFramebufferStatus(36160) === 36053;
    gl.bindTexture(3553, null);
    return status;
  } finally {
    gl.deleteTexture(texture);
    gl.deleteFramebuffer(framebuffer);
  }
}
export function getTextureFormatBytesPerPixel(formatOrGL, isWebGL2) {
  const format = convertGLToTextureFormat(formatOrGL);
  const params = getWebGLTextureParameters(format, isWebGL2);
  const channels = DATA_FORMAT_CHANNELS[params.dataFormat] || 4;
  const channelSize = TYPE_SIZES[params.type] || 1;
  return channels * channelSize;
}
function getWebGLPixelDataFormat(dataFormat, integer, normalized, format) {
  if (format === 6408 || format === 6407) {
    return format;
  }
  switch (dataFormat) {
    case 'r':
      return integer && !normalized ? 36244 : 6403;
    case 'rg':
      return integer && !normalized ? 33320 : 33319;
    case 'rgb':
      return integer && !normalized ? 36248 : 6407;
    case 'rgba':
      return integer && !normalized ? 36249 : 6408;
    default:
      return 6408;
  }
}
//# sourceMappingURL=texture-formats.js.map