import { log, isObjectEmpty } from '@luma.gl/core';
import { pushContextState, popContextState } from "../../context/state-tracker/track-context-state.js";
import { setGLParameters } from "../../context/parameters/unified-parameter-api.js";
import { WebGLDevice } from "../webgl-device.js";
export function withDeviceAndGLParameters(device, parameters, glParameters, func) {
  if (isObjectEmpty(parameters)) {
    return func(device);
  }
  pushContextState(device.gl);
  try {
    setDeviceParameters(device, parameters);
    setGLParameters(device, glParameters);
    return func(device);
  } finally {
    popContextState(device.gl);
  }
}
export function withGLParameters(device, parameters, func) {
  if (isObjectEmpty(parameters)) {
    return func(device);
  }
  pushContextState(device.gl);
  try {
    setGLParameters(device, parameters);
    return func(device);
  } finally {
    popContextState(device.gl);
  }
}
export function withDeviceParameters(device, parameters, func) {
  if (isObjectEmpty(parameters)) {
    return func(device);
  }
  pushContextState(device.gl);
  try {
    setDeviceParameters(device, parameters);
    return func(device);
  } finally {
    popContextState(device.gl);
  }
}
export function setDeviceParameters(device, parameters) {
  const webglDevice = WebGLDevice.attach(device);
  const {
    gl
  } = webglDevice;
  if (parameters.cullMode) {
    switch (parameters.cullMode) {
      case 'none':
        gl.disable(2884);
        break;
      case 'front':
        gl.enable(2884);
        gl.cullFace(1028);
        break;
      case 'back':
        gl.enable(2884);
        gl.cullFace(1029);
        break;
    }
  }
  if (parameters.frontFace) {
    gl.frontFace(map('frontFace', parameters.frontFace, {
      ccw: 2305,
      cw: 2304
    }));
  }
  if (parameters.depthBias !== undefined) {
    gl.polygonOffset(parameters.depthBias, parameters.depthBiasSlopeScale || 0);
  }
  if (parameters.depthWriteEnabled !== undefined) {
    gl.depthMask(mapBoolean('depthWriteEnabled', parameters.depthWriteEnabled));
  }
  if (parameters.depthCompare) {
    parameters.depthCompare !== 'always' ? gl.enable(2929) : gl.disable(2929);
    gl.depthFunc(convertCompareFunction('depthCompare', parameters.depthCompare));
  }
  if (parameters.stencilWriteMask) {
    const mask = parameters.stencilWriteMask;
    gl.stencilMaskSeparate(1028, mask);
    gl.stencilMaskSeparate(1029, mask);
  }
  if (parameters.stencilReadMask) {
    log.warn('stencilReadMask not supported under WebGL');
  }
  if (parameters.stencilCompare) {
    const mask = parameters.stencilReadMask || 0xffffffff;
    const glValue = convertCompareFunction('depthCompare', parameters.stencilCompare);
    parameters.stencilCompare !== 'always' ? gl.enable(2960) : gl.disable(2960);
    gl.stencilFuncSeparate(1028, glValue, 0, mask);
    gl.stencilFuncSeparate(1029, glValue, 0, mask);
  }
  if (parameters.stencilPassOperation && parameters.stencilFailOperation && parameters.stencilDepthFailOperation) {
    const dppass = convertStencilOperation('stencilPassOperation', parameters.stencilPassOperation);
    const sfail = convertStencilOperation('stencilFailOperation', parameters.stencilFailOperation);
    const dpfail = convertStencilOperation('stencilDepthFailOperation', parameters.stencilDepthFailOperation);
    gl.stencilOpSeparate(1028, sfail, dpfail, dppass);
    gl.stencilOpSeparate(1029, sfail, dpfail, dppass);
  }
  if (parameters.blendColorOperation || parameters.blendAlphaOperation) {
    gl.enable(3042);
    const colorEquation = convertBlendOperationToEquation('blendColorOperation', parameters.blendColorOperation || 'add');
    const alphaEquation = convertBlendOperationToEquation('blendAlphaOperation', parameters.blendAlphaOperation || 'add');
    gl.blendEquationSeparate(colorEquation, alphaEquation);
    const colorSrcFactor = convertBlendFactorToFunction('blendColorSrcFactor', parameters.blendColorSrcFactor || 'one');
    const colorDstFactor = convertBlendFactorToFunction('blendColorDstFactor', parameters.blendColorDstFactor || 'zero');
    const alphaSrcFactor = convertBlendFactorToFunction('blendAlphaSrcFactor', parameters.blendAlphaSrcFactor || 'one');
    const alphaDstFactor = convertBlendFactorToFunction('blendAlphaDstFactor', parameters.blendAlphaDstFactor || 'zero');
    gl.blendFuncSeparate(colorSrcFactor, colorDstFactor, alphaSrcFactor, alphaDstFactor);
  }
}
export function convertCompareFunction(parameter, value) {
  return map(parameter, value, {
    never: 512,
    less: 513,
    equal: 514,
    'less-equal': 515,
    greater: 516,
    'not-equal': 517,
    'greater-equal': 518,
    always: 519
  });
}
export function convertToCompareFunction(parameter, value) {
  return map(parameter, value, {
    [512]: 'never',
    [513]: 'less',
    [514]: 'equal',
    [515]: 'less-equal',
    [516]: 'greater',
    [517]: 'not-equal',
    [518]: 'greater-equal',
    [519]: 'always'
  });
}
function convertStencilOperation(parameter, value) {
  return map(parameter, value, {
    keep: 7680,
    zero: 0,
    replace: 7681,
    invert: 5386,
    'increment-clamp': 7682,
    'decrement-clamp': 7683,
    'increment-wrap': 34055,
    'decrement-wrap': 34056
  });
}
function convertBlendOperationToEquation(parameter, value) {
  return map(parameter, value, {
    'add': 32774,
    'subtract': 32778,
    'reverse-subtract': 32779,
    'min': 32775,
    'max': 32776
  });
}
function convertBlendFactorToFunction(parameter, value) {
  return map(parameter, value, {
    'one': 1,
    'zero': 0,
    'src-color': 768,
    'one-minus-src-color': 769,
    'dst-color': 774,
    'one-minus-dst-color': 775,
    'src-alpha': 770,
    'one-minus-src-alpha': 771,
    'dst-alpha': 772,
    'one-minus-dst-alpha': 773
  });
}
function message(parameter, value) {
  return `Illegal parameter ${value} for ${parameter}`;
}
function map(parameter, value, valueMap) {
  if (!(value in valueMap)) {
    throw new Error(message(parameter, value));
  }
  return valueMap[value];
}
function mapBoolean(parameter, value) {
  return value;
}
//# sourceMappingURL=device-parameters.js.map