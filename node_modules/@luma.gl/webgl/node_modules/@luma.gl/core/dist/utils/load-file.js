let pathPrefix = '';
export function setPathPrefix(prefix) {
  pathPrefix = prefix;
}
export async function loadFile(url, options) {
  url = url.startsWith('http') ? url : pathPrefix + url;
  const dataType = (options === null || options === void 0 ? void 0 : options.dataType) || 'text';
  const response = await fetch(url, options);
  return await response[dataType]();
}
export async function loadImageBitmap(url, opts) {
  const image = new Image();
  image.crossOrigin = (opts === null || opts === void 0 ? void 0 : opts.crossOrigin) || 'anonymous';
  image.src = url.startsWith('http') ? url : pathPrefix + url;
  await image.decode();
  return await createImageBitmap(image);
}
export async function loadImage(url, opts) {
  return new Promise((resolve, reject) => {
    try {
      const image = new Image();
      image.onload = () => resolve(image);
      image.onerror = () => reject(new Error(`Could not load image ${url}.`));
      image.crossOrigin = (opts === null || opts === void 0 ? void 0 : opts.crossOrigin) || 'anonymous';
      image.src = url.startsWith('http') ? url : pathPrefix + url;
    } catch (error) {
      reject(error);
    }
  });
}
export async function loadScript(scriptUrl, scriptId) {
  const head = document.getElementsByTagName('head')[0];
  if (!head) {
    throw new Error('loadScript');
  }
  const script = document.createElement('script');
  script.setAttribute('type', 'text/javascript');
  script.setAttribute('src', scriptUrl);
  if (scriptId) {
    script.id = scriptId;
  }
  return new Promise((resolve, reject) => {
    script.onload = resolve;
    script.onerror = error => reject(new Error(`Unable to load script '${scriptUrl}': ${error}`));
    head.appendChild(script);
  });
}
//# sourceMappingURL=load-file.js.map