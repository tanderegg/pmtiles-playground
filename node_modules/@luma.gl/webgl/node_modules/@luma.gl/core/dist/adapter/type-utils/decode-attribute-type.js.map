{"version":3,"file":"decode-attribute-type.js","names":["decodeShaderAttributeType","attributeType","dataType","components","TYPE_INFO","integer","signed","byteLength","TYPE_SIZES","defaultVertexFormat","getCompatibleVertexFormat","vertexType","f32","f16","i32","u32"],"sources":["../../../src/adapter/type-utils/decode-attribute-type.ts"],"sourcesContent":["// luma.gl, MIT licese\nimport {ShaderDataType, ShaderAttributeType} from '../types/shader-types';\nimport {VertexFormat, VertexType} from '../types/vertex-formats';\n\n/** Information extracted from a ShaderAttributeInfo constant */\nexport type ShaderAttributeTypeInfo = {\n  /** WGSL-style primitive data type, f32, i32, u32 */\n  dataType: ShaderDataType,\n  /** Whether this is a normalized integer (that must be used as float) */\n  components: 1 | 2 | 3 | 4;\n  /** Length in bytes of the data for one vertex */\n  byteLength?: number;\n  /** Whether this is for integer or float vert */\n  integer: boolean;\n  /** Whether this data type is signed */\n  signed: boolean;\n  /** The simplest vertex format that matches the shader attribute's data type */\n  defaultVertexFormat?: VertexFormat;\n};\n\n/** Decodes a vertex type, returning byte length and flags (integer, signed, normalized) */\nexport function decodeShaderAttributeType(attributeType: ShaderAttributeType): ShaderAttributeTypeInfo {\n  const [dataType, components] = TYPE_INFO[attributeType];\n  const integer: boolean = dataType === 'i32' || dataType === 'u32';\n  const signed: boolean = dataType !== 'u32';\n\n  const byteLength = TYPE_SIZES[dataType] * components;\n  const defaultVertexFormat = getCompatibleVertexFormat(dataType, components);\n  return {\n    dataType,\n    components,\n    defaultVertexFormat,\n    byteLength,\n    integer,\n    signed\n  };\n}\n\n/** Get the \"default\" vertex format for a certain shader data type */\nfunction getCompatibleVertexFormat(dataType: ShaderDataType, components: 1 | 2 | 3 | 4): VertexFormat {\n  let vertexType: VertexType;\n  switch (dataType) {\n    case 'f32': vertexType = 'float32'; break;\n    case 'i32': vertexType = 'sint32'; break;\n    case 'u32': vertexType = 'uint32'; break;\n    case 'f16': \n      return components <= 2 ? 'float16x2' : 'float16x4';\n  }\n  // TODO logic does not work for float16\n  if (components === 1) {\n    return vertexType;\n  }\n  return `${vertexType}x${components}`;\n}\n\n/** All valid shader attribute types. A table guarantees exhaustive list and fast execution */\nconst TYPE_INFO: Record<ShaderAttributeType, [ShaderDataType, 1 | 2 | 3 | 4]> = {\n  f32: ['f32', 1],\n  'vec2<f32>': ['f32', 2],\n  'vec3<f32>': ['f32', 3],\n  'vec4<f32>': ['f32', 4],\n  f16: ['f16', 1],\n  'vec2<f16>': ['f16', 2],\n  'vec3<f16>': ['f16', 3],\n  'vec4<f16>': ['f16', 4],\n  i32: ['i32', 1],\n  'vec2<i32>': ['i32', 2],\n  'vec3<i32>': ['i32', 3],\n  'vec4<i32>': ['i32', 4],\n  u32: ['u32', 1],\n  'vec2<u32>': ['u32', 2],\n  'vec3<u32>': ['u32', 3],\n  'vec4<u32>': ['u32', 4]\n};\n\nconst TYPE_SIZES: Record<ShaderDataType, number> = {\n  f32: 4,\n  f16: 2,\n  i32: 4,\n  u32: 4,\n  // 'bool-webgl': 4,  \n};\n"],"mappings":"AAqBA,OAAO,SAASA,yBAAyBA,CAACC,aAAkC,EAA2B;EACrG,MAAM,CAACC,QAAQ,EAAEC,UAAU,CAAC,GAAGC,SAAS,CAACH,aAAa,CAAC;EACvD,MAAMI,OAAgB,GAAGH,QAAQ,KAAK,KAAK,IAAIA,QAAQ,KAAK,KAAK;EACjE,MAAMI,MAAe,GAAGJ,QAAQ,KAAK,KAAK;EAE1C,MAAMK,UAAU,GAAGC,UAAU,CAACN,QAAQ,CAAC,GAAGC,UAAU;EACpD,MAAMM,mBAAmB,GAAGC,yBAAyB,CAACR,QAAQ,EAAEC,UAAU,CAAC;EAC3E,OAAO;IACLD,QAAQ;IACRC,UAAU;IACVM,mBAAmB;IACnBF,UAAU;IACVF,OAAO;IACPC;EACF,CAAC;AACH;AAGA,SAASI,yBAAyBA,CAACR,QAAwB,EAAEC,UAAyB,EAAgB;EACpG,IAAIQ,UAAsB;EAC1B,QAAQT,QAAQ;IACd,KAAK,KAAK;MAAES,UAAU,GAAG,SAAS;MAAE;IACpC,KAAK,KAAK;MAAEA,UAAU,GAAG,QAAQ;MAAE;IACnC,KAAK,KAAK;MAAEA,UAAU,GAAG,QAAQ;MAAE;IACnC,KAAK,KAAK;MACR,OAAOR,UAAU,IAAI,CAAC,GAAG,WAAW,GAAG,WAAW;EACtD;EAEA,IAAIA,UAAU,KAAK,CAAC,EAAE;IACpB,OAAOQ,UAAU;EACnB;EACA,OAAQ,GAAEA,UAAW,IAAGR,UAAW,EAAC;AACtC;AAGA,MAAMC,SAAuE,GAAG;EAC9EQ,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACf,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACvB,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACvB,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACvBC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACf,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACvB,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACvB,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACvBC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACf,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACvB,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACvB,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACvBC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACf,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACvB,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;EACvB,WAAW,EAAE,CAAC,KAAK,EAAE,CAAC;AACxB,CAAC;AAED,MAAMP,UAA0C,GAAG;EACjDI,GAAG,EAAE,CAAC;EACNC,GAAG,EAAE,CAAC;EACNC,GAAG,EAAE,CAAC;EACNC,GAAG,EAAE;AAEP,CAAC"}