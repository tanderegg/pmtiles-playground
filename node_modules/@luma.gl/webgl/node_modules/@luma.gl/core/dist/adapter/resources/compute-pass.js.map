{"version":3,"file":"compute-pass.js","names":["Resource","_Symbol$toStringTag","Symbol","toStringTag","ComputePass","constructor","device","props","defaultProps"],"sources":["../../../src/adapter/resources/compute-pass.ts"],"sourcesContent":["import {Resource, ResourceProps} from './resource';\nimport {ComputePipeline} from './compute-pipeline';\nimport {Buffer} from './buffer';\nimport type {Device} from '../device';\n\nexport type ComputePassProps = ResourceProps & {};\n\nexport abstract class ComputePass extends Resource<ComputePassProps> {\n  static override defaultProps: Required<ComputePassProps> = {\n    ...Resource.defaultProps\n  }\n\n  override get [Symbol.toStringTag](): string {\n    return 'ComputePass';\n  }\n\n  constructor(device: Device, props: ComputePassProps) {\n    super(device, props, Resource.defaultProps);\n  }\n\n  abstract override destroy(): void;\n\n  abstract end(): void;\n\n  abstract setPipeline(pipeline: ComputePipeline): void;\n\n  /** Sets an array of bindings (uniform buffers, samplers, textures, ...) */\n  // abstract setBindings(bindings: Binding[]): void;\n\n  /**\n   * Dispatch work to be performed with the current ComputePipeline.\n   * @param x X dimension of the grid of workgroups to dispatch.\n   * @param y Y dimension of the grid of workgroups to dispatch.\n   * @param z Z dimension of the grid of workgroups to dispatch.\n   */\n  abstract dispatch(x: number, y?: number, z?: number): void;\n\n  /**\n   * Dispatch work to be performed with the current ComputePipeline.\n   * @param indirectBuffer buffer must be a tightly packed block of three 32-bit unsigned integer values (12 bytes total), given in the same order as the arguments for dispatch()\n   * @param indirectOffset\n   */\n  abstract dispatchIndirect(indirectBuffer: Buffer, indirectOffset?: number): void;\n\n  abstract pushDebugGroup(groupLabel: string): void;\n  abstract popDebugGroup(): void;\n  abstract insertDebugMarker(markerLabel: string): void;\n\n  // writeTimestamp(querySet: GPUQuerySet, queryIndex: number): void;\n  // beginPipelineStatisticsQuery(querySet: GPUQuerySet, queryIndex: number): void;\n  // endPipelineStatisticsQuery(querySet: GPUQuerySet, queryIndex: number): void;\n}\n"],"mappings":";SAAQA,QAAQ;AAAAC,mBAAA,GAYAC,MAAM,CAACC,WAAW;AALlC,OAAO,MAAeC,WAAW,SAASJ,QAAQ,CAAmB;EAKnE,KAAAC,mBAAA,IAA4C;IAC1C,OAAO,aAAa;EACtB;EAEAI,WAAWA,CAACC,MAAc,EAAEC,KAAuB,EAAE;IACnD,KAAK,CAACD,MAAM,EAAEC,KAAK,EAAEP,QAAQ,CAACQ,YAAY,CAAC;EAC7C;AAiCF;AA5CsBJ,WAAW,CACfI,YAAY,GAA+B;EACzD,GAAGR,QAAQ,CAACQ;AACd,CAAC"}