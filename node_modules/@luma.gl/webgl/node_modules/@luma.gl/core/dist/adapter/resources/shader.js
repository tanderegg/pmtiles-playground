let _Symbol$toStringTag;
import { Resource } from "./resource.js";
import { uid } from "../../utils/utils.js";
import { formatCompilerLog } from "../../lib/compiler-log/format-compiler-log.js";
import { getShaderInfo } from "../../lib/compiler-log/get-shader-info.js";
_Symbol$toStringTag = Symbol.toStringTag;
export class Shader extends Resource {
  get [_Symbol$toStringTag]() {
    return 'Shader';
  }
  constructor(device, props) {
    super(device, {
      id: getShaderIdFromProps(props),
      ...props
    }, Shader.defaultProps);
    this.stage = void 0;
    this.source = void 0;
    this.compilationStatus = 'pending';
    this.stage = this.props.stage;
    this.source = this.props.source;
  }
  getCompilationInfoSync() {
    return null;
  }
  async debugShader() {
    switch (this.props.debug) {
      case 'never':
        return;
      case 'errors':
        if (this.compilationStatus === 'success') {
          return;
        }
        break;
      case 'warnings':
      case 'always':
        break;
    }
    const messages = await this.getCompilationInfo();
    if (this.props.debug === 'warnings' && (messages === null || messages === void 0 ? void 0 : messages.length) === 0) {
      return;
    }
    this._displayShaderLog(messages);
  }
  _displayShaderLog(messages) {
    var _document, _errors$;
    if (typeof document === 'undefined' || !((_document = document) !== null && _document !== void 0 && _document.createElement)) {
      return;
    }
    const shaderName = getShaderInfo(this.source).name;
    const shaderTitle = `${this.stage} ${shaderName}`;
    const htmlLog = formatCompilerLog(messages, this.source, {
      showSourceCode: 'all',
      html: true
    });
    const button = document.createElement('Button');
    button.innerHTML = `
<h1>Shader Compilation Error in ${shaderTitle}</h1><br /><br />
<code style="user-select:text;"><pre>
${htmlLog}
</pre></code>`;
    button.style.top = '10px';
    button.style.left = '10px';
    button.style.position = 'absolute';
    button.style.zIndex = '9999';
    button.style.width = '100%';
    button.style.textAlign = 'left';
    document.body.appendChild(button);
    const errors = document.getElementsByClassName('luma-compiler-log-error');
    if ((_errors$ = errors[0]) !== null && _errors$ !== void 0 && _errors$.scrollIntoView) {
      errors[0].scrollIntoView();
    }
    button.onclick = () => {
      const dataURI = `data:text/plain,${encodeURIComponent(this.source)}`;
      navigator.clipboard.writeText(dataURI);
    };
  }
}
Shader.defaultProps = {
  ...Resource.defaultProps,
  language: 'auto',
  stage: 'vertex',
  source: '',
  sourceMap: null,
  entryPoint: 'main',
  debug: 'errors'
};
function getShaderIdFromProps(props) {
  return getShaderInfo(props.source).name || props.id || uid(`unnamed ${props.stage}-shader`);
}
//# sourceMappingURL=shader.js.map