{"version":3,"file":"framebuffer.js","names":["Resource","Texture","log","_Symbol$toStringTag","Symbol","toStringTag","Framebuffer","constructor","device","props","arguments","length","undefined","defaultProps","width","height","colorAttachments","depthStencilAttachment","resize","size","updateSize","Array","isArray","id","resizeAttachments","autoCreateAttachmentTextures","map","attachment","texture","createColorTexture","attachResource","createDepthStencilTexture","format","createTexture","usage","RENDER_ATTACHMENT","i","resizedTexture","_createTexture","destroyAttachedResource"],"sources":["../../../src/adapter/resources/framebuffer.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport type {ColorTextureFormat, DepthStencilTextureFormat, TextureFormat} from '../types/texture-formats';\nimport type {Device} from '../device';\nimport {Resource, ResourceProps} from './resource';\nimport {Texture} from './texture';\nimport {log} from '../../utils/log';\n\nexport type FramebufferProps = ResourceProps & {\n  width?: number;\n  height?: number;\n  colorAttachments?: (Texture | ColorTextureFormat)[];\n  depthStencilAttachment?: (Texture | DepthStencilTextureFormat) | null;\n};\n\n/**\n * Create new textures with correct size for all attachments.\n * @note resize() destroys existing textures (if size has changed).\n */\nexport abstract class Framebuffer extends Resource<FramebufferProps> {\n  static override defaultProps: Required<FramebufferProps> = {\n    ...Resource.defaultProps,\n    width: 1,\n    height: 1,\n    colorAttachments: [], // ['rgba8unorm-unsized'],\n    depthStencilAttachment: null // 'depth24plus-stencil8'\n  };  \n\n  override get [Symbol.toStringTag](): string {\n    return 'Framebuffer';\n  }\n\n  /** Width of all attachments in this framebuffer */\n  width: number;\n  /** Height of all attachments in this framebuffer */\n  height: number;\n  /** Color attachments */\n  colorAttachments: Texture[] = [];\n  /** Depth-stencil attachment, if provided */\n  depthStencilAttachment: Texture | null = null;\n\n  constructor(device: Device, props: FramebufferProps = {}) {\n    super(device, props, Framebuffer.defaultProps);\n    this.width = this.props.width;\n    this.height = this.props.height;\n\n    // NOTE: call from subclass constructor as we cannot call overridden methods here (subclass not yet constructed)\n    // this.autoCreateAttachmentTextures();\n  }\n\n  /**\n   * Resizes all attachments\n   * @note resize() destroys existing textures (if size has changed).\n   */\n  resize(size: {width: number; height: number;}): void;\n  resize(size: [width: number, height: number]): void;\n  resize(): void;\n  resize(size?: {width: number; height: number} | [width: number, height: number]): void {\n    let updateSize: boolean = !size;\n    if (size) {\n      const [width, height] = Array.isArray(size) ? size : [size.width, size.height];\n      updateSize = updateSize || height !== this.height || width !== this.width;\n      this.width = width;\n      this.height = height;\n    }\n    if (updateSize) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${this.width}x${this.height}`)();\n      this.resizeAttachments(this.width, this.height);\n    }\n  }\n\n  // /** Returns fully populated attachment object. */\n  // protected normalizeColorAttachment(\n  //   attachment: Texture | ColorTextureFormat\n  // ): Required<ColorAttachment> {\n\n  //   const COLOR_ATTACHMENT_DEFAULTS: Required<ColorAttachment> = {\n  //     texture: undefined!,\n  //     format: undefined!,\n  //     clearValue: [0.0, 0.0, 0.0, 0.0],\n  //     loadOp: 'clear',\n  //     storeOp: 'store'\n  //   };\n\n  //   if (attachment instanceof Texture) {\n  //     return {...COLOR_ATTACHMENT_DEFAULTS, texture: attachment};\n  //   }\n  //   if (typeof attachment === 'string') {\n  //     return {...COLOR_ATTACHMENT_DEFAULTS, format: attachment};\n  //   }\n  //   return {...COLOR_ATTACHMENT_DEFAULTS, ...attachment};\n  // }\n\n  // /** Wraps texture inside fully populated attachment object. */\n  // protected normalizeDepthStencilAttachment(\n  //   attachment: DepthStencilAttachment | Texture | DepthStencilTextureFormat\n  // ): Required<DepthStencilAttachment> {\n  //   const DEPTH_STENCIL_ATTACHMENT_DEFAULTS: Required<DepthStencilAttachment> = {\n  //     texture: undefined!,\n  //     format: undefined!,\n\n  //     depthClearValue: 1.0,\n  //     depthLoadOp: 'clear',\n  //     depthStoreOp: 'store',\n  //     depthReadOnly: false,\n\n  //     stencilClearValue: 0,\n  //     stencilLoadOp: 'clear',\n  //     stencilStoreOp: 'store',\n  //     stencilReadOnly: false\n  //   };\n\n  //   if (typeof attachment === 'string') {\n  //     return {...DEPTH_STENCIL_ATTACHMENT_DEFAULTS, format: attachment};\n  //   }\n  //   // @ts-expect-error attachment instanceof Texture doesn't cover Renderbuffer\n  //   if (attachment.handle || attachment instanceof Texture) {\n  //     return {...DEPTH_STENCIL_ATTACHMENT_DEFAULTS, texture: attachment as Texture};\n  //   }\n  //   return {...DEPTH_STENCIL_ATTACHMENT_DEFAULTS, ...attachment};\n  // }\n\n  /** Auto creates any textures */\n  protected autoCreateAttachmentTextures(){\n    this.colorAttachments = this.props.colorAttachments.map(attachment => {\n      if (typeof attachment === 'string') {\n        const texture = this.createColorTexture(attachment);\n        this.attachResource(texture);\n        return texture;\n      }\n      return attachment;\n    });\n\n    if (this.props.depthStencilAttachment) {\n      if (typeof this.props.depthStencilAttachment === 'string') {\n        const texture = this.createDepthStencilTexture(this.props.depthStencilAttachment);\n        this.attachResource(texture);\n        this.depthStencilAttachment = texture;\n      } else {\n        this.depthStencilAttachment = this.props.depthStencilAttachment;\n      }\n    }\n  }\n\n  /** Create a color texture */\n  protected createColorTexture(format: TextureFormat): Texture {\n    return this.device.createTexture({\n      id: 'color-attachment',\n      usage: Texture.RENDER_ATTACHMENT,\n      format,\n      width: this.width,\n      height: this.height,\n    });\n  }\n\n  /** Create depth stencil texture */\n  protected createDepthStencilTexture(format: TextureFormat): Texture {\n    return this.device.createTexture({\n      id: 'depth-stencil-attachment',\n      usage: Texture.RENDER_ATTACHMENT,\n      format,\n      width: this.width,\n      height: this.height\n    });\n  }\n\n  /**\n   * Default implementation of resize\n   * Creates new textures with correct size for all attachments.\n   * and destroys existing textures if owned\n   */\n  protected resizeAttachments(width: number, height: number): void {\n    for (let i = 0; i < this.colorAttachments.length; ++i) {\n      if (this.colorAttachments[i]) {\n        const resizedTexture = this.device._createTexture({\n          ...this.colorAttachments[i].props,\n          width,\n          height\n        });\n        this.destroyAttachedResource(this.colorAttachments[i]);\n        this.colorAttachments[i] = resizedTexture;\n        this.attachResource(resizedTexture);\n      }\n    }\n\n    if (this.depthStencilAttachment) {\n      const resizedTexture = this.device._createTexture({\n        ...this.depthStencilAttachment.props,\n        width,\n        height\n      });\n      this.destroyAttachedResource(this.depthStencilAttachment);\n      this.depthStencilAttachment = resizedTexture;\n      this.attachResource(resizedTexture);\n    }\n  }\n\n  /** Create a color attachment for WebGL *\n  protected override createColorTexture(colorAttachment: Required<ColorAttachment>): Required<ColorAttachment> {\n    return this.device._createTexture({\n      id: `${this.id}-color`,\n      data: null, // reserves texture memory, but texels are undefined\n      format,\n      // type: GL.UNSIGNED_BYTE,\n      width: this.width,\n      height: this.height,\n      // Note: Mipmapping can be disabled by texture resource when we resize the texture\n      // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n      // behavior we always disable mipmaps.\n      mipmaps: false,\n      // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n      // Use LINEAR so subpixel algos like fxaa work.\n      // Set WRAP modes that support NPOT textures too.\n      sampler: {\n        minFilter: 'linear',\n        magFilter: 'linear',\n        addressModeU: 'clamp-to-edge',\n        addressModeV: 'clamp-to-edge'\n      }\n      // parameters: {\n      //   [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n      //   [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n      //   [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n      //   [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n      // }\n    });\n  }\n  */\n}\n"],"mappings":"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"}