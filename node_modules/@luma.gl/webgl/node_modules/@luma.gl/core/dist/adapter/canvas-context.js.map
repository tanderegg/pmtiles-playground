{"version":3,"file":"canvas-context.js","names":["isBrowser","log","isPage","document","isPageLoaded","readyState","DEFAULT_CANVAS_CONTEXT_PROPS","canvas","width","height","useDevicePixels","autoResize","container","visible","colorSpace","alphaMode","CanvasContext","constructor","props","device","id","htmlCanvas","offscreenCanvas","type","resizeObserver","_canvasSizeInfo","clientWidth","clientHeight","devicePixelRatio","_props","_props2","createCanvas","getContainer","insertBefore","firstChild","style","visibility","getCanvasFromDOM","HTMLCanvasElement","ResizeObserver","entries","entry","target","update","observe","getDevicePixelRatio","OffscreenCanvas","undefined","dpr","window","getPixelSize","parentElement","Error","getAspect","cssToDeviceRatio","drawingBufferWidth","getDrawingBufferSize","cssToDevicePixels","cssPixel","yInvert","arguments","length","ratio","scalePixels","setDevicePixelRatio","options","cachedSize","clampedPixelRatio","canvasWidth","Math","floor","canvasHeight","drawingBufferHeight","min","warn","gl","_setAutoCreatedCanvasId","_this$htmlCanvas","pageLoaded","getPageLoadPromise","Promise","resolve","addEventListener","element","getElementById","body","canvasId","targetCanvas","createElement","Number","isFinite","pixel","point","x","scaleX","y","scaleY","t","xHigh","yHigh","max","r","round"],"sources":["../../src/adapter/canvas-context.ts"],"sourcesContent":["// luma.gl, MIT license\nimport {isBrowser} from '@probe.gl/env';\nimport type {Device} from './device';\nimport type {Framebuffer} from './resources/framebuffer';\nimport {log} from '../utils/log';\n\nconst isPage: boolean = isBrowser() && typeof document !== 'undefined';\nconst isPageLoaded: () => boolean = () => isPage && document.readyState === 'complete';\n\n/** Properties for a CanvasContext */\nexport type CanvasContextProps = {\n  /** If canvas not supplied, will be created and added to the DOM. If string, will be looked up in the DOM */\n  canvas?: HTMLCanvasElement | OffscreenCanvas | string | null;\n  /** If new canvas is created, it will be created in the specified container, otherwise appended to body */\n  container?: HTMLElement | string | null;\n  /** Width in pixels of the canvas */\n  width?: number;\n  /** Height in pixels of the canvas */\n  height?: number;\n  /** Whether to apply a device pixels scale factor (`true` uses browser DPI) */\n  useDevicePixels?: boolean | number;\n  /** Whether to track resizes (if not ) */\n  autoResize?: boolean;\n  /** Visibility (only used if new canvas is created). */\n  visible?: boolean;\n  /** WebGPU only https://www.w3.org/TR/webgpu/#canvas-configuration */\n  colorSpace?: 'srgb'; // GPUPredefinedColorSpace\n  /** WebGPU only https://www.w3.org/TR/webgpu/#canvas-configuration */\n  alphaMode?: 'opaque' | 'premultiplied';\n};\n\nconst DEFAULT_CANVAS_CONTEXT_PROPS: Required<CanvasContextProps> = {\n  canvas: null,\n  width: 800, // width are height are only used by headless gl\n  height: 600,\n  useDevicePixels: true,\n  autoResize: true,\n  container: null,\n  visible: true,\n  colorSpace: 'srgb',\n  alphaMode: 'opaque'\n};\n\n/**\n * Manages a canvas. Supports both HTML or offscreen canvas\n * - Creates a new canvas or looks up a canvas from the DOM\n * - Provides check for DOM loaded\n * @todo commit(): https://github.com/w3ctag/design-reviews/issues/288\n * @todo transferControlToOffscreen: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen\n */\nexport abstract class CanvasContext {\n  abstract readonly device: Device;\n  readonly id: string;\n  readonly props: Required<CanvasContextProps>;\n  readonly canvas: HTMLCanvasElement | OffscreenCanvas;\n  readonly htmlCanvas?: HTMLCanvasElement;\n  readonly offscreenCanvas?: OffscreenCanvas;\n  readonly type: 'html-canvas' | 'offscreen-canvas' | 'node';\n\n  width: number = 1;\n  height: number = 1;\n\n  readonly resizeObserver: ResizeObserver | undefined;\n\n  /** State used by luma.gl classes: TODO - move to canvasContext*/\n  readonly _canvasSizeInfo = {clientWidth: 0, clientHeight: 0, devicePixelRatio: 1};\n\n  /** Check if the DOM is loaded */\n  static get isPageLoaded(): boolean {\n    return isPageLoaded();\n  }\n\n  /**\n   * Get a 'lazy' promise that resolves when the DOM is loaded.\n   * @note Since there may be limitations on number of `load` event listeners,\n   * it is recommended avoid calling this function until actually needed.\n   * I.e. don't call it until you know that you will be looking up a string in the DOM.\n   */\n  static pageLoaded: Promise<void> = getPageLoadPromise();\n\n  constructor(props?: CanvasContextProps) {\n    this.props = {...DEFAULT_CANVAS_CONTEXT_PROPS, ...props};\n    props = this.props;\n\n    if (!isBrowser()) {\n      this.id = 'node-canvas-context';\n      this.type = 'node';\n      this.width = this.props.width;\n      this.height = this.props.height;\n      // TODO - does this prevent app from using jsdom style polyfills?\n      this.canvas = null!;\n      return;\n    }\n\n    if (!props.canvas) {\n      const canvas = createCanvas(props);\n      const container = getContainer(props?.container || null);\n      container.insertBefore(canvas, container.firstChild);\n\n      this.canvas = canvas;\n\n      if (!props?.visible) {\n        this.canvas.style.visibility = 'hidden';\n      }\n    } else if (typeof props.canvas === 'string') {\n      this.canvas = getCanvasFromDOM(props.canvas);\n    } else {\n      this.canvas = props.canvas;\n    }\n\n    if (this.canvas instanceof HTMLCanvasElement) {\n      this.id = this.canvas.id;\n      this.type = 'html-canvas';\n      this.htmlCanvas = this.canvas;\n    } else {\n      this.id = 'offscreen-canvas';\n      this.type = 'offscreen-canvas';\n      this.offscreenCanvas = this.canvas;\n    }\n\n    // React to size changes\n    if (this.canvas instanceof HTMLCanvasElement && props.autoResize) {\n      this.resizeObserver = new ResizeObserver((entries) => {\n        for (const entry of entries) {\n          if (entry.target === this.canvas) {\n            this.update();\n          }\n        }\n      });\n      this.resizeObserver.observe(this.canvas);\n    }\n  }\n\n  /** Returns a framebuffer with properly resized current 'swap chain' textures */\n  abstract getCurrentFramebuffer(): Framebuffer;\n\n  /**\n   * Returns the current DPR, if props.useDevicePixels is true\n   * Device refers to physical\n   */\n  getDevicePixelRatio(useDevicePixels?: boolean | number): number {\n    if (typeof OffscreenCanvas !== 'undefined' && this.canvas instanceof OffscreenCanvas) {\n      return 1;\n    }\n\n    useDevicePixels = useDevicePixels === undefined ? this.props.useDevicePixels : useDevicePixels;\n\n    if (!useDevicePixels || useDevicePixels as number <= 0) {\n      return 1;\n    }\n\n    // The param was mainly provide to support the test cases, could be removed\n    if (useDevicePixels === true) {\n      const dpr = typeof window !== 'undefined' && window.devicePixelRatio;\n      return dpr || 1;\n    }\n\n    return useDevicePixels;\n  }\n\n  /**\n   * Returns the size of drawing buffer in device pixels.\n   * @note This can be different from the 'CSS' size of a canvas, and also from the\n   * canvas' internal drawing buffer size (.width, .height).\n   * This is the size required to cover the canvas, adjusted for DPR\n   */\n  getPixelSize(): [number, number] {\n    switch (this.type) {\n      case 'node':\n        return [this.width, this.height];\n      case 'offscreen-canvas':\n        return [this.canvas.width, this.canvas.height];\n      case 'html-canvas':\n        const dpr = this.getDevicePixelRatio();\n        const canvas = this.canvas as HTMLCanvasElement;\n        // If not attached to DOM client size can be 0\n        return canvas.parentElement\n          ? [canvas.clientWidth * dpr, canvas.clientHeight * dpr]\n          : [this.canvas.width, this.canvas.height];\n      default:\n        throw new Error(this.type);\n    }\n  }\n\n  getAspect(): number {\n    const [width, height] = this.getPixelSize();\n    return width / height;\n  }\n\n  /**\n   * Returns multiplier need to convert CSS size to Device size\n   */\n  cssToDeviceRatio(): number {\n    try {\n      // For headless gl we might have used custom width and height\n      // hence use cached clientWidth\n      const [drawingBufferWidth] = this.getDrawingBufferSize();\n      const {clientWidth} = this._canvasSizeInfo;\n      return clientWidth ? drawingBufferWidth / clientWidth : 1;\n    } catch {\n      return 1;\n    }\n  }\n\n  /**\n   * Maps CSS pixel position to device pixel position\n   */\n  cssToDevicePixels(\n    cssPixel: number[],\n    yInvert: boolean = true\n  ): {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  } {\n    const ratio = this.cssToDeviceRatio();\n    const [width, height] = this.getDrawingBufferSize();\n    return scalePixels(cssPixel, ratio, width, height, yInvert);\n  }\n\n  /**\n   * Use devicePixelRatio to set canvas width and height\n   * @note this is a raw port of luma.gl v8 code. Might be worth a review\n   */\n  setDevicePixelRatio(\n    devicePixelRatio: number,\n    options: {width?: number; height?: number} = {}\n  ): void {\n    if (!this.htmlCanvas) {\n      return;\n    }\n\n    // NOTE: if options.width and options.height not used remove in v8\n    let clientWidth = 'width' in options ? options.width : this.htmlCanvas.clientWidth;\n    let clientHeight = 'height' in options ? options.height : this.htmlCanvas.clientHeight;\n\n    if (!clientWidth || !clientHeight) {\n      log.log(1, 'Canvas clientWidth/clientHeight is 0')();\n      // by forcing devicePixel ratio to 1, we do not scale canvas.width and height in each frame.\n      devicePixelRatio = 1;\n      clientWidth = this.htmlCanvas.width || 1;\n      clientHeight = this.htmlCanvas.height || 1;\n    }\n\n    const cachedSize = this._canvasSizeInfo;\n    // Check if canvas needs to be resized\n    if (\n      cachedSize.clientWidth !== clientWidth ||\n      cachedSize.clientHeight !== clientHeight ||\n      cachedSize.devicePixelRatio !== devicePixelRatio\n    ) {\n      let clampedPixelRatio = devicePixelRatio;\n\n      const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);\n      const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);\n      this.htmlCanvas.width = canvasWidth;\n      this.htmlCanvas.height = canvasHeight;\n\n      // Note: when devicePixelRatio is too high, it is possible we might hit system limit for\n      // drawing buffer width and hight, in those cases they get clamped and resulting aspect ration may not be maintained\n      // for those cases, reduce devicePixelRatio.\n      const [drawingBufferWidth, drawingBufferHeight] = this.getDrawingBufferSize();\n\n      if (drawingBufferWidth !== canvasWidth || drawingBufferHeight !== canvasHeight) {\n        clampedPixelRatio = Math.min(\n          drawingBufferWidth / clientWidth,\n          drawingBufferHeight / clientHeight\n        );\n\n        this.htmlCanvas.width = Math.floor(clientWidth * clampedPixelRatio);\n        this.htmlCanvas.height = Math.floor(clientHeight * clampedPixelRatio);\n\n        log.warn('Device pixel ratio clamped')();\n      }\n\n      this._canvasSizeInfo.clientWidth = clientWidth;\n      this._canvasSizeInfo.clientHeight = clientHeight;\n      this._canvasSizeInfo.devicePixelRatio = devicePixelRatio;\n    }\n  }\n\n  // PRIVATE\n\n  /** @todo Major hack done to port the CSS methods above, base canvas context should not depend on WebGL */\n  getDrawingBufferSize(): [number, number] {\n    // @ts-expect-error This only works for WebGL\n    const gl = this.device.gl;\n    if (!gl) {\n      // use default device pixel ratio\n      throw new Error('canvas size');\n    }\n    return [gl.drawingBufferWidth, gl.drawingBufferHeight];\n  }\n\n  abstract resize(options?: {\n    width?: number;\n    height?: number;\n    useDevicePixels?: boolean | number;\n  }): void;\n\n  /** Perform platform specific updates (WebGPU vs WebGL) */\n  protected abstract update(): void;\n\n  /**\n   * Allows subclass constructor to override the canvas id for auto created canvases.\n   * This can really help when debugging DOM in apps that create multiple devices\n   */\n  protected _setAutoCreatedCanvasId(id: string) {\n    if (this.htmlCanvas?.id === 'lumagl-auto-created-canvas') {\n      this.htmlCanvas.id = id;\n    }\n  }\n}\n\n// HELPER FUNCTIONS\n\n/** Returns a promise that resolves when the page is loaded */\nfunction getPageLoadPromise(): Promise<void> {\n  if (isPageLoaded() || typeof window === 'undefined') {\n    return Promise.resolve();\n  }\n  return new Promise((resolve) => {\n    window.addEventListener('load', () => resolve());\n  });\n}\n\nfunction getContainer(container: HTMLElement | string | null): HTMLElement {\n  if (typeof container === 'string') {\n    const element = document.getElementById(container);\n    if (!element && !isPageLoaded()) {\n      throw new Error(`Accessing '${container}' before page was loaded`);\n    }\n    if (!element) {\n      throw new Error(`${container} is not an HTML element`);\n    }\n    return element;\n  } else if (container) {\n    return container;\n  }\n  return document.body;\n}\n\n/** Get a Canvas element from DOM id */\nfunction getCanvasFromDOM(canvasId: string): HTMLCanvasElement {\n  const canvas = document.getElementById(canvasId);\n  if (!canvas && !isPageLoaded()) {\n    throw new Error(`Accessing '${canvasId}' before page was loaded`);\n  }\n  if (!(canvas instanceof HTMLCanvasElement)) {\n    throw new Error('Object is not a canvas element');\n  }\n  return canvas;\n}\n\n/** Create a new canvas */\nfunction createCanvas(props: CanvasContextProps) {\n  const {width, height} = props;\n  const targetCanvas = document.createElement('canvas');\n  targetCanvas.id = 'lumagl-auto-created-canvas';\n  targetCanvas.width = width || 1;\n  targetCanvas.height = height || 1;\n  targetCanvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';\n  targetCanvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';\n  return targetCanvas;\n}\n\n/**\n *\n * @param pixel\n * @param ratio\n * @param width\n * @param height\n * @param yInvert\n * @returns\n */\nfunction scalePixels(\n  pixel: number[],\n  ratio: number,\n  width: number,\n  height: number,\n  yInvert: boolean\n): {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n} {\n  const point = pixel as [number, number];\n  \n  const x = scaleX(point[0], ratio, width);\n  let y = scaleY(point[1], ratio, height, yInvert);\n\n  // Find boundaries of next pixel to provide valid range of device pixel locations\n\n  let t = scaleX(point[0] + 1, ratio, width);\n  // If next pixel's position is clamped to boundary, use it as is, otherwise subtract 1 for current pixel boundary\n  const xHigh = t === width - 1 ? t : t - 1;\n\n  t = scaleY(point[1] + 1, ratio, height, yInvert);\n  let yHigh;\n  if (yInvert) {\n    // If next pixel's position is clamped to boundary, use it as is, otherwise clamp it to valid range\n    t = t === 0 ? t : t + 1;\n    // swap y and yHigh\n    yHigh = y;\n    y = t;\n  } else {\n    // If next pixel's position is clamped to boundary, use it as is, otherwise clamp it to valid range\n    yHigh = t === height - 1 ? t : t - 1;\n    // y remains same\n  }\n  return {\n    x,\n    y,\n    // when ratio < 1, current css pixel and next css pixel may point to same device pixel, set width/height to 1 in those cases.\n    width: Math.max(xHigh - x + 1, 1),\n    height: Math.max(yHigh - y + 1, 1)\n  };\n}\n\nfunction scaleX(x: number, ratio: number, width: number): number {\n  // since we are rounding to nearest, when ratio > 1, edge pixels may point to out of bounds value, clamp to the limit\n  const r = Math.min(Math.round(x * ratio), width - 1);\n  return r;\n}\n\nfunction scaleY(y: number, ratio: number, height: number, yInvert: boolean): number {\n  // since we are rounding to nearest, when ratio > 1, edge pixels may point to out of bounds value, clamp to the limit\n  return yInvert\n    ? Math.max(0, height - 1 - Math.round(y * ratio))\n    : Math.min(Math.round(y * ratio), height - 1);\n}\n"],"mappings":"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"}