{"version":3,"file":"shader-types.js","names":[],"sources":["../../../src/adapter/types/shader-types.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\n/**\n * Primitive data types understood by shaders\n * @note These types describe the type used in shader calculations, but for attribute inputs these can be populated from a different in-memory type.\n * @note bindings (like textures, samplers, and uniform buffers) are considered \"bindings\", not types\n * @note `f16` requires the `f16` extension\n */\nexport type ShaderDataType = 'u32' | 'i32' | 'f32' | 'f16';\n\n/**\n * Describes the type of an attribute as defined in the shader source code.\n * @note Buffers with various `VertexFormat`s can be supplied for each type, and the GPU will convert them at runtime,\n * but there are limitations, see documentation for details.\n */\nexport type ShaderAttributeType =\n  | 'f32'\n  | 'vec2<f32>'\n  | 'vec3<f32>'\n  | 'vec4<f32>'\n  | 'i32'\n  | 'vec2<i32>'\n  | 'vec3<i32>'\n  | 'vec4<i32>'\n  | 'u32'\n  | 'vec2<u32>'\n  | 'vec3<u32>'\n  | 'vec4<u32>'\n  // requires `f16` extension\n  | 'f16'\n  | 'vec2<f16>'\n  | 'vec3<f16>'\n  | 'vec4<f16>';\n\n/**\n * Describes the type of a uniform as described in the shader source code.\n * Uniforms can be of a wider range of types than attributes.\n */\nexport type ShaderUniformType =\n  | 'f32'\n  | 'i32'\n  | 'u32'\n  | 'vec2<f32>'\n  | 'vec3<f32>'\n  | 'vec4<f32>'\n  | 'vec2<i32>'\n  | 'vec3<i32>'\n  | 'vec4<i32>'\n  | 'vec2<u32>'\n  | 'vec3<u32>'\n  | 'vec4<u32>'\n  | 'mat2x2<f32>'\n  | 'mat2x3<f32>'\n  | 'mat2x4<f32>'\n  | 'mat3x2<f32>'\n  | 'mat3x3<f32>'\n  | 'mat3x4<f32>'\n  | 'mat4x2<f32>'\n  | 'mat4x3<f32>'\n  | 'mat4x4<f32>';\n\n/** Shorthand type aliases recognized by WGSL */\nexport type ShaderTypeAlias =\n  | 'vec2i'\n  | 'vec3i'\n  | 'vec4i'\n  | 'vec2u'\n  | 'vec3u'\n  | 'vec4u'\n  | 'vec2f'\n  | 'vec3f'\n  | 'vec4f'\n  // Requires the f16 extension.\n  | 'vec2h'\n  | 'vec3h'\n  | 'vec4h';\n"],"mappings":""}