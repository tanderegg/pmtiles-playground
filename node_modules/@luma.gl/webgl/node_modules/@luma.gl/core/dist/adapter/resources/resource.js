import { uid } from "../../utils/utils.js";
export class Resource {
  constructor(device, props, defaultProps) {
    this.id = void 0;
    this.props = void 0;
    this.userData = {};
    this.device = void 0;
    this._device = void 0;
    this.destroyed = false;
    this.allocatedBytes = 0;
    this._attachedResources = new Set();
    if (!device) {
      throw new Error('no device');
    }
    this._device = device;
    this.props = selectivelyMerge(props, defaultProps);
    const id = this.props.id !== 'undefined' ? this.props.id : uid(this[Symbol.toStringTag]);
    this.props.id = id;
    this.id = id;
    this.userData = this.props.userData || {};
    this.addStats();
  }
  destroy() {
    this.destroyResource();
  }
  delete() {
    this.destroy();
    return this;
  }
  toString() {
    return `${this[Symbol.toStringTag] || this.constructor.name}(${this.id})`;
  }
  getProps() {
    return this.props;
  }
  attachResource(resource) {
    this._attachedResources.add(resource);
  }
  detachResource(resource) {
    this._attachedResources.delete(resource);
  }
  destroyAttachedResource(resource) {
    if (this._attachedResources.delete(resource)) {
      resource.destroy();
    }
  }
  destroyAttachedResources() {
    for (const resource of Object.values(this._attachedResources)) {
      resource.destroy();
    }
    this._attachedResources = new Set();
  }
  destroyResource() {
    this.destroyAttachedResources();
    this.removeStats();
    this.destroyed = true;
  }
  removeStats() {
    const stats = this._device.statsManager.getStats('Resource Counts');
    const name = this[Symbol.toStringTag];
    stats.get(`${name}s Active`).decrementCount();
  }
  trackAllocatedMemory(bytes) {
    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this[Symbol.toStringTag];
    const stats = this._device.statsManager.getStats('Resource Counts');
    stats.get('GPU Memory').addCount(bytes);
    stats.get(`${name} Memory`).addCount(bytes);
    this.allocatedBytes = bytes;
  }
  trackDeallocatedMemory() {
    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this[Symbol.toStringTag];
    const stats = this._device.statsManager.getStats('Resource Counts');
    stats.get('GPU Memory').subtractCount(this.allocatedBytes);
    stats.get(`${name} Memory`).subtractCount(this.allocatedBytes);
    this.allocatedBytes = 0;
  }
  addStats() {
    const stats = this._device.statsManager.getStats('Resource Counts');
    const name = this[Symbol.toStringTag];
    stats.get('Resources Created').incrementCount();
    stats.get(`${name}s Created`).incrementCount();
    stats.get(`${name}s Active`).incrementCount();
  }
}
Resource.defaultProps = {
  id: 'undefined',
  handle: undefined,
  userData: undefined
};
function selectivelyMerge(props, defaultProps) {
  const mergedProps = {
    ...defaultProps
  };
  for (const key in props) {
    if (props[key] !== undefined) {
      mergedProps[key] = props[key];
    }
  }
  return mergedProps;
}
//# sourceMappingURL=resource.js.map