let _Symbol$toStringTag;
import { Resource } from "./resource.js";
import { Texture } from "./texture.js";
import { log } from "../../utils/log.js";
_Symbol$toStringTag = Symbol.toStringTag;
export class Framebuffer extends Resource {
  get [_Symbol$toStringTag]() {
    return 'Framebuffer';
  }
  constructor(device) {
    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super(device, props, Framebuffer.defaultProps);
    this.width = void 0;
    this.height = void 0;
    this.colorAttachments = [];
    this.depthStencilAttachment = null;
    this.width = this.props.width;
    this.height = this.props.height;
  }
  resize(size) {
    let updateSize = !size;
    if (size) {
      const [width, height] = Array.isArray(size) ? size : [size.width, size.height];
      updateSize = updateSize || height !== this.height || width !== this.width;
      this.width = width;
      this.height = height;
    }
    if (updateSize) {
      log.log(2, `Resizing framebuffer ${this.id} to ${this.width}x${this.height}`)();
      this.resizeAttachments(this.width, this.height);
    }
  }
  autoCreateAttachmentTextures() {
    this.colorAttachments = this.props.colorAttachments.map(attachment => {
      if (typeof attachment === 'string') {
        const texture = this.createColorTexture(attachment);
        this.attachResource(texture);
        return texture;
      }
      return attachment;
    });
    if (this.props.depthStencilAttachment) {
      if (typeof this.props.depthStencilAttachment === 'string') {
        const texture = this.createDepthStencilTexture(this.props.depthStencilAttachment);
        this.attachResource(texture);
        this.depthStencilAttachment = texture;
      } else {
        this.depthStencilAttachment = this.props.depthStencilAttachment;
      }
    }
  }
  createColorTexture(format) {
    return this.device.createTexture({
      id: 'color-attachment',
      usage: Texture.RENDER_ATTACHMENT,
      format,
      width: this.width,
      height: this.height
    });
  }
  createDepthStencilTexture(format) {
    return this.device.createTexture({
      id: 'depth-stencil-attachment',
      usage: Texture.RENDER_ATTACHMENT,
      format,
      width: this.width,
      height: this.height
    });
  }
  resizeAttachments(width, height) {
    for (let i = 0; i < this.colorAttachments.length; ++i) {
      if (this.colorAttachments[i]) {
        const resizedTexture = this.device._createTexture({
          ...this.colorAttachments[i].props,
          width,
          height
        });
        this.destroyAttachedResource(this.colorAttachments[i]);
        this.colorAttachments[i] = resizedTexture;
        this.attachResource(resizedTexture);
      }
    }
    if (this.depthStencilAttachment) {
      const resizedTexture = this.device._createTexture({
        ...this.depthStencilAttachment.props,
        width,
        height
      });
      this.destroyAttachedResource(this.depthStencilAttachment);
      this.depthStencilAttachment = resizedTexture;
      this.attachResource(resizedTexture);
    }
  }
}
Framebuffer.defaultProps = {
  ...Resource.defaultProps,
  width: 1,
  height: 1,
  colorAttachments: [],
  depthStencilAttachment: null
};
//# sourceMappingURL=framebuffer.js.map