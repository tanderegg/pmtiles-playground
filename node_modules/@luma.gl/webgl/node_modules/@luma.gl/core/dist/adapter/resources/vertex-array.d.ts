import type { TypedArray } from '../../types';
import { AttributeInfo } from '../attribute-utils/get-attribute-from-layouts';
import type { Device } from '../device';
import type { Buffer } from './buffer';
import type { RenderPass } from './render-pass';
import type { RenderPipeline } from './render-pipeline';
import { Resource, ResourceProps } from './resource';
/** Properties for initializing a VertexArray */
export type VertexArrayProps = ResourceProps & {
    renderPipeline: RenderPipeline | null;
};
/**
 * Stores attribute bindings.
 * Makes it easy to share a render pipeline and use separate vertex arrays.
 * @note On WebGL, VertexArray allows non-constant bindings to be performed in advance
 * reducing the number of WebGL calls per draw call.
 * @note On WebGPU this is just a convenience class that collects the bindings.
 */
export declare abstract class VertexArray extends Resource<VertexArrayProps> {
    static defaultProps: Required<VertexArrayProps>;
    get [Symbol.toStringTag](): string;
    /** Max number of vertex attributes */
    readonly maxVertexAttributes: number;
    /** Attribute infos indexed by location - TODO only needed by webgl module? */
    protected readonly attributeInfos: AttributeInfo[];
    /** Index buffer */
    indexBuffer: Buffer | null;
    /** Attributes indexed by buffer slot */
    attributes: (Buffer | TypedArray | null)[];
    constructor(device: Device, props: VertexArrayProps);
    /** Set attributes (stored on pipeline and set before each call) */
    abstract setIndexBuffer(indices: Buffer | null): void;
    /** Set attributes (stored on pipeline and set before each call) */
    abstract setBuffer(bufferSlot: number, buffer: Buffer | null): void;
    /** Set constant attributes (WebGL only) */
    abstract setConstant(location: number, value: TypedArray | null): void;
    abstract bindBeforeRender(renderPass: RenderPass): void;
    abstract unbindAfterRender(renderPass: RenderPass): void;
}
//# sourceMappingURL=vertex-array.d.ts.map