{"version":3,"file":"vertex-formats.js","names":[],"sources":["../../../src/adapter/types/vertex-formats.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\n/** Basic data types signed and unsigned integers, and floats, of varying sizes */\nexport type DataType =\n  | 'uint8'\n  | 'sint8'\n  | 'uint16'\n  | 'sint16'\n  | 'uint32'\n  | 'sint32'\n  | 'float16'\n  | 'float32';\n\n/** Vertex and Pixel data types. Include normalized integers */\nexport type NormalizedDataType =\n  | 'uint8'\n  | 'sint8'\n  | 'unorm8'\n  | 'snorm8'\n  | 'uint16'\n  | 'sint16'\n  | 'unorm16'\n  | 'snorm16'\n  | 'uint32'\n  | 'sint32'\n  // WebGPU does not support normalized 32 bit integer attributes...\n  // | 'unorm32'\n  // | 'snorm32'\n  | 'float32'\n  | 'float16'\n  ;\n\n/** Describes the type (without number of components) of a vertex format */\nexport type VertexType = NormalizedDataType;\n\n/**\n * Describes the memory format of a buffer that will be supplied to vertex attributes\n * @note Must be compatible with the ShaderAttributeType of the shaders, see documentation.\n * @note This is a superset of WebGPU vertex formats to allow foe some flexibility for WebGL only applications\n * @todo Add device.isTextureFormatSupported() method?\n */\nexport type VertexFormat =\n  // 8 bit integers, note that only 16 bit aligned formats are supported in WebGPU (x2 and x4)\n  | 'uint8x2'\n  | 'uint8x4'\n  | 'sint8x2'\n  | 'sint8x4'\n  | 'unorm8-webgl'\n  | 'unorm8x2'\n  | 'unorm8x3-webgl'\n  | 'unorm8x4'\n  | 'snorm8-webgl'\n  | 'snorm8x2'\n  | 'snorm8x3-webgl'\n  | 'snorm8x4'\n  // 16 bit integers, note that only 32 bit aligned formats are supported in WebGPU (x2 and x4)\n  | 'uint16x2'\n  | 'uint16x4'\n  | 'sint16x2'\n  | 'sint16x4'\n  | 'unorm16x2'\n  | 'unorm16x4'\n  | 'snorm16x2'\n  | 'snorm16x4'\n  // 32 bit integers\n  | 'uint32'\n  | 'uint32x2'\n  | 'uint32x3'\n  | 'uint32x4'\n  | 'sint32'\n  | 'sint32x2'\n  | 'sint32x3'\n  | 'sint32x4'\n  // No normalized 32 bit integers in WebGPU...\n  // | 'unorm32'\n  // | 'unorm32x2'\n  // | 'unorm32x3'\n  // | 'unorm32x4'\n  // | 'snorm32'\n  // | 'snorm32x2'\n  // | 'snorm32x3'\n  // | 'snorm32x4'\n  // floats\n  | 'float16x2'\n  | 'float16x4'\n  | 'float32'\n  | 'float32x2'\n  | 'float32x3'\n  | 'float32x4'\n  ;\n"],"mappings":""}