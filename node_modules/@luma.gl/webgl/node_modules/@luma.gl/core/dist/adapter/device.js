let _Symbol$toStringTag;
import { VERSION } from "../init.js";
import { lumaStats } from "../utils/stats-manager.js";
import { log } from "../utils/log.js";
import { uid } from "../utils/utils.js";
import { Buffer } from "./resources/buffer.js";
_Symbol$toStringTag = Symbol.toStringTag;
export class Device {
  get [_Symbol$toStringTag]() {
    return 'Device';
  }
  constructor(props) {
    this.id = void 0;
    this.statsManager = lumaStats;
    this.props = void 0;
    this.userData = {};
    this._lumaData = {};
    this.info = void 0;
    this.lost = void 0;
    this.canvasContext = void 0;
    this.props = {
      ...Device.defaultProps,
      ...props
    };
    this.id = this.props.id || uid(this[Symbol.toStringTag].toLowerCase());
  }
  loseDevice() {
    return false;
  }
  getCanvasContext() {
    if (!this.canvasContext) {
      throw new Error('Device has no CanvasContext');
    }
    return this.canvasContext;
  }
  createTexture(props) {
    if (props instanceof Promise || typeof props === 'string') {
      props = {
        data: props
      };
    }
    return this._createTexture(props);
  }
  createCommandEncoder() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    throw new Error('not implemented');
  }
  readPixelsToArrayWebGL(source, options) {
    throw new Error('not implemented');
  }
  readPixelsToBufferWebGL(source, options) {
    throw new Error('not implemented');
  }
  setParametersWebGL(parameters) {
    throw new Error('not implemented');
  }
  getParametersWebGL(parameters) {
    throw new Error('not implemented');
  }
  withParametersWebGL(parameters, func) {
    throw new Error('not implemented');
  }
  clearWebGL(options) {
    throw new Error('not implemented');
  }
  _getBufferProps(props) {
    if (props instanceof ArrayBuffer || ArrayBuffer.isView(props)) {
      props = {
        data: props
      };
    }
    const newProps = {
      ...props
    };
    if ((props.usage || 0) & Buffer.INDEX && !props.indexType) {
      if (props.data instanceof Uint32Array) {
        newProps.indexType = 'uint32';
      } else if (props.data instanceof Uint16Array) {
        newProps.indexType = 'uint16';
      } else {
        log.warn('indices buffer content must be of integer type')();
      }
    }
    return newProps;
  }
}
Device.defaultProps = {
  id: null,
  type: 'best-available',
  canvas: null,
  container: null,
  webgl2: true,
  webgl1: true,
  manageState: true,
  width: 800,
  height: 600,
  debug: Boolean(log.get('debug')),
  break: [],
  gl: null
};
Device.VERSION = VERSION;
//# sourceMappingURL=device.js.map