{"version":3,"file":"format-compiler-log.js","names":["formatCompilerLog","shaderLog","source","options","formattedLog","lines","split","log","slice","sort","a","b","lineNum","showSourceCode","currentMessage","length","getNumberedLine","message","formatCompilerMessage","inlineSource","numberedLines","getNumberedLines","positionIndicator","linePos","repeat","type","toUpperCase","html","lineIndex","sourceLine","undefined","line","escapedLine","escapeHTML","padLeft","String","string","paddedLength","result","i","unsafe","replaceAll"],"sources":["../../../src/lib/compiler-log/format-compiler-log.ts"],"sourcesContent":["// luma.gl, MIT license\nimport type {CompilerMessage} from './compiler-message';\n\n/** @returns annotated errors or warnings */\nexport function formatCompilerLog(\n  shaderLog: readonly CompilerMessage[],\n  source: string,\n  options?: {\n    /** Include source code in the log. Either just the lines before issues or all source code */\n    showSourceCode?: 'no' | 'issues' | 'all';\n    html?: boolean;\n  }\n): string {\n  let formattedLog = '';\n  const lines = source.split(/\\r?\\n/);\n  const log = shaderLog.slice().sort((a, b) => a.lineNum - b.lineNum);\n\n  switch (options?.showSourceCode || 'no') {\n    case 'all':\n      // Parse the error - note: browser and driver dependent\n      let currentMessage = 0;\n      for (let lineNum = 1; lineNum <= lines.length; lineNum++) {\n        formattedLog += getNumberedLine(lines[lineNum - 1], lineNum, options);\n        while (log.length > currentMessage && log[currentMessage].lineNum === lineNum) {\n          const message = log[currentMessage++];\n          formattedLog += formatCompilerMessage(message, lines, message.lineNum, {\n            ...options,\n            inlineSource: false\n          });\n        }\n      }\n      return formattedLog;\n\n    case 'issues':\n    case 'no':\n      // Parse the error - note: browser and driver dependent\n      for (const message of shaderLog) {\n        formattedLog += formatCompilerMessage(message, lines, message.lineNum, {\n          inlineSource: options?.showSourceCode !== 'no'\n        });\n      }\n      return formattedLog;\n  }\n}\n\n// Helpers\n\n/** Format one message */\nfunction formatCompilerMessage(\n  message: CompilerMessage,\n  lines: readonly string[],\n  lineNum: number,\n  options: {\n    inlineSource?: boolean;\n    html?: boolean;\n  }\n): string {\n  if (options?.inlineSource) {\n    const numberedLines = getNumberedLines(lines, lineNum);\n    // If we got error position on line add a `^^^` indicator on next line\n    const positionIndicator = message.linePos > 0 ? `${' '.repeat(message.linePos + 5)}^^^\\n` : '';\n    return `\n${numberedLines}${positionIndicator}${message.type.toUpperCase()}: ${message.message}\n\n`;\n  }\n  return options?.html\n    ? `<div class='luma-compiler-log-error' style=\"color:red;\"><b> ${message.type.toUpperCase()}: ${message.message}</b></div>`\n    : `${message.type.toUpperCase()}: ${message.message}`;\n}\n\nfunction getNumberedLines(\n  lines: readonly string[],\n  lineNum: number,\n  options?: {html?: boolean}\n): string {\n  let numberedLines = '';\n  for (let lineIndex = lineNum - 2; lineIndex <= lineNum; lineIndex++) {\n    const sourceLine = lines[lineIndex - 1];\n    if (sourceLine !== undefined) {\n      numberedLines += getNumberedLine(sourceLine, lineNum, options);\n    }\n  }\n  return numberedLines;\n}\n\nfunction getNumberedLine(line: string, lineNum: number, options?: {html?: boolean}): string {\n  const escapedLine = options?.html ? escapeHTML(line) : line;\n  return `${padLeft(String(lineNum), 4)}: ${escapedLine}${options?.html ? '<br/>' : '\\n'}`;\n}\n\n/**\n * Pads a string with a number of spaces (space characters) to the left\n * @param {String} string - string to pad\n * @param {Number} digits - number of spaces to add\n * @return {String} string - The padded string\n */\nfunction padLeft(string: string, paddedLength: number): string {\n  let result = '';\n  for (let i = string.length; i < paddedLength; ++i) {\n    result += ' ';\n  }\n  return result + string;\n}\n\nfunction escapeHTML(unsafe: string): string {\n  return unsafe\n    .replaceAll('&', '&amp;')\n    .replaceAll('<', '&lt;')\n    .replaceAll('>', '&gt;')\n    .replaceAll('\"', '&quot;')\n    .replaceAll('\\'', '&#039;');\n}\n"],"mappings":"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"}