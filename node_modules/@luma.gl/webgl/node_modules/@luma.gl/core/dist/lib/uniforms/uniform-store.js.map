{"version":3,"file":"uniform-store.js","names":["Buffer","UniformBlock","UniformBufferLayout","log","UniformStore","constructor","blocks","uniformBlocks","Map","uniformBufferLayouts","uniformBuffers","bufferName","block","Object","entries","uniformBufferName","uniformBufferLayout","uniformTypes","set","uniformBlock","name","setUniforms","defaultUniforms","destroy","uniformBuffer","values","uniforms","blockName","uniformValues","get","updateUniformBuffers","getUniformBufferByteLength","byteLength","getUniformBufferData","getAllUniforms","getData","createUniformBuffer","device","createBuffer","usage","UNIFORM","COPY_DST","uniformBufferData","write","getManagedUniformBuffer","reason","keys","bufferReason","updateUniformBuffer","needsRedraw","String"],"sources":["../../../src/lib/uniforms/uniform-store.ts"],"sourcesContent":["// luma.gl, MIT license\nimport type {ShaderUniformType} from '../../adapter/types/shader-types';\nimport type {UniformValue} from '../../adapter/types/types';\nimport type {Device} from '../../adapter/device';\nimport {Buffer} from '../../adapter/resources/buffer';\nimport {UniformBlock} from './uniform-block';\nimport {UniformBufferLayout} from './uniform-buffer-layout';\nimport {log} from '../../utils/log';\n\nexport type ShaderModuleInputs = {\n  uniformTypes?: Record<string, ShaderUniformType>;\n  defaultProps?: Record<string, unknown>;\n  defaultUniforms?: Record<string, UniformValue>;\n};\n\n/**\n * A uniform store holds a uniform values for one or more uniform blocks,\n * - It can generate binary data for any uniform buffer\n * - It can manage a uniform buffer for each block\n * - It can update managed uniform buffers with a single call\n * - It performs some book keeping on what has changed to minimize unnecessary writes to uniform buffers.\n */\nexport class UniformStore<\n  TPropGroups extends Record<string, Record<string, unknown>> = Record<\n    string,\n    Record<string, unknown>\n  >\n> {\n  /** Stores the uniform values for each uniform block */\n  uniformBlocks = new Map<keyof TPropGroups, UniformBlock>();\n  /** Can generate data for a uniform buffer for each block from data */\n  uniformBufferLayouts = new Map<keyof TPropGroups, UniformBufferLayout>();\n  /** Actual buffer for the blocks */\n  uniformBuffers = new Map<keyof TPropGroups, Buffer>();\n\n  /**\n   * Create a new UniformStore instance\n   * @param blocks\n   */\n  constructor(\n    blocks: Record<\n      keyof TPropGroups,\n      {\n        uniformTypes?: Record<string, ShaderUniformType>;\n        defaultProps?: Record<string, unknown>;\n        defaultUniforms?: Record<string, UniformValue>;\n      }\n    >\n  ) {\n    for (const [bufferName, block] of Object.entries(blocks)) {\n      const uniformBufferName = bufferName as keyof TPropGroups;\n\n      // Create a layout object to help us generate correctly formatted binary uniform buffers\n      const uniformBufferLayout = new UniformBufferLayout(block.uniformTypes || {});\n      this.uniformBufferLayouts.set(uniformBufferName, uniformBufferLayout);\n\n      // Create a Uniform block to store the uniforms for each buffer.\n      const uniformBlock = new UniformBlock({name: bufferName});\n      uniformBlock.setUniforms(block.defaultUniforms || {});\n      this.uniformBlocks.set(uniformBufferName, uniformBlock);\n    }\n  }\n\n  /** Destroy any managed uniform buffers */\n  destroy(): void {\n    for (const uniformBuffer of Object.values(this.uniformBuffers)) {\n      uniformBuffer.destroy();\n    }\n  }\n\n  /**\n   * Set uniforms\n   * Makes all properties partial\n   */\n  setUniforms(\n    uniforms: Partial<{[group in keyof TPropGroups]: Partial<TPropGroups[group]>}>\n  ): void {\n    for (const [blockName, uniformValues] of Object.entries(uniforms)) {\n      this.uniformBlocks.get(blockName).setUniforms(uniformValues);\n      // We leverage logging in updateUniformBuffers(), even though slightly less efficient\n      // this.updateUniformBuffer(blockName);\n    }\n\n    this.updateUniformBuffers();\n  }\n\n  /** Get the required minimum length of the uniform buffer */\n  getUniformBufferByteLength(uniformBufferName: keyof TPropGroups): number {\n    return this.uniformBufferLayouts.get(uniformBufferName).byteLength;\n  }\n\n  /** Get formatted binary memory that can be uploaded to a buffer */\n  getUniformBufferData(uniformBufferName: keyof TPropGroups): Uint8Array {\n    const uniformValues = this.uniformBlocks.get(uniformBufferName).getAllUniforms();\n    return this.uniformBufferLayouts.get(uniformBufferName).getData(uniformValues);\n  }\n\n  /**\n   * Creates an unmanaged uniform buffer (umnanaged means that application is responsible for destroying it)\n   * The new buffer is initialized with current / supplied values\n   */\n  createUniformBuffer(\n    device: Device,\n    uniformBufferName: keyof TPropGroups,\n    uniforms?: Partial<{[group in keyof TPropGroups]: Partial<TPropGroups[group]>}>\n  ): Buffer {\n    if (uniforms) {\n      this.setUniforms(uniforms);\n    }\n    const byteLength = this.getUniformBufferByteLength(uniformBufferName);\n    const uniformBuffer = device.createBuffer({\n      usage: Buffer.UNIFORM | Buffer.COPY_DST,\n      byteLength\n    });\n    // Note that this clears the needs redraw flag\n    const uniformBufferData = this.getUniformBufferData(uniformBufferName);\n    uniformBuffer.write(uniformBufferData);\n    return uniformBuffer;\n  }\n\n  /** Get the managed uniform buffer. \"managed\" resources are destroyed when the uniformStore is destroyed. */\n  getManagedUniformBuffer(device: Device, uniformBufferName: keyof TPropGroups): Buffer {\n    if (!this.uniformBuffers.get(uniformBufferName)) {\n      const byteLength = this.getUniformBufferByteLength(uniformBufferName);\n      const uniformBuffer = device.createBuffer({\n        usage: Buffer.UNIFORM | Buffer.COPY_DST,\n        byteLength\n      });\n      this.uniformBuffers.set(uniformBufferName, uniformBuffer);\n    }\n    // this.updateUniformBuffers();\n    return this.uniformBuffers.get(uniformBufferName);\n  }\n\n  /** Updates all uniform buffers where values have changed */\n  updateUniformBuffers(): false | string {\n    let reason: false | string = false;\n    for (const uniformBufferName of this.uniformBlocks.keys()) {\n      const bufferReason = this.updateUniformBuffer(uniformBufferName);\n      reason ||= bufferReason;\n    }\n    if (reason) {\n      log.log(3, `UniformStore.updateUniformBuffers(): ${reason}`)();\n    }\n    return reason;\n  }\n\n  /** Update one uniform buffer. Only updates if values have changed */\n  updateUniformBuffer(uniformBufferName: keyof TPropGroups): false | string {\n    const uniformBlock = this.uniformBlocks.get(uniformBufferName);\n    const uniformBuffer = this.uniformBuffers.get(uniformBufferName);\n\n    let reason: false | string = false;\n    if (uniformBuffer && uniformBlock.needsRedraw) {\n      reason ||= uniformBlock.needsRedraw;\n      // This clears the needs redraw flag\n      const uniformBufferData = this.getUniformBufferData(uniformBufferName);\n\n      const uniformBuffer = this.uniformBuffers.get(uniformBufferName);\n      uniformBuffer.write(uniformBufferData);\n\n      // logging - TODO - don't query the values unnecessarily\n      const uniformValues = this.uniformBlocks.get(uniformBufferName).getAllUniforms();\n      log.log(\n        4,\n        `Writing to uniform buffer ${String(uniformBufferName)}`,\n        uniformBufferData,\n        uniformValues\n      )();\n    }\n    return reason;\n  }\n}\n"],"mappings":"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"}