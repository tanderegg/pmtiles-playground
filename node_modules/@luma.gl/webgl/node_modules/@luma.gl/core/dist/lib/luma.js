import { Device } from "../adapter/device.js";
import { lumaStats } from "../utils/stats-manager.js";
import { log } from "../utils/log.js";
import { assert } from "../utils/assert.js";
const deviceList = new Map();
export class luma {
  static registerDevices(deviceClasses) {
    for (const deviceClass of deviceClasses) {
      assert(deviceClass.type && deviceClass.isSupported && deviceClass.create);
      deviceList.set(deviceClass.type, deviceClass);
    }
  }
  static getAvailableDevices() {
    return Array.from(deviceList).map(Device => Device.type);
  }
  static getSupportedDevices() {
    return Array.from(deviceList).filter(Device => Device.isSupported()).map(Device => Device.type);
  }
  static setDefaultDeviceProps(props) {
    Object.assign(Device.defaultProps, props);
  }
  static async createDevice() {
    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    props = {
      ...Device.defaultProps,
      ...props
    };
    if (props.gl) {
      props.type = 'webgl';
    }
    let DeviceClass;
    switch (props.type) {
      case 'webgpu':
        DeviceClass = deviceList.get('webgpu');
        if (DeviceClass) {
          return await DeviceClass.create(props);
        }
        break;
      case 'webgl':
      case 'webgl1':
      case 'webgl2':
        DeviceClass = deviceList.get('webgl');
        if (DeviceClass) {
          return await DeviceClass.create(props);
        }
        break;
      case 'best-available':
        DeviceClass = deviceList.get('webgpu');
        if (DeviceClass && DeviceClass.isSupported()) {
          return await DeviceClass.create(props);
        }
        DeviceClass = deviceList.get('webgl');
        if (DeviceClass && DeviceClass.isSupported()) {
          return await DeviceClass.create(props);
        }
        break;
    }
    throw new Error('No matching device found. Ensure `@luma.gl/webgl` and/or `@luma.gl/webgpu` modules are imported.');
  }
}
luma.stats = lumaStats;
luma.log = log;
//# sourceMappingURL=luma.js.map