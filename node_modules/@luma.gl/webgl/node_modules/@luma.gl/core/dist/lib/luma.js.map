{"version":3,"file":"luma.js","names":["Device","lumaStats","log","assert","deviceList","Map","luma","registerDevices","deviceClasses","deviceClass","type","isSupported","create","set","getAvailableDevices","Array","from","map","getSupportedDevices","filter","setDefaultDeviceProps","props","Object","assign","defaultProps","createDevice","arguments","length","undefined","gl","DeviceClass","get","Error","stats"],"sources":["../../src/lib/luma.ts"],"sourcesContent":["// luma.gl, MIT license\n// Copyright (c) vis.gl contributors\n\nimport type {Log} from '@probe.gl/log';\nimport type {DeviceProps} from '../adapter/device';\nimport {Device} from '../adapter/device';\nimport {StatsManager} from '../utils/stats-manager';\nimport {lumaStats} from '../utils/stats-manager';\nimport {log} from '../utils/log';\nimport {assert} from '../utils/assert';\n\n\nconst deviceList = new Map<string, typeof Device>();\n\n/**\n * Entry point to the luma.gl GPU abstraction\n * Register WebGPU and/or WebGL devices (controls application bundle size)\n * Run-time selection of the first available Device\n */\nexport class luma {\n  /** Global stats for all devices */\n  static stats: StatsManager = lumaStats;\n\n  /** Global log */\n  static log: Log = log;\n\n  static registerDevices(deviceClasses: any[] /* : typeof Device */): void {\n    for (const deviceClass of deviceClasses) {\n      assert(deviceClass.type && deviceClass.isSupported && deviceClass.create);\n      deviceList.set(deviceClass.type, deviceClass);\n    }\n  }\n\n  static getAvailableDevices(): string[] {\n    // @ts-expect-error\n    return Array.from(deviceList).map(Device => Device.type);\n  }\n\n  static getSupportedDevices(): string[] {\n    // @ts-expect-error\n    return Array.from(deviceList).filter(Device => Device.isSupported()).map(Device => Device.type);\n  }\n\n  static setDefaultDeviceProps(props: DeviceProps): void {\n    Object.assign(Device.defaultProps, props);\n  }\n\n  /** Creates a device. Asynchronously. */\n  static async createDevice(props: DeviceProps = {}): Promise<Device> {\n    props = {...Device.defaultProps, ...props}\n    if (props.gl) {\n      props.type = 'webgl';\n    }\n\n    let DeviceClass: any;\n    switch (props.type) {\n      case 'webgpu':\n        DeviceClass = deviceList.get('webgpu');\n        if (DeviceClass) {\n          return await DeviceClass.create(props);\n        }\n        break;\n      case 'webgl':\n      case 'webgl1':\n      case 'webgl2':\n        DeviceClass = deviceList.get('webgl');\n        if (DeviceClass) {\n          return await DeviceClass.create(props);\n        }\n        break;\n      case 'best-available':\n        DeviceClass = deviceList.get('webgpu');\n        if (DeviceClass && DeviceClass.isSupported()) {\n          return await DeviceClass.create(props);\n        }\n        DeviceClass = deviceList.get('webgl');\n        if (DeviceClass && DeviceClass.isSupported()) {\n          return await DeviceClass.create(props);\n        }\n        break;\n    }\n    throw new Error('No matching device found. Ensure `@luma.gl/webgl` and/or `@luma.gl/webgpu` modules are imported.');\n  }\n}\n"],"mappings":"SAKQA,MAAM;AAAA,SAENC,SAAS;AAAA,SACTC,GAAG;AAAA,SACHC,MAAM;AAGd,MAAMC,UAAU,GAAG,IAAIC,GAAG,CAAwB,CAAC;AAOnD,OAAO,MAAMC,IAAI,CAAC;EAOhB,OAAOC,eAAeA,CAACC,aAAoB,EAA8B;IACvE,KAAK,MAAMC,WAAW,IAAID,aAAa,EAAE;MACvCL,MAAM,CAACM,WAAW,CAACC,IAAI,IAAID,WAAW,CAACE,WAAW,IAAIF,WAAW,CAACG,MAAM,CAAC;MACzER,UAAU,CAACS,GAAG,CAACJ,WAAW,CAACC,IAAI,EAAED,WAAW,CAAC;IAC/C;EACF;EAEA,OAAOK,mBAAmBA,CAAA,EAAa;IAErC,OAAOC,KAAK,CAACC,IAAI,CAACZ,UAAU,CAAC,CAACa,GAAG,CAACjB,MAAM,IAAIA,MAAM,CAACU,IAAI,CAAC;EAC1D;EAEA,OAAOQ,mBAAmBA,CAAA,EAAa;IAErC,OAAOH,KAAK,CAACC,IAAI,CAACZ,UAAU,CAAC,CAACe,MAAM,CAACnB,MAAM,IAAIA,MAAM,CAACW,WAAW,CAAC,CAAC,CAAC,CAACM,GAAG,CAACjB,MAAM,IAAIA,MAAM,CAACU,IAAI,CAAC;EACjG;EAEA,OAAOU,qBAAqBA,CAACC,KAAkB,EAAQ;IACrDC,MAAM,CAACC,MAAM,CAACvB,MAAM,CAACwB,YAAY,EAAEH,KAAK,CAAC;EAC3C;EAGA,aAAaI,YAAYA,CAAA,EAA2C;IAAA,IAA1CJ,KAAkB,GAAAK,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAC/CL,KAAK,GAAG;MAAC,GAAGrB,MAAM,CAACwB,YAAY;MAAE,GAAGH;IAAK,CAAC;IAC1C,IAAIA,KAAK,CAACQ,EAAE,EAAE;MACZR,KAAK,CAACX,IAAI,GAAG,OAAO;IACtB;IAEA,IAAIoB,WAAgB;IACpB,QAAQT,KAAK,CAACX,IAAI;MAChB,KAAK,QAAQ;QACXoB,WAAW,GAAG1B,UAAU,CAAC2B,GAAG,CAAC,QAAQ,CAAC;QACtC,IAAID,WAAW,EAAE;UACf,OAAO,MAAMA,WAAW,CAAClB,MAAM,CAACS,KAAK,CAAC;QACxC;QACA;MACF,KAAK,OAAO;MACZ,KAAK,QAAQ;MACb,KAAK,QAAQ;QACXS,WAAW,GAAG1B,UAAU,CAAC2B,GAAG,CAAC,OAAO,CAAC;QACrC,IAAID,WAAW,EAAE;UACf,OAAO,MAAMA,WAAW,CAAClB,MAAM,CAACS,KAAK,CAAC;QACxC;QACA;MACF,KAAK,gBAAgB;QACnBS,WAAW,GAAG1B,UAAU,CAAC2B,GAAG,CAAC,QAAQ,CAAC;QACtC,IAAID,WAAW,IAAIA,WAAW,CAACnB,WAAW,CAAC,CAAC,EAAE;UAC5C,OAAO,MAAMmB,WAAW,CAAClB,MAAM,CAACS,KAAK,CAAC;QACxC;QACAS,WAAW,GAAG1B,UAAU,CAAC2B,GAAG,CAAC,OAAO,CAAC;QACrC,IAAID,WAAW,IAAIA,WAAW,CAACnB,WAAW,CAAC,CAAC,EAAE;UAC5C,OAAO,MAAMmB,WAAW,CAAClB,MAAM,CAACS,KAAK,CAAC;QACxC;QACA;IACJ;IACA,MAAM,IAAIW,KAAK,CAAC,kGAAkG,CAAC;EACrH;AACF;AAhEa1B,IAAI,CAER2B,KAAK,GAAiBhC,SAAS;AAF3BK,IAAI,CAKRJ,GAAG,GAAQA,GAAG"}