{"version":3,"file":"uniform.js","names":["isNumberArray","isUniformValue","value","splitUniformsAndBindings","uniforms","result","bindings","Object","keys","forEach","name","uniform"],"sources":["../../../src/lib/uniforms/uniform.ts"],"sourcesContent":["import type {UniformValue} from '../../adapter/types/types';\nimport type {Binding} from '../../adapter/types/shader-layout';\nimport {isNumberArray} from '../../utils/is-array';\n\nexport function isUniformValue(value: unknown): boolean {\n  return isNumberArray(value) !== null || (typeof value === 'number') || (typeof value === 'boolean');\n}\n\ntype UniformsAndBindings = {\n  bindings: Record<string, Binding>,\n  uniforms: Record<string, UniformValue>\n};\nexport function splitUniformsAndBindings(uniforms: Record<string, Binding | UniformValue>): UniformsAndBindings {\n  const result: UniformsAndBindings = { bindings: {}, uniforms: {} } \n  Object.keys(uniforms).forEach(name => {\n    const uniform = uniforms[name];\n    if(isUniformValue(uniform)) {\n      result.uniforms[name] = uniform as UniformValue;\n    } else {\n      result.bindings[name] = uniform as Binding;\n    }\n  });\n\n  return result;\n}\n"],"mappings":"SAEQA,aAAa;AAErB,OAAO,SAASC,cAAcA,CAACC,KAAc,EAAW;EACtD,OAAOF,aAAa,CAACE,KAAK,CAAC,KAAK,IAAI,IAAK,OAAOA,KAAK,KAAK,QAAS,IAAK,OAAOA,KAAK,KAAK,SAAU;AACrG;AAMA,OAAO,SAASC,wBAAwBA,CAACC,QAAgD,EAAuB;EAC9G,MAAMC,MAA2B,GAAG;IAAEC,QAAQ,EAAE,CAAC,CAAC;IAAEF,QAAQ,EAAE,CAAC;EAAE,CAAC;EAClEG,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAACK,OAAO,CAACC,IAAI,IAAI;IACpC,MAAMC,OAAO,GAAGP,QAAQ,CAACM,IAAI,CAAC;IAC9B,IAAGT,cAAc,CAACU,OAAO,CAAC,EAAE;MAC1BN,MAAM,CAACD,QAAQ,CAACM,IAAI,CAAC,GAAGC,OAAuB;IACjD,CAAC,MAAM;MACLN,MAAM,CAACC,QAAQ,CAACI,IAAI,CAAC,GAAGC,OAAkB;IAC5C;EACF,CAAC,CAAC;EAEF,OAAON,MAAM;AACf"}