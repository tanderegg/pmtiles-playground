{"version":3,"file":"types.js","names":["TypedArray","NumberArray"],"sources":["../src/types.ts"],"sourcesContent":["/** TypeScript type covering all typed arrays */\nimport {TypedArray, NumberArray} from '@math.gl/types';\n\nexport {TypedArray, NumberArray};\n\n/** TypeScript type covering constructors of any of the typed arrays */\nexport type TypedArrayConstructor =\n  | Int8ArrayConstructor\n  | Uint8ArrayConstructor\n  | Int16ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int32ArrayConstructor\n  | Uint32ArrayConstructor\n  | Uint8ClampedArrayConstructor\n  | Float32ArrayConstructor\n  | Float64ArrayConstructor;\n\n/** Keep big int arrays separate as they are still problematic, can't be indexed and don't work well on Safari */\nexport type BigIntTypedArray = BigInt64Array | BigUint64Array;\n\nexport type BigIntOrNumberArray = NumberArray | BigIntTypedArray;\n\n/** Get the constructor type of a type */\nexport interface ConstructorOf<T> {\n  new (...args: unknown[]): T;\n}\n\n/** \n * Make specific fields in a type optional. Granular version of `Partial<T>` \n * @example \n *  type PartialProps = PartialBy<Required<DeviceProps>, 'device' | 'canvas'>\n */\nexport type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n"],"mappings":"AACA,SAAQA,UAAU,EAAEC,WAAW,QAAO,gBAAgB;AAEtD,SAAQD,UAAU,EAAEC,WAAW"}